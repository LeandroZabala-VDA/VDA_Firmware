
VDA_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005800  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c0  080059c0  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080059c0  080059c0  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080059c0  080059c0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059c4  080059c4  000069c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080059c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  080059d4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  080059d4  00007194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c2e  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b10  00000000  00000000  0001ac6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0001d780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ddb  00000000  00000000  0001e948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6aa  00000000  00000000  0001f723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015314  00000000  00000000  0003bdcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aac09  00000000  00000000  000510e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbcea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004afc  00000000  00000000  000fbd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005970 	.word	0x08005970

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005970 	.word	0x08005970

080001c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80001cc:	f3bf 8f4f 	dsb	sy
}
 80001d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80001d2:	4b06      	ldr	r3, [pc, #24]	@ (80001ec <__NVIC_SystemReset+0x24>)
 80001d4:	68db      	ldr	r3, [r3, #12]
 80001d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80001da:	4904      	ldr	r1, [pc, #16]	@ (80001ec <__NVIC_SystemReset+0x24>)
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <__NVIC_SystemReset+0x28>)
 80001de:	4313      	orrs	r3, r2
 80001e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80001e2:	f3bf 8f4f 	dsb	sy
}
 80001e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80001e8:	bf00      	nop
 80001ea:	e7fd      	b.n	80001e8 <__NVIC_SystemReset+0x20>
 80001ec:	e000ed00 	.word	0xe000ed00
 80001f0:	05fa0004 	.word	0x05fa0004

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f8:	f000 fcce 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fc:	f000 f84a 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000200:	f000 f9f8 	bl	80005f4 <MX_GPIO_Init>
  MX_SDADC1_Init();
 8000204:	f000 f912 	bl	800042c <MX_SDADC1_Init>
  MX_USART1_UART_Init();
 8000208:	f000 f9c4 	bl	8000594 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800020c:	f000 f976 	bl	80004fc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000210:	f000 f8a4 	bl	800035c <MX_ADC1_Init>
  MX_DAC2_Init();
 8000214:	f000 f8e0 	bl	80003d8 <MX_DAC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000218:	4818      	ldr	r0, [pc, #96]	@ (800027c <main+0x88>)
 800021a:	f003 fd0f 	bl	8003c3c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &received_byte,1);				// Configuro la Uart para que genere una interrupcion al llenarse el buffer rxBuff
 800021e:	2201      	movs	r2, #1
 8000220:	4917      	ldr	r1, [pc, #92]	@ (8000280 <main+0x8c>)
 8000222:	4818      	ldr	r0, [pc, #96]	@ (8000284 <main+0x90>)
 8000224:	f004 f9f1 	bl	800460a <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000228:	2100      	movs	r1, #0
 800022a:	4817      	ldr	r0, [pc, #92]	@ (8000288 <main+0x94>)
 800022c:	f001 fab6 	bl	800179c <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      if (flag) {
 8000230:	4b16      	ldr	r3, [pc, #88]	@ (800028c <main+0x98>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	b2db      	uxtb	r3, r3
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0fa      	beq.n	8000230 <main+0x3c>
          // Aquí puedes hacer algo cuando el flag esté en 1
      	//HAL_UART_Transmit(&huart1, (uint8_t[]){0x79}, 1, 1);
      HAL_GPIO_WritePin(FF_D_GPIO_Port, FF_D_Pin, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000240:	4813      	ldr	r0, [pc, #76]	@ (8000290 <main+0x9c>)
 8000242:	f001 fd39 	bl	8001cb8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(FF_CLK_GPIO_Port, FF_CLK_Pin, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800024c:	4810      	ldr	r0, [pc, #64]	@ (8000290 <main+0x9c>)
 800024e:	f001 fd33 	bl	8001cb8 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fd06 	bl	8000c64 <HAL_Delay>
      HAL_GPIO_WritePin(FF_CLK_GPIO_Port, FF_CLK_Pin, 1);
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800025e:	480c      	ldr	r0, [pc, #48]	@ (8000290 <main+0x9c>)
 8000260:	f001 fd2a 	bl	8001cb8 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fcfd 	bl	8000c64 <HAL_Delay>
      HAL_GPIO_WritePin(FF_CLK_GPIO_Port, FF_CLK_Pin, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000270:	4807      	ldr	r0, [pc, #28]	@ (8000290 <main+0x9c>)
 8000272:	f001 fd21 	bl	8001cb8 <HAL_GPIO_WritePin>
      NVIC_SystemReset();
 8000276:	f7ff ffa7 	bl	80001c8 <__NVIC_SystemReset>
 800027a:	bf00      	nop
 800027c:	200000b0 	.word	0x200000b0
 8000280:	20000185 	.word	0x20000185
 8000284:	200000fc 	.word	0x200000fc
 8000288:	20000058 	.word	0x20000058
 800028c:	20000184 	.word	0x20000184
 8000290:	48000400 	.word	0x48000400

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b09a      	sub	sp, #104	@ 0x68
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800029e:	2228      	movs	r2, #40	@ 0x28
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f005 fb38 	bl	8005918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	222c      	movs	r2, #44	@ 0x2c
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f005 fb2a 	bl	8005918 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c4:	2301      	movs	r3, #1
 80002c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002de:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002e4:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fd1c 	bl	8001d28 <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002f6:	f000 fa77 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fe:	2302      	movs	r3, #2
 8000300:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800030a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000310:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000314:	2102      	movs	r1, #2
 8000316:	4618      	mov	r0, r3
 8000318:	f002 fd14 	bl	8002d44 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000322:	f000 fa61 	bl	80007e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1
 8000326:	f640 0381 	movw	r3, #2177	@ 0x881
 800032a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800032c:	2300      	movs	r3, #0
 800032e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV12;
 8000330:	f04f 4328 	mov.w	r3, #2818572288	@ 0xa8000000
 8000334:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033a:	463b      	mov	r3, r7
 800033c:	4618      	mov	r0, r3
 800033e:	f002 ff13 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000348:	f000 fa4e 	bl	80007e8 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 800034c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000350:	f001 fcca 	bl	8001ce8 <HAL_PWREx_EnableSDADC>
}
 8000354:	bf00      	nop
 8000356:	3768      	adds	r7, #104	@ 0x68
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800036c:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <MX_ADC1_Init+0x74>)
 800036e:	4a19      	ldr	r2, [pc, #100]	@ (80003d4 <MX_ADC1_Init+0x78>)
 8000370:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000372:	4b17      	ldr	r3, [pc, #92]	@ (80003d0 <MX_ADC1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000378:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <MX_ADC1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800037e:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <MX_ADC1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000384:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <MX_ADC1_Init+0x74>)
 8000386:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800038a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800038c:	4b10      	ldr	r3, [pc, #64]	@ (80003d0 <MX_ADC1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000392:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_ADC1_Init+0x74>)
 8000394:	2201      	movs	r2, #1
 8000396:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000398:	480d      	ldr	r0, [pc, #52]	@ (80003d0 <MX_ADC1_Init+0x74>)
 800039a:	f000 fc87 	bl	8000cac <HAL_ADC_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003a4:	f000 fa20 	bl	80007e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80003a8:	2308      	movs	r3, #8
 80003aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4619      	mov	r1, r3
 80003b8:	4805      	ldr	r0, [pc, #20]	@ (80003d0 <MX_ADC1_Init+0x74>)
 80003ba:	f000 ff0b 	bl	80011d4 <HAL_ADC_ConfigChannel>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003c4:	f000 fa10 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c8:	bf00      	nop
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000028 	.word	0x20000028
 80003d4:	40012400 	.word	0x40012400

080003d8 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80003e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <MX_DAC2_Init+0x4c>)
 80003ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000428 <MX_DAC2_Init+0x50>)
 80003ec:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80003ee:	480d      	ldr	r0, [pc, #52]	@ (8000424 <MX_DAC2_Init+0x4c>)
 80003f0:	f001 f98d 	bl	800170e <HAL_DAC_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 80003fa:	f000 f9f5 	bl	80007e8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	4619      	mov	r1, r3
 800040c:	4805      	ldr	r0, [pc, #20]	@ (8000424 <MX_DAC2_Init+0x4c>)
 800040e:	f001 fa10 	bl	8001832 <HAL_DAC_ConfigChannel>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 8000418:	f000 f9e6 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000058 	.word	0x20000058
 8000428:	40009800 	.word	0x40009800

0800042c <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000432:	463b      	mov	r3, r7
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 800043e:	4b2c      	ldr	r3, [pc, #176]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 8000440:	4a2c      	ldr	r2, [pc, #176]	@ (80004f4 <MX_SDADC1_Init+0xc8>)
 8000442:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8000444:	4b2a      	ldr	r3, [pc, #168]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 800044a:	4b29      	ldr	r3, [pc, #164]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000450:	4b27      	ldr	r3, [pc, #156]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8000456:	4b26      	ldr	r3, [pc, #152]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 800045c:	4b24      	ldr	r3, [pc, #144]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 800045e:	2200      	movs	r2, #0
 8000460:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8000462:	4823      	ldr	r0, [pc, #140]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 8000464:	f002 fff2 	bl	800344c <HAL_SDADC_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_SDADC1_Init+0x46>
  {
    Error_Handler();
 800046e:	f000 f9bb 	bl	80007e8 <Error_Handler>
  }

  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8000472:	2100      	movs	r1, #0
 8000474:	481e      	ldr	r0, [pc, #120]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 8000476:	f003 f971 	bl	800375c <HAL_SDADC_SelectInjectedDelay>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_SDADC1_Init+0x58>
  {
    Error_Handler();
 8000480:	f000 f9b2 	bl	80007e8 <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8000484:	2100      	movs	r1, #0
 8000486:	481a      	ldr	r0, [pc, #104]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 8000488:	f003 f938 	bl	80036fc <HAL_SDADC_SelectInjectedTrigger>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_SDADC1_Init+0x6a>
  {
    Error_Handler();
 8000492:	f000 f9a9 	bl	80007e8 <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_OFF) != HAL_OK)
 8000496:	2200      	movs	r2, #0
 8000498:	4917      	ldr	r1, [pc, #92]	@ (80004f8 <MX_SDADC1_Init+0xcc>)
 800049a:	4815      	ldr	r0, [pc, #84]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 800049c:	f003 f8f2 	bl	8003684 <HAL_SDADC_InjectedConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_SDADC1_Init+0x7e>
  {
    Error_Handler();
 80004a6:	f000 f99f 	bl	80007e8 <Error_Handler>
  }

  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 80004aa:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 80004ae:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	461a      	mov	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	480b      	ldr	r0, [pc, #44]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 80004c4:	f003 f852 	bl	800356c <HAL_SDADC_PrepareChannelConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_SDADC1_Init+0xa6>
  {
    Error_Handler();
 80004ce:	f000 f98b 	bl	80007e8 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_0) != HAL_OK)
 80004d2:	2200      	movs	r2, #0
 80004d4:	4908      	ldr	r1, [pc, #32]	@ (80004f8 <MX_SDADC1_Init+0xcc>)
 80004d6:	4806      	ldr	r0, [pc, #24]	@ (80004f0 <MX_SDADC1_Init+0xc4>)
 80004d8:	f003 f884 	bl	80035e4 <HAL_SDADC_AssociateChannelConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_SDADC1_Init+0xba>
  {
    Error_Handler();
 80004e2:	f000 f981 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	2000006c 	.word	0x2000006c
 80004f4:	40016000 	.word	0x40016000
 80004f8:	00050020 	.word	0x00050020

080004fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	f107 0308 	add.w	r3, r7, #8
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000510:	463b      	mov	r3, r7
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000518:	4b1d      	ldr	r3, [pc, #116]	@ (8000590 <MX_TIM2_Init+0x94>)
 800051a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800051e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000520:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <MX_TIM2_Init+0x94>)
 8000522:	2207      	movs	r2, #7
 8000524:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000526:	4b1a      	ldr	r3, [pc, #104]	@ (8000590 <MX_TIM2_Init+0x94>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800052c:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <MX_TIM2_Init+0x94>)
 800052e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000532:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <MX_TIM2_Init+0x94>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <MX_TIM2_Init+0x94>)
 800053c:	2280      	movs	r2, #128	@ 0x80
 800053e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000540:	4813      	ldr	r0, [pc, #76]	@ (8000590 <MX_TIM2_Init+0x94>)
 8000542:	f003 fb2c 	bl	8003b9e <HAL_TIM_Base_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800054c:	f000 f94c 	bl	80007e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000554:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	4619      	mov	r1, r3
 800055c:	480c      	ldr	r0, [pc, #48]	@ (8000590 <MX_TIM2_Init+0x94>)
 800055e:	f003 fcc5 	bl	8003eec <HAL_TIM_ConfigClockSource>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000568:	f000 f93e 	bl	80007e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	@ (8000590 <MX_TIM2_Init+0x94>)
 800057a:	f003 fee7 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000584:	f000 f930 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000b0 	.word	0x200000b0

08000594 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 800059a:	4a15      	ldr	r2, [pc, #84]	@ (80005f0 <MX_USART1_UART_Init+0x5c>)
 800059c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 80005a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ca:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <MX_USART1_UART_Init+0x58>)
 80005d8:	f003 ff40 	bl	800445c <HAL_UART_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005e2:	f000 f901 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000fc 	.word	0x200000fc
 80005f0:	40013800 	.word	0x40013800

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a2a      	ldr	r2, [pc, #168]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 8000610:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a24      	ldr	r2, [pc, #144]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 8000628:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a1e      	ldr	r2, [pc, #120]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 8000640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a18      	ldr	r2, [pc, #96]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 8000658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <MX_GPIO_Init+0xc4>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACQ_LED_Pin|POWER_LED_Pin|FF_D_Pin|FF_CLK_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000670:	4812      	ldr	r0, [pc, #72]	@ (80006bc <MX_GPIO_Init+0xc8>)
 8000672:	f001 fb21 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8000676:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <MX_GPIO_Init+0xcc>)
 800068c:	f001 f99a 	bl	80019c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACQ_LED_Pin POWER_LED_Pin FF_D_Pin FF_CLK_Pin */
  GPIO_InitStruct.Pin = ACQ_LED_Pin|POWER_LED_Pin|FF_D_Pin|FF_CLK_Pin;
 8000690:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_GPIO_Init+0xc8>)
 80006aa:	f001 f98b 	bl	80019c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	@ 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000400 	.word	0x48000400
 80006c0:	48000800 	.word	0x48000800

080006c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) { // Cambia USART1 por el periférico que estés usando
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a09      	ldr	r2, [pc, #36]	@ (80006f8 <HAL_UART_RxCpltCallback+0x34>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d10b      	bne.n	80006ee <HAL_UART_RxCpltCallback+0x2a>
        if (received_byte == 0x7F) {
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_UART_RxCpltCallback+0x38>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b7f      	cmp	r3, #127	@ 0x7f
 80006dc:	d102      	bne.n	80006e4 <HAL_UART_RxCpltCallback+0x20>
            flag = 1; // Activa el flag si se recibe 0x7F
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <HAL_UART_RxCpltCallback+0x3c>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
        }
        // Reinicia la recepción para continuar recibiendo datos
        HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	4905      	ldr	r1, [pc, #20]	@ (80006fc <HAL_UART_RxCpltCallback+0x38>)
 80006e8:	4806      	ldr	r0, [pc, #24]	@ (8000704 <HAL_UART_RxCpltCallback+0x40>)
 80006ea:	f003 ff8e 	bl	800460a <HAL_UART_Receive_IT>
    }
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40013800 	.word	0x40013800
 80006fc:	20000185 	.word	0x20000185
 8000700:	20000184 	.word	0x20000184
 8000704:	200000fc 	.word	0x200000fc

08000708 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000718:	d135      	bne.n	8000786 <HAL_TIM_PeriodElapsedCallback+0x7e>
	{
		//HAL_GPIO_TogglePin(POWER_LED_GPIO_Port, POWER_LED_Pin);
		HAL_ADC_Start(&hadc1);
 800071a:	481d      	ldr	r0, [pc, #116]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800071c:	f000 fb9e 	bl	8000e5c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8000720:	210a      	movs	r1, #10
 8000722:	481b      	ldr	r0, [pc, #108]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000724:	f000 fc30 	bl	8000f88 <HAL_ADC_PollForConversion>
		potentiometer_value = HAL_ADC_GetValue(&hadc1);
 8000728:	4819      	ldr	r0, [pc, #100]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800072a:	f000 fd45 	bl	80011b8 <HAL_ADC_GetValue>
 800072e:	4603      	mov	r3, r0
 8000730:	4a18      	ldr	r2, [pc, #96]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000732:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8000734:	4816      	ldr	r0, [pc, #88]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000736:	f000 fbfb 	bl	8000f30 <HAL_ADC_Stop>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, potentiometer_value);
 800073a:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	4815      	ldr	r0, [pc, #84]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000744:	f001 f805 	bl	8001752 <HAL_DAC_SetValue>
		lectura_vda = Read_ADC(&hsdadc1);
 8000748:	4814      	ldr	r0, [pc, #80]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800074a:	f000 f82d 	bl	80007a8 <Read_ADC>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000754:	801a      	strh	r2, [r3, #0]
		uint16_t lectura_vda_10bit = lectura_vda >> 6; // Convertir a 10 bits
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	099b      	lsrs	r3, r3, #6
 800075c:	81fb      	strh	r3, [r7, #14]
	    // Crear trama de datos
	    uint8_t frame[4];
	    frame[0] = 'A'; // Inicio de trama
 800075e:	2341      	movs	r3, #65	@ 0x41
 8000760:	723b      	strb	r3, [r7, #8]
	    frame[1] = (uint8_t)(lectura_vda_10bit & 0xFF); // Byte menos significativo
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	727b      	strb	r3, [r7, #9]
	    frame[2] = (uint8_t)((lectura_vda_10bit >> 8) & 0xFF); // Byte más significativo
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b29b      	uxth	r3, r3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	72bb      	strb	r3, [r7, #10]
	    frame[3] = 'Z'; // Fin de trama
 8000772:	235a      	movs	r3, #90	@ 0x5a
 8000774:	72fb      	strb	r3, [r7, #11]

	    // Enviar por UART
	    HAL_UART_Transmit(&huart1, frame, sizeof(frame), HAL_MAX_DELAY);
 8000776:	f107 0108 	add.w	r1, r7, #8
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	2204      	movs	r2, #4
 8000780:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000782:	f003 feb9 	bl	80044f8 <HAL_UART_Transmit>
	}
}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000028 	.word	0x20000028
 8000794:	20000188 	.word	0x20000188
 8000798:	20000058 	.word	0x20000058
 800079c:	2000006c 	.word	0x2000006c
 80007a0:	2000018c 	.word	0x2000018c
 80007a4:	200000fc 	.word	0x200000fc

080007a8 <Read_ADC>:


uint16_t Read_ADC(SDADC_HandleTypeDef *hsdadc) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    int16_t adcVal;
    uint32_t channel;
    uint16_t vin;

    // Inicia la conversión inyectada
    HAL_SDADC_InjectedStart(hsdadc);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f003 f807 	bl	80037c4 <HAL_SDADC_InjectedStart>

    // Espera a que la conversión se complete
    HAL_SDADC_PollForInjectedConversion(hsdadc, HAL_MAX_DELAY);
 80007b6:	f04f 31ff 	mov.w	r1, #4294967295
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f003 f81d 	bl	80037fa <HAL_SDADC_PollForInjectedConversion>

    // Obtiene el valor del ADC
    adcVal = HAL_SDADC_InjectedGetValue(hsdadc, &channel);
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	4619      	mov	r1, r3
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f003 f89f 	bl	800390a <HAL_SDADC_InjectedGetValue>
 80007cc:	4603      	mov	r3, r0
 80007ce:	81fb      	strh	r3, [r7, #14]

    // Detiene la conversión
    HAL_SDADC_InjectedStop(hsdadc);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f003 f87f 	bl	80038d4 <HAL_SDADC_InjectedStop>

    // Calcula el voltaje en base al valor del ADC
    vin = (adcVal + 32768);
 80007d6:	89fb      	ldrh	r3, [r7, #14]
 80007d8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80007dc:	81bb      	strh	r3, [r7, #12]

    return vin; // Retorna el valor en voltios
 80007de:	89bb      	ldrh	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <Error_Handler+0x8>

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <HAL_MspInit+0x44>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <HAL_MspInit+0x44>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <HAL_MspInit+0x44>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <HAL_MspInit+0x44>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <HAL_MspInit+0x44>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081c:	61d3      	str	r3, [r2, #28]
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_MspInit+0x44>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a15      	ldr	r2, [pc, #84]	@ (80008b0 <HAL_ADC_MspInit+0x74>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d123      	bne.n	80008a6 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_ADC_MspInit+0x78>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a14      	ldr	r2, [pc, #80]	@ (80008b4 <HAL_ADC_MspInit+0x78>)
 8000864:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_ADC_MspInit+0x78>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_ADC_MspInit+0x78>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a0e      	ldr	r2, [pc, #56]	@ (80008b4 <HAL_ADC_MspInit+0x78>)
 800087c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <HAL_ADC_MspInit+0x78>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800088e:	2301      	movs	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000892:	2303      	movs	r3, #3
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <HAL_ADC_MspInit+0x7c>)
 80008a2:	f001 f88f 	bl	80019c4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	@ 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40012400 	.word	0x40012400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400

080008bc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a15      	ldr	r2, [pc, #84]	@ (8000930 <HAL_DAC_MspInit+0x74>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d124      	bne.n	8000928 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC2_MspInit 0 */

    /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_DAC_MspInit+0x78>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a14      	ldr	r2, [pc, #80]	@ (8000934 <HAL_DAC_MspInit+0x78>)
 80008e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_DAC_MspInit+0x78>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_DAC_MspInit+0x78>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <HAL_DAC_MspInit+0x78>)
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <HAL_DAC_MspInit+0x78>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800090e:	2340      	movs	r3, #64	@ 0x40
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000924:	f001 f84e 	bl	80019c4 <HAL_GPIO_Init>

    /* USER CODE END DAC2_MspInit 1 */

  }

}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40009800 	.word	0x40009800
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_SDADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsdadc: SDADC handle pointer
  * @retval None
  */
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a15      	ldr	r2, [pc, #84]	@ (80009ac <HAL_SDADC_MspInit+0x74>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d123      	bne.n	80009a2 <HAL_SDADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN SDADC1_MspInit 0 */

    /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <HAL_SDADC_MspInit+0x78>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a14      	ldr	r2, [pc, #80]	@ (80009b0 <HAL_SDADC_MspInit+0x78>)
 8000960:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_SDADC_MspInit+0x78>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <HAL_SDADC_MspInit+0x78>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a0e      	ldr	r2, [pc, #56]	@ (80009b0 <HAL_SDADC_MspInit+0x78>)
 8000978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <HAL_SDADC_MspInit+0x78>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**SDADC1 GPIO Configuration
    PB1     ------> SDADC1_AIN5P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800098a:	2302      	movs	r3, #2
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098e:	2303      	movs	r3, #3
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <HAL_SDADC_MspInit+0x7c>)
 800099e:	f001 f811 	bl	80019c4 <HAL_GPIO_Init>

    /* USER CODE END SDADC1_MspInit 1 */

  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	@ 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40016000 	.word	0x40016000
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000400 	.word	0x48000400

080009b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009c8:	d113      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <HAL_TIM_Base_MspInit+0x44>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a0b      	ldr	r2, [pc, #44]	@ (80009fc <HAL_TIM_Base_MspInit+0x44>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_TIM_Base_MspInit+0x44>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	201c      	movs	r0, #28
 80009e8:	f000 fe5b 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009ec:	201c      	movs	r0, #28
 80009ee:	f000 fe74 	bl	80016da <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <HAL_UART_MspInit+0x90>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d131      	bne.n	8000a86 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <HAL_UART_MspInit+0x94>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <HAL_UART_MspInit+0x94>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2c:	6193      	str	r3, [r2, #24]
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_UART_MspInit+0x94>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <HAL_UART_MspInit+0x94>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a15      	ldr	r2, [pc, #84]	@ (8000a94 <HAL_UART_MspInit+0x94>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <HAL_UART_MspInit+0x94>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a64:	2307      	movs	r3, #7
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a72:	f000 ffa7 	bl	80019c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2025      	movs	r0, #37	@ 0x25
 8000a7c:	f000 fe11 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a80:	2025      	movs	r0, #37	@ 0x25
 8000a82:	f000 fe2a 	bl	80016da <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40021000 	.word	0x40021000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <MemManage_Handler+0x4>

08000ab0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <UsageFault_Handler+0x4>

08000ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aee:	f000 f899 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000afc:	4802      	ldr	r0, [pc, #8]	@ (8000b08 <TIM2_IRQHandler+0x10>)
 8000afe:	f003 f905 	bl	8003d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200000b0 	.word	0x200000b0

08000b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <USART1_IRQHandler+0x10>)
 8000b12:	f003 fdbf 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000fc 	.word	0x200000fc

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b7c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b48:	f7ff ffea 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4e:	490d      	ldr	r1, [pc, #52]	@ (8000b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <LoopForever+0xe>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b64:	4c0a      	ldr	r4, [pc, #40]	@ (8000b90 <LoopForever+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b72:	f004 fed9 	bl	8005928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b76:	f7ff fb3d 	bl	80001f4 <main>

08000b7a <LoopForever>:

LoopForever:
    b LoopForever
 8000b7a:	e7fe      	b.n	8000b7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b7c:	20006000 	.word	0x20006000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b88:	080059c8 	.word	0x080059c8
  ldr r2, =_sbss
 8000b8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b90:	20000194 	.word	0x20000194

08000b94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <HAL_Init+0x28>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <HAL_Init+0x28>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 fd6f 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	200f      	movs	r0, #15
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fe1e 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fd87 	bl	80016f6 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 fd4f 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	@ (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000190 	.word	0x20000190

08000c4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000190 	.word	0x20000190

08000c64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff ffee 	bl	8000c4c <HAL_GetTick>
 8000c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7c:	d005      	beq.n	8000c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <HAL_Delay+0x44>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c8a:	bf00      	nop
 8000c8c:	f7ff ffde 	bl	8000c4c <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d8f7      	bhi.n	8000c8c <HAL_Delay+0x28>
  {
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0be      	b.n	8000e4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d109      	bne.n	8000cf0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fda6 	bl	800083c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 fbb9 	bl	8001468 <ADC_ConversionStop_Disable>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8099 	bne.w	8000e3a <HAL_ADC_Init+0x18e>
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 8095 	bne.w	8000e3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d18:	f023 0302 	bic.w	r3, r3, #2
 8000d1c:	f043 0202 	orr.w	r2, r3, #2
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000d2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7b1b      	ldrb	r3, [r3, #12]
 8000d32:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8000d34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d44:	d003      	beq.n	8000d4e <HAL_ADC_Init+0xa2>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d102      	bne.n	8000d54 <HAL_ADC_Init+0xa8>
 8000d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d52:	e000      	b.n	8000d56 <HAL_ADC_Init+0xaa>
 8000d54:	2300      	movs	r3, #0
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7d1b      	ldrb	r3, [r3, #20]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d119      	bne.n	8000d98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7b1b      	ldrb	r3, [r3, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e00b      	b.n	8000d98 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d84:	f043 0220 	orr.w	r2, r3, #32
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d90:	f043 0201 	orr.w	r2, r3, #1
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <HAL_ADC_Init+0x1a8>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dc8:	d003      	beq.n	8000dd2 <HAL_ADC_Init+0x126>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d104      	bne.n	8000ddc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	051b      	lsls	r3, r3, #20
 8000dda:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <HAL_ADC_Init+0x1ac>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d10b      	bne.n	8000e18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0a:	f023 0303 	bic.w	r3, r3, #3
 8000e0e:	f043 0201 	orr.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e16:	e018      	b.n	8000e4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e1c:	f023 0312 	bic.w	r3, r3, #18
 8000e20:	f043 0210 	orr.w	r2, r3, #16
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e38:	e007      	b.n	8000e4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e3e:	f043 0210 	orr.w	r2, r3, #16
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	ffe1f7fd 	.word	0xffe1f7fd
 8000e58:	ff1f0efe 	.word	0xff1f0efe

08000e5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d101      	bne.n	8000e76 <HAL_ADC_Start+0x1a>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e058      	b.n	8000f28 <HAL_ADC_Start+0xcc>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 fa98 	bl	80013b4 <ADC_Enable>
 8000e84:	4603      	mov	r3, r0
 8000e86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d14b      	bne.n	8000f26 <HAL_ADC_Start+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e96:	f023 0301 	bic.w	r3, r3, #1
 8000e9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) */
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000eb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ecc:	d106      	bne.n	8000edc <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed2:	f023 0206 	bic.w	r2, r3, #6
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eda:	e002      	b.n	8000ee2 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f06f 0202 	mvn.w	r2, #2
 8000ef2:	601a      	str	r2, [r3, #0]
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000efe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f02:	d108      	bne.n	8000f16 <HAL_ADC_Start+0xba>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	e007      	b.n	8000f26 <HAL_ADC_Start+0xca>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000f24:	609a      	str	r2, [r3, #8]
    }
  }

  /* Return function status */
  return tmp_hal_status;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_ADC_Stop+0x1a>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e01a      	b.n	8000f80 <HAL_ADC_Stop+0x50>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 fa88 	bl	8001468 <ADC_ConversionStop_Disable>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d109      	bne.n	8000f76 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	f043 0201 	orr.w	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  
  /* Variables for polling in case of scan mode enabled */
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fae:	f043 0220 	orr.w	r2, r3, #32
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0e9      	b.n	8001196 <HAL_ADC_PollForConversion+0x20e>
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fc2:	f7ff fe43 	bl	8000c4c <HAL_GetTick>
 8000fc6:	60f8      	str	r0, [r7, #12]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d131      	bne.n	800103a <HAL_ADC_PollForConversion+0xb2>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fdc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d12a      	bne.n	800103a <HAL_ADC_PollForConversion+0xb2>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fe4:	e021      	b.n	800102a <HAL_ADC_PollForConversion+0xa2>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d01d      	beq.n	800102a <HAL_ADC_PollForConversion+0xa2>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_ADC_PollForConversion+0x7c>
 8000ff4:	f7ff fe2a 	bl	8000c4c <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d212      	bcs.n	800102a <HAL_ADC_PollForConversion+0xa2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10b      	bne.n	800102a <HAL_ADC_PollForConversion+0xa2>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001016:	f043 0204 	orr.w	r2, r3, #4
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e0b5      	b.n	8001196 <HAL_ADC_PollForConversion+0x20e>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0d6      	beq.n	8000fe6 <HAL_ADC_PollForConversion+0x5e>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001038:	e083      	b.n	8001142 <HAL_ADC_PollForConversion+0x1ba>
  {
    /* Replace polling by wait for maximum conversion time */
    /* Calculation of CPU cycles corresponding to ADC conversion cycles.      */
    /* Retrieve ADC clock prescaler and ADC maximum conversion cycles on all  */
    /* channels.                                                              */
    Conversion_Timeout_CPU_cycles_max = ADC_CLOCK_PRESCALER_RANGE() ;
 800103a:	4b59      	ldr	r3, [pc, #356]	@ (80011a0 <HAL_ADC_PollForConversion+0x218>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_ADC_PollForConversion+0xd2>
 8001046:	4b56      	ldr	r3, [pc, #344]	@ (80011a0 <HAL_ADC_PollForConversion+0x218>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_ADC_PollForConversion+0xce>
 8001052:	2302      	movs	r3, #2
 8001054:	e00a      	b.n	800106c <HAL_ADC_PollForConversion+0xe4>
 8001056:	2320      	movs	r3, #32
 8001058:	e008      	b.n	800106c <HAL_ADC_PollForConversion+0xe4>
 800105a:	4b51      	ldr	r3, [pc, #324]	@ (80011a0 <HAL_ADC_PollForConversion+0x218>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_PollForConversion+0xe2>
 8001066:	2320      	movs	r3, #32
 8001068:	e000      	b.n	800106c <HAL_ADC_PollForConversion+0xe4>
 800106a:	2380      	movs	r3, #128	@ 0x80
 800106c:	613b      	str	r3, [r7, #16]
    Conversion_Timeout_CPU_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	4b4b      	ldr	r3, [pc, #300]	@ (80011a4 <HAL_ADC_PollForConversion+0x21c>)
 8001076:	4013      	ands	r3, r2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d118      	bne.n	80010ae <HAL_ADC_PollForConversion+0x126>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	4b49      	ldr	r3, [pc, #292]	@ (80011a8 <HAL_ADC_PollForConversion+0x220>)
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d111      	bne.n	80010ae <HAL_ADC_PollForConversion+0x126>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	4b46      	ldr	r3, [pc, #280]	@ (80011ac <HAL_ADC_PollForConversion+0x224>)
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d108      	bne.n	80010aa <HAL_ADC_PollForConversion+0x122>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	4b44      	ldr	r3, [pc, #272]	@ (80011b0 <HAL_ADC_PollForConversion+0x228>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_ADC_PollForConversion+0x122>
 80010a6:	2314      	movs	r3, #20
 80010a8:	e020      	b.n	80010ec <HAL_ADC_PollForConversion+0x164>
 80010aa:	2329      	movs	r3, #41	@ 0x29
 80010ac:	e01e      	b.n	80010ec <HAL_ADC_PollForConversion+0x164>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	4b3d      	ldr	r3, [pc, #244]	@ (80011ac <HAL_ADC_PollForConversion+0x224>)
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d106      	bne.n	80010ca <HAL_ADC_PollForConversion+0x142>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	4b3b      	ldr	r3, [pc, #236]	@ (80011b0 <HAL_ADC_PollForConversion+0x228>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00d      	beq.n	80010e6 <HAL_ADC_PollForConversion+0x15e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	4b38      	ldr	r3, [pc, #224]	@ (80011b4 <HAL_ADC_PollForConversion+0x22c>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d108      	bne.n	80010ea <HAL_ADC_PollForConversion+0x162>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <HAL_ADC_PollForConversion+0x22c>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_ADC_PollForConversion+0x162>
 80010e6:	2354      	movs	r3, #84	@ 0x54
 80010e8:	e000      	b.n	80010ec <HAL_ADC_PollForConversion+0x164>
 80010ea:	23fc      	movs	r3, #252	@ 0xfc
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	613b      	str	r3, [r7, #16]
    
    /* Poll with maximum conversion time */
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010f4:	e021      	b.n	800113a <HAL_ADC_PollForConversion+0x1b2>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d01a      	beq.n	8001134 <HAL_ADC_PollForConversion+0x1ac>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_ADC_PollForConversion+0x18c>
 8001104:	f7ff fda2 	bl	8000c4c <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d20f      	bcs.n	8001134 <HAL_ADC_PollForConversion+0x1ac>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d20b      	bcs.n	8001134 <HAL_ADC_PollForConversion+0x1ac>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001120:	f043 0204 	orr.w	r2, r3, #4
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e030      	b.n	8001196 <HAL_ADC_PollForConversion+0x20e>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	429a      	cmp	r2, r3
 8001140:	d3d9      	bcc.n	80010f6 <HAL_ADC_PollForConversion+0x16e>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f06f 0212 	mvn.w	r2, #18
 800114a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001150:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F37x devices, in case of sequencer enabled                 */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001162:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001166:	d115      	bne.n	8001194 <HAL_ADC_PollForConversion+0x20c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800116c:	2b00      	cmp	r3, #0
 800116e:	d111      	bne.n	8001194 <HAL_ADC_PollForConversion+0x20c>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001174:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <HAL_ADC_PollForConversion+0x20c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118c:	f043 0201 	orr.w	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	24924924 	.word	0x24924924
 80011a8:	00924924 	.word	0x00924924
 80011ac:	12492492 	.word	0x12492492
 80011b0:	00492492 	.word	0x00492492
 80011b4:	00249249 	.word	0x00249249

080011b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x20>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e0d2      	b.n	800139a <HAL_ADC_ConfigChannel+0x1c6>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b06      	cmp	r3, #6
 8001202:	d81c      	bhi.n	800123e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	3b05      	subs	r3, #5
 8001216:	221f      	movs	r2, #31
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	4019      	ands	r1, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	3b05      	subs	r3, #5
 8001230:	fa00 f203 	lsl.w	r2, r0, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	635a      	str	r2, [r3, #52]	@ 0x34
 800123c:	e03c      	b.n	80012b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b0c      	cmp	r3, #12
 8001244:	d81c      	bhi.n	8001280 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	3b23      	subs	r3, #35	@ 0x23
 8001258:	221f      	movs	r2, #31
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	4019      	ands	r1, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	3b23      	subs	r3, #35	@ 0x23
 8001272:	fa00 f203 	lsl.w	r2, r0, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	631a      	str	r2, [r3, #48]	@ 0x30
 800127e:	e01b      	b.n	80012b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	3b41      	subs	r3, #65	@ 0x41
 8001292:	221f      	movs	r2, #31
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	4019      	ands	r1, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	3b41      	subs	r3, #65	@ 0x41
 80012ac:	fa00 f203 	lsl.w	r2, r0, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b0a      	cmp	r3, #10
 80012be:	d91c      	bls.n	80012fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68d9      	ldr	r1, [r3, #12]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	3b1e      	subs	r3, #30
 80012d2:	2207      	movs	r2, #7
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	4019      	ands	r1, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	6898      	ldr	r0, [r3, #8]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	3b1e      	subs	r3, #30
 80012ec:	fa00 f203 	lsl.w	r2, r0, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	e019      	b.n	800132e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6919      	ldr	r1, [r3, #16]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	2207      	movs	r2, #7
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	4019      	ands	r1, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6898      	ldr	r0, [r3, #8]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	fa00 f203 	lsl.w	r2, r0, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b10      	cmp	r3, #16
 8001334:	d003      	beq.n	800133e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800133a:	2b11      	cmp	r3, #17
 800133c:	d11e      	bne.n	800137c <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800134c:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b10      	cmp	r3, #16
 8001354:	d11c      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001356:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <HAL_ADC_ConfigChannel+0x1d4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <HAL_ADC_ConfigChannel+0x1d8>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	0c9a      	lsrs	r2, r3, #18
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 800136c:	e002      	b.n	8001374 <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3b01      	subs	r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f9      	bne.n	800136e <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800137a:	e009      	b.n	8001390 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b12      	cmp	r3, #18
 8001382:	d105      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_ADC_ConfigChannel+0x1dc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <HAL_ADC_ConfigChannel+0x1dc>)
 800138a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800138e:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000000 	.word	0x20000000
 80013ac:	431bde83 	.word	0x431bde83
 80013b0:	40010000 	.word	0x40010000

080013b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d040      	beq.n	8001454 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f042 0201 	orr.w	r2, r2, #1
 80013e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <ADC_Enable+0xac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001464 <ADC_Enable+0xb0>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	0c9b      	lsrs	r3, r3, #18
 80013ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013f0:	e002      	b.n	80013f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013fe:	f7ff fc25 	bl	8000c4c <HAL_GetTick>
 8001402:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001404:	e01f      	b.n	8001446 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001406:	f7ff fc21 	bl	8000c4c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d918      	bls.n	8001446 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d011      	beq.n	8001446 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001426:	f043 0210 	orr.w	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e007      	b.n	8001456 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b01      	cmp	r3, #1
 8001452:	d1d8      	bne.n	8001406 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000
 8001464:	431bde83 	.word	0x431bde83

08001468 <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d12e      	bne.n	80014e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0201 	bic.w	r2, r2, #1
 8001490:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001492:	f7ff fbdb 	bl	8000c4c <HAL_GetTick>
 8001496:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001498:	e01b      	b.n	80014d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800149a:	f7ff fbd7 	bl	8000c4c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d914      	bls.n	80014d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d10d      	bne.n	80014d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ba:	f043 0210 	orr.w	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e007      	b.n	80014e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d0dc      	beq.n	800149a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <__NVIC_SetPriorityGrouping>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4907      	ldr	r1, [pc, #28]	@ (8001588 <__NVIC_EnableIRQ+0x38>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff29 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff3e 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff31 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e014      	b.n	800174a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	791b      	ldrb	r3, [r3, #4]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff f8c3 	bl	80008bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2202      	movs	r2, #2
 800173a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001752:	b480      	push	{r7}
 8001754:	b087      	sub	sp, #28
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	3308      	adds	r3, #8
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e004      	b.n	8001786 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	3314      	adds	r3, #20
 8001784:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	461a      	mov	r2, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	795b      	ldrb	r3, [r3, #5]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_DAC_Start+0x16>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e039      	b.n	8001826 <HAL_DAC_Start+0x8a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	409a      	lsls	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10f      	bne.n	80017f8 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80017e2:	2b3c      	cmp	r3, #60	@ 0x3c
 80017e4:	d118      	bne.n	8001818 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	e00f      	b.n	8001818 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001802:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8001806:	d107      	bne.n	8001818 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0202 	orr.w	r2, r2, #2
 8001816:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001832:	b480      	push	{r7}
 8001834:	b087      	sub	sp, #28
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	795b      	ldrb	r3, [r3, #5]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_DAC_ConfigChannel+0x20>
 800184e:	2302      	movs	r3, #2
 8001850:	e036      	b.n	80018c0 <HAL_DAC_ConfigChannel+0x8e>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2201      	movs	r2, #1
 8001856:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2202      	movs	r2, #2
 800185c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001866:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4013      	ands	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	4313      	orrs	r3, r2
 8001890:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	22c0      	movs	r2, #192	@ 0xc0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43da      	mvns	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	400a      	ands	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2201      	movs	r2, #1
 80018b6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e02e      	b.n	800193c <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d008      	beq.n	80018fa <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2204      	movs	r2, #4
 80018ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e020      	b.n	800193c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 020e 	bic.w	r2, r2, #14
 8001908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800195a:	2b02      	cmp	r3, #2
 800195c:	d005      	beq.n	800196a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2204      	movs	r2, #4
 8001962:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e027      	b.n	80019ba <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 020e 	bic.w	r2, r2, #14
 8001978:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0201 	bic.w	r2, r2, #1
 8001988:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001992:	2101      	movs	r1, #1
 8001994:	fa01 f202 	lsl.w	r2, r1, r2
 8001998:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
    }
  }
  return status;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d2:	e154      	b.n	8001c7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2101      	movs	r1, #1
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8146 	beq.w	8001c78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d005      	beq.n	8001a04 <HAL_GPIO_Init+0x40>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d130      	bne.n	8001a66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	f003 0201 	and.w	r2, r3, #1
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d017      	beq.n	8001aa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d123      	bne.n	8001af6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	6939      	ldr	r1, [r7, #16]
 8001af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0203 	and.w	r2, r3, #3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80a0 	beq.w	8001c78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b38:	4b58      	ldr	r3, [pc, #352]	@ (8001c9c <HAL_GPIO_Init+0x2d8>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a57      	ldr	r2, [pc, #348]	@ (8001c9c <HAL_GPIO_Init+0x2d8>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b55      	ldr	r3, [pc, #340]	@ (8001c9c <HAL_GPIO_Init+0x2d8>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b50:	4a53      	ldr	r2, [pc, #332]	@ (8001ca0 <HAL_GPIO_Init+0x2dc>)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b7a:	d019      	beq.n	8001bb0 <HAL_GPIO_Init+0x1ec>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a49      	ldr	r2, [pc, #292]	@ (8001ca4 <HAL_GPIO_Init+0x2e0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <HAL_GPIO_Init+0x1e8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a48      	ldr	r2, [pc, #288]	@ (8001ca8 <HAL_GPIO_Init+0x2e4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_GPIO_Init+0x1e4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a47      	ldr	r2, [pc, #284]	@ (8001cac <HAL_GPIO_Init+0x2e8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <HAL_GPIO_Init+0x1e0>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a46      	ldr	r2, [pc, #280]	@ (8001cb0 <HAL_GPIO_Init+0x2ec>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_GPIO_Init+0x1dc>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e008      	b.n	8001bb2 <HAL_GPIO_Init+0x1ee>
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	e006      	b.n	8001bb2 <HAL_GPIO_Init+0x1ee>
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e004      	b.n	8001bb2 <HAL_GPIO_Init+0x1ee>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e002      	b.n	8001bb2 <HAL_GPIO_Init+0x1ee>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <HAL_GPIO_Init+0x1ee>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	f002 0203 	and.w	r2, r2, #3
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	4093      	lsls	r3, r2
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc2:	4937      	ldr	r1, [pc, #220]	@ (8001ca0 <HAL_GPIO_Init+0x2dc>)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd0:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c1e:	4a25      	ldr	r2, [pc, #148]	@ (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c24:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c48:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c72:	4a10      	ldr	r2, [pc, #64]	@ (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f47f aea3 	bne.w	80019d4 <HAL_GPIO_Init+0x10>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	48000400 	.word	0x48000400
 8001ca8:	48000800 	.word	0x48000800
 8001cac:	48000c00 	.word	0x48000c00
 8001cb0:	48001000 	.word	0x48001000
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd4:	e002      	b.n	8001cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_PWREx_EnableSDADC+0x38>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <HAL_PWREx_EnableSDADC+0x38>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_PWREx_EnableSDADC+0x38>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_PWREx_EnableSDADC+0x3c>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4905      	ldr	r1, [pc, #20]	@ (8001d24 <HAL_PWREx_EnableSDADC+0x3c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40007000 	.word	0x40007000

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d38:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f000 bff4 	b.w	8002d36 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 816d 	beq.w	800203e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d64:	4bb4      	ldr	r3, [pc, #720]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d00c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d70:	4bb1      	ldr	r3, [pc, #708]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d157      	bne.n	8001e2c <HAL_RCC_OscConfig+0x104>
 8001d7c:	4bae      	ldr	r3, [pc, #696]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d88:	d150      	bne.n	8001e2c <HAL_RCC_OscConfig+0x104>
 8001d8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d8e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001daa:	d802      	bhi.n	8001db2 <HAL_RCC_OscConfig+0x8a>
 8001dac:	4ba2      	ldr	r3, [pc, #648]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0xb6>
 8001db2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001dc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dca:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001dce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001dda:	4b97      	ldr	r3, [pc, #604]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001de2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001de6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001dea:	fa92 f2a2 	rbit	r2, r2
 8001dee:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001df2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001df6:	fab2 f282 	clz	r2, r2
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	f042 0220 	orr.w	r2, r2, #32
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f002 021f 	and.w	r2, r2, #31
 8001e06:	2101      	movs	r1, #1
 8001e08:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8114 	beq.w	800203c <HAL_RCC_OscConfig+0x314>
 8001e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f040 810b 	bne.w	800203c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f000 bf85 	b.w	8002d36 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x124>
 8001e3e:	4b7e      	ldr	r3, [pc, #504]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7d      	ldr	r2, [pc, #500]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e036      	b.n	8001eba <HAL_RCC_OscConfig+0x192>
 8001e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x14e>
 8001e5c:	4b76      	ldr	r3, [pc, #472]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a75      	ldr	r2, [pc, #468]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b73      	ldr	r3, [pc, #460]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a72      	ldr	r2, [pc, #456]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e021      	b.n	8001eba <HAL_RCC_OscConfig+0x192>
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x17a>
 8001e88:	4b6b      	ldr	r3, [pc, #428]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001e8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b68      	ldr	r3, [pc, #416]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a67      	ldr	r2, [pc, #412]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e00b      	b.n	8001eba <HAL_RCC_OscConfig+0x192>
 8001ea2:	4b65      	ldr	r3, [pc, #404]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a64      	ldr	r2, [pc, #400]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b62      	ldr	r3, [pc, #392]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a61      	ldr	r2, [pc, #388]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eba:	4b5f      	ldr	r3, [pc, #380]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	f023 020f 	bic.w	r2, r3, #15
 8001ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	495a      	ldr	r1, [pc, #360]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d054      	beq.n	8001f8e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe feb2 	bl	8000c4c <HAL_GetTick>
 8001ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eee:	f7fe fead 	bl	8000c4c <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	@ 0x64
 8001efc:	d902      	bls.n	8001f04 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	f000 bf19 	b.w	8002d36 <HAL_RCC_OscConfig+0x100e>
 8001f04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f08:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001f18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f24:	d802      	bhi.n	8001f2c <HAL_RCC_OscConfig+0x204>
 8001f26:	4b44      	ldr	r3, [pc, #272]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_OscConfig+0x230>
 8001f2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f30:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001f40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f44:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001f48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001f54:	4b38      	ldr	r3, [pc, #224]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f5c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001f60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001f64:	fa92 f2a2 	rbit	r2, r2
 8001f68:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001f6c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001f70:	fab2 f282 	clz	r2, r2
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	f042 0220 	orr.w	r2, r2, #32
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f002 021f 	and.w	r2, r2, #31
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f202 	lsl.w	r2, r1, r2
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0b0      	beq.n	8001eee <HAL_RCC_OscConfig+0x1c6>
 8001f8c:	e057      	b.n	800203e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fe5d 	bl	8000c4c <HAL_GetTick>
 8001f92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f98:	f7fe fe58 	bl	8000c4c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b64      	cmp	r3, #100	@ 0x64
 8001fa6:	d902      	bls.n	8001fae <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	f000 bec4 	b.w	8002d36 <HAL_RCC_OscConfig+0x100e>
 8001fae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fb2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001fc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fce:	d802      	bhi.n	8001fd6 <HAL_RCC_OscConfig+0x2ae>
 8001fd0:	4b19      	ldr	r3, [pc, #100]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x2da>
 8001fd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fda:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001fea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fee:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ff2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_RCC_OscConfig+0x310>)
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002006:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800200a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800200e:	fa92 f2a2 	rbit	r2, r2
 8002012:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002016:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800201a:	fab2 f282 	clz	r2, r2
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f042 0220 	orr.w	r2, r2, #32
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	f002 021f 	and.w	r2, r2, #31
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f202 	lsl.w	r2, r1, r2
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1b0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x270>
 8002036:	e002      	b.n	800203e <HAL_RCC_OscConfig+0x316>
 8002038:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002042:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 816c 	beq.w	800232c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002054:	4bcc      	ldr	r3, [pc, #816]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002060:	4bc9      	ldr	r3, [pc, #804]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b08      	cmp	r3, #8
 800206a:	d16d      	bne.n	8002148 <HAL_RCC_OscConfig+0x420>
 800206c:	4bc6      	ldr	r3, [pc, #792]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d167      	bne.n	8002148 <HAL_RCC_OscConfig+0x420>
 8002078:	2302      	movs	r3, #2
 800207a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800208a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b3f      	cmp	r3, #63	@ 0x3f
 8002096:	d802      	bhi.n	800209e <HAL_RCC_OscConfig+0x376>
 8002098:	4bbb      	ldr	r3, [pc, #748]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	e013      	b.n	80020c6 <HAL_RCC_OscConfig+0x39e>
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80020b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80020c2:	4bb1      	ldr	r3, [pc, #708]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	2202      	movs	r2, #2
 80020c8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80020cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80020d0:	fa92 f2a2 	rbit	r2, r2
 80020d4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80020d8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80020dc:	fab2 f282 	clz	r2, r2
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f042 0220 	orr.w	r2, r2, #32
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f002 021f 	and.w	r2, r2, #31
 80020ec:	2101      	movs	r1, #1
 80020ee:	fa01 f202 	lsl.w	r2, r1, r2
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCC_OscConfig+0x3e6>
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d002      	beq.n	800210e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	f000 be14 	b.w	8002d36 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b9e      	ldr	r3, [pc, #632]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	21f8      	movs	r1, #248	@ 0xf8
 8002124:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800212c:	fa91 f1a1 	rbit	r1, r1
 8002130:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002134:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002138:	fab1 f181 	clz	r1, r1
 800213c:	b2c9      	uxtb	r1, r1
 800213e:	408b      	lsls	r3, r1
 8002140:	4991      	ldr	r1, [pc, #580]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	e0f1      	b.n	800232c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8083 	beq.w	8002260 <HAL_RCC_OscConfig+0x538>
 800215a:	2301      	movs	r3, #1
 800215c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800216c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800217a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	461a      	mov	r2, r3
 8002182:	2301      	movs	r3, #1
 8002184:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe fd61 	bl	8000c4c <HAL_GetTick>
 800218a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002190:	f7fe fd5c 	bl	8000c4c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d902      	bls.n	80021a6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	f000 bdc8 	b.w	8002d36 <HAL_RCC_OscConfig+0x100e>
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80021b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80021c4:	d802      	bhi.n	80021cc <HAL_RCC_OscConfig+0x4a4>
 80021c6:	4b70      	ldr	r3, [pc, #448]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	e013      	b.n	80021f4 <HAL_RCC_OscConfig+0x4cc>
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80021de:	2302      	movs	r3, #2
 80021e0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80021e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80021f0:	4b65      	ldr	r3, [pc, #404]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	2202      	movs	r2, #2
 80021f6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80021fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80021fe:	fa92 f2a2 	rbit	r2, r2
 8002202:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002206:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0220 	orr.w	r2, r2, #32
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0b4      	beq.n	8002190 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b58      	ldr	r3, [pc, #352]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	21f8      	movs	r1, #248	@ 0xf8
 800223c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002244:	fa91 f1a1 	rbit	r1, r1
 8002248:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800224c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002250:	fab1 f181 	clz	r1, r1
 8002254:	b2c9      	uxtb	r1, r1
 8002256:	408b      	lsls	r3, r1
 8002258:	494b      	ldr	r1, [pc, #300]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
 800225e:	e065      	b.n	800232c <HAL_RCC_OscConfig+0x604>
 8002260:	2301      	movs	r3, #1
 8002262:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002272:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002280:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	461a      	mov	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fcde 	bl	8000c4c <HAL_GetTick>
 8002290:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002296:	f7fe fcd9 	bl	8000c4c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d902      	bls.n	80022ac <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	f000 bd45 	b.w	8002d36 <HAL_RCC_OscConfig+0x100e>
 80022ac:	2302      	movs	r3, #2
 80022ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80022be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80022ca:	d802      	bhi.n	80022d2 <HAL_RCC_OscConfig+0x5aa>
 80022cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	e013      	b.n	80022fa <HAL_RCC_OscConfig+0x5d2>
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80022e4:	2302      	movs	r3, #2
 80022e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80022ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80022f6:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <HAL_RCC_OscConfig+0x660>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	2202      	movs	r2, #2
 80022fc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002300:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002304:	fa92 f2a2 	rbit	r2, r2
 8002308:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800230c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 021f 	and.w	r2, r2, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1b4      	bne.n	8002296 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002330:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8115 	beq.w	800256c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002346:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d07e      	beq.n	8002450 <HAL_RCC_OscConfig+0x728>
 8002352:	2301      	movs	r3, #1
 8002354:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_RCC_OscConfig+0x664>)
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	461a      	mov	r2, r3
 8002378:	2301      	movs	r3, #1
 800237a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7fe fc66 	bl	8000c4c <HAL_GetTick>
 8002380:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002384:	e00f      	b.n	80023a6 <HAL_RCC_OscConfig+0x67e>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002390:	f7fe fc5c 	bl	8000c4c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d902      	bls.n	80023a6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	f000 bcc8 	b.w	8002d36 <HAL_RCC_OscConfig+0x100e>
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023c0:	2202      	movs	r2, #2
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023e4:	2202      	movs	r2, #2
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002400:	4bb0      	ldr	r3, [pc, #704]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002402:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800240c:	2102      	movs	r1, #2
 800240e:	6019      	str	r1, [r3, #0]
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f1a3 	rbit	r1, r3
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002426:	6019      	str	r1, [r3, #0]
  return result;
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	2101      	movs	r1, #1
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0a0      	beq.n	8002390 <HAL_RCC_OscConfig+0x668>
 800244e:	e08d      	b.n	800256c <HAL_RCC_OscConfig+0x844>
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002460:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	fa93 f2a3 	rbit	r2, r3
 800246a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002472:	601a      	str	r2, [r3, #0]
  return result;
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800247c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	4b90      	ldr	r3, [pc, #576]	@ (80026c8 <HAL_RCC_OscConfig+0x9a0>)
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	461a      	mov	r2, r3
 800248e:	2300      	movs	r3, #0
 8002490:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe fbdb 	bl	8000c4c <HAL_GetTick>
 8002496:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe fbd6 	bl	8000c4c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	f000 bc42 	b.w	8002d36 <HAL_RCC_OscConfig+0x100e>
 80024b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024ba:	2202      	movs	r2, #2
 80024bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024de:	2202      	movs	r2, #2
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fa93 f2a3 	rbit	r2, r3
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002502:	2202      	movs	r2, #2
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800251c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251e:	4b69      	ldr	r3, [pc, #420]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800252a:	2102      	movs	r1, #2
 800252c:	6019      	str	r1, [r3, #0]
 800252e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002532:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f1a3 	rbit	r1, r3
 800253c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002540:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002544:	6019      	str	r1, [r3, #0]
  return result;
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d197      	bne.n	800249c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002570:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 819e 	beq.w	80028be <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002588:	4b4e      	ldr	r3, [pc, #312]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d116      	bne.n	80025c2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4b4b      	ldr	r3, [pc, #300]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	4a4a      	ldr	r2, [pc, #296]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259e:	61d3      	str	r3, [r2, #28]
 80025a0:	4b48      	ldr	r3, [pc, #288]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80025a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ac:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80025ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b42      	ldr	r3, [pc, #264]	@ (80026cc <HAL_RCC_OscConfig+0x9a4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d11a      	bne.n	8002604 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b3f      	ldr	r3, [pc, #252]	@ (80026cc <HAL_RCC_OscConfig+0x9a4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a3e      	ldr	r2, [pc, #248]	@ (80026cc <HAL_RCC_OscConfig+0x9a4>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fb37 	bl	8000c4c <HAL_GetTick>
 80025de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e2:	e009      	b.n	80025f8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e4:	f7fe fb32 	bl	8000c4c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	@ 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e39e      	b.n	8002d36 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b34      	ldr	r3, [pc, #208]	@ (80026cc <HAL_RCC_OscConfig+0x9a4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002608:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x8fa>
 8002614:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a2a      	ldr	r2, [pc, #168]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e035      	b.n	800268e <HAL_RCC_OscConfig+0x966>
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x924>
 8002632:	4b24      	ldr	r3, [pc, #144]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a23      	ldr	r2, [pc, #140]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6213      	str	r3, [r2, #32]
 800263e:	4b21      	ldr	r3, [pc, #132]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4a20      	ldr	r2, [pc, #128]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	6213      	str	r3, [r2, #32]
 800264a:	e020      	b.n	800268e <HAL_RCC_OscConfig+0x966>
 800264c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002650:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b05      	cmp	r3, #5
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x94e>
 800265c:	4b19      	ldr	r3, [pc, #100]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4a18      	ldr	r2, [pc, #96]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	6213      	str	r3, [r2, #32]
 8002668:	4b16      	ldr	r3, [pc, #88]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4a15      	ldr	r2, [pc, #84]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6213      	str	r3, [r2, #32]
 8002674:	e00b      	b.n	800268e <HAL_RCC_OscConfig+0x966>
 8002676:	4b13      	ldr	r3, [pc, #76]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a12      	ldr	r2, [pc, #72]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a0f      	ldr	r2, [pc, #60]	@ (80026c4 <HAL_RCC_OscConfig+0x99c>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 8087 	beq.w	80027ae <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7fe fad4 	bl	8000c4c <HAL_GetTick>
 80026a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	e012      	b.n	80026d0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fe facf 	bl	8000c4c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d908      	bls.n	80026d0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e339      	b.n	8002d36 <HAL_RCC_OscConfig+0x100e>
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	10908120 	.word	0x10908120
 80026cc:	40007000 	.word	0x40007000
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026d8:	2202      	movs	r2, #2
 80026da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80026fc:	2202      	movs	r2, #2
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002704:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	fa93 f2a3 	rbit	r2, r3
 800270e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002712:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002716:	601a      	str	r2, [r3, #0]
  return result;
 8002718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002720:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0xa10>
 8002732:	4b98      	ldr	r3, [pc, #608]	@ (8002994 <HAL_RCC_OscConfig+0xc6c>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	e013      	b.n	8002760 <HAL_RCC_OscConfig+0xa38>
 8002738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002740:	2202      	movs	r2, #2
 8002742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002748:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fa93 f2a3 	rbit	r2, r3
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	4b8d      	ldr	r3, [pc, #564]	@ (8002994 <HAL_RCC_OscConfig+0xc6c>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002764:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002768:	2102      	movs	r1, #2
 800276a:	6011      	str	r1, [r2, #0]
 800276c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002770:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	fa92 f1a2 	rbit	r1, r2
 800277a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800277e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002782:	6011      	str	r1, [r2, #0]
  return result;
 8002784:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002788:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	fab2 f282 	clz	r2, r2
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	f002 021f 	and.w	r2, r2, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f202 	lsl.w	r2, r1, r2
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f43f af7f 	beq.w	80026aa <HAL_RCC_OscConfig+0x982>
 80027ac:	e07d      	b.n	80028aa <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7fe fa4d 	bl	8000c4c <HAL_GetTick>
 80027b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe fa48 	bl	8000c4c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e2b2      	b.n	8002d36 <HAL_RCC_OscConfig+0x100e>
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80027d8:	2202      	movs	r2, #2
 80027da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ee:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80027fc:	2202      	movs	r2, #2
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002804:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002816:	601a      	str	r2, [r3, #0]
  return result;
 8002818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002820:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_RCC_OscConfig+0xb10>
 8002832:	4b58      	ldr	r3, [pc, #352]	@ (8002994 <HAL_RCC_OscConfig+0xc6c>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	e013      	b.n	8002860 <HAL_RCC_OscConfig+0xb38>
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002840:	2202      	movs	r2, #2
 8002842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002848:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fa93 f2a3 	rbit	r2, r3
 8002852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002856:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	4b4d      	ldr	r3, [pc, #308]	@ (8002994 <HAL_RCC_OscConfig+0xc6c>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002864:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002868:	2102      	movs	r1, #2
 800286a:	6011      	str	r1, [r2, #0]
 800286c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002870:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	fa92 f1a2 	rbit	r1, r2
 800287a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800287e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002882:	6011      	str	r1, [r2, #0]
  return result;
 8002884:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002888:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	fab2 f282 	clz	r2, r2
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f002 021f 	and.w	r2, r2, #31
 800289e:	2101      	movs	r1, #1
 80028a0:	fa01 f202 	lsl.w	r2, r1, r2
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d186      	bne.n	80027b8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028aa:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b38      	ldr	r3, [pc, #224]	@ (8002994 <HAL_RCC_OscConfig+0xc6c>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a37      	ldr	r2, [pc, #220]	@ (8002994 <HAL_RCC_OscConfig+0xc6c>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8232 	beq.w	8002d34 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d0:	4b30      	ldr	r3, [pc, #192]	@ (8002994 <HAL_RCC_OscConfig+0xc6c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b08      	cmp	r3, #8
 80028da:	f000 8201 	beq.w	8002ce0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	f040 8157 	bne.w	8002b9e <HAL_RCC_OscConfig+0xe76>
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80028f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fa93 f2a3 	rbit	r2, r3
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002914:	601a      	str	r2, [r3, #0]
  return result;
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800291e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800292a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	461a      	mov	r2, r3
 8002932:	2300      	movs	r3, #0
 8002934:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe f989 	bl	8000c4c <HAL_GetTick>
 800293a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293e:	e009      	b.n	8002954 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe f984 	bl	8000c4c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1f0      	b.n	8002d36 <HAL_RCC_OscConfig+0x100e>
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800295c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	fa93 f2a3 	rbit	r2, r3
 8002970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002974:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002978:	601a      	str	r2, [r3, #0]
  return result;
 800297a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002982:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b3f      	cmp	r3, #63	@ 0x3f
 800298c:	d804      	bhi.n	8002998 <HAL_RCC_OscConfig+0xc70>
 800298e:	4b01      	ldr	r3, [pc, #4]	@ (8002994 <HAL_RCC_OscConfig+0xc6c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	e029      	b.n	80029e8 <HAL_RCC_OscConfig+0xcc0>
 8002994:	40021000 	.word	0x40021000
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80029a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029aa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	fa93 f2a3 	rbit	r2, r3
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80029c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	4bc3      	ldr	r3, [pc, #780]	@ (8002cf4 <HAL_RCC_OscConfig+0xfcc>)
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80029f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029f4:	6011      	str	r1, [r2, #0]
 80029f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029fa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	fa92 f1a2 	rbit	r1, r2
 8002a04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a08:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a0c:	6011      	str	r1, [r2, #0]
  return result;
 8002a0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a12:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	fab2 f282 	clz	r2, r2
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f002 021f 	and.w	r2, r2, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d185      	bne.n	8002940 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a34:	4baf      	ldr	r3, [pc, #700]	@ (8002cf4 <HAL_RCC_OscConfig+0xfcc>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	49a7      	ldr	r1, [pc, #668]	@ (8002cf4 <HAL_RCC_OscConfig+0xfcc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
 8002a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a60:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a80:	601a      	str	r2, [r3, #0]
  return result;
 8002a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a86:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a8a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a96:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7fe f8d3 	bl	8000c4c <HAL_GetTick>
 8002aa6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aaa:	e009      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aac:	f7fe f8ce 	bl	8000c4c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e13a      	b.n	8002d36 <HAL_RCC_OscConfig+0x100e>
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ac8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	fa93 f2a3 	rbit	r2, r3
 8002adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002ae4:	601a      	str	r2, [r3, #0]
  return result;
 8002ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002aee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002af8:	d802      	bhi.n	8002b00 <HAL_RCC_OscConfig+0xdd8>
 8002afa:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf4 <HAL_RCC_OscConfig+0xfcc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	e027      	b.n	8002b50 <HAL_RCC_OscConfig+0xe28>
 8002b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b04:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b12:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b20:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002b2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	fa93 f2a3 	rbit	r2, r3
 8002b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b46:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	4b69      	ldr	r3, [pc, #420]	@ (8002cf4 <HAL_RCC_OscConfig+0xfcc>)
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b54:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b58:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b5c:	6011      	str	r1, [r2, #0]
 8002b5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b62:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	fa92 f1a2 	rbit	r1, r2
 8002b6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b70:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b74:	6011      	str	r1, [r2, #0]
  return result;
 8002b76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b7a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	f042 0220 	orr.w	r2, r2, #32
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f002 021f 	and.w	r2, r2, #31
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f202 	lsl.w	r2, r1, r2
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d087      	beq.n	8002aac <HAL_RCC_OscConfig+0xd84>
 8002b9c:	e0ca      	b.n	8002d34 <HAL_RCC_OscConfig+0x100c>
 8002b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ba6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f2a3 	rbit	r2, r3
 8002bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002bc2:	601a      	str	r2, [r3, #0]
  return result;
 8002bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002bcc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bd8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	2300      	movs	r3, #0
 8002be2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe f832 	bl	8000c4c <HAL_GetTick>
 8002be8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bec:	e009      	b.n	8002c02 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe f82d 	bl	8000c4c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e099      	b.n	8002d36 <HAL_RCC_OscConfig+0x100e>
 8002c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c06:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c22:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002c26:	601a      	str	r2, [r3, #0]
  return result;
 8002c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002c30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c3a:	d802      	bhi.n	8002c42 <HAL_RCC_OscConfig+0xf1a>
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf4 <HAL_RCC_OscConfig+0xfcc>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e027      	b.n	8002c92 <HAL_RCC_OscConfig+0xf6a>
 8002c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c46:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c54:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	fa93 f2a3 	rbit	r2, r3
 8002c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c62:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCC_OscConfig+0xfcc>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c96:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c9a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c9e:	6011      	str	r1, [r2, #0]
 8002ca0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	fa92 f1a2 	rbit	r1, r2
 8002cae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cb2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002cb6:	6011      	str	r1, [r2, #0]
  return result;
 8002cb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cbc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	fab2 f282 	clz	r2, r2
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	f042 0220 	orr.w	r2, r2, #32
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	f002 021f 	and.w	r2, r2, #31
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d187      	bne.n	8002bee <HAL_RCC_OscConfig+0xec6>
 8002cde:	e029      	b.n	8002d34 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d103      	bne.n	8002cf8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e020      	b.n	8002d36 <HAL_RCC_OscConfig+0x100e>
 8002cf4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <HAL_RCC_OscConfig+0x1018>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002d04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d10b      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d18:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002d1c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000

08002d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b09e      	sub	sp, #120	@ 0x78
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e154      	b.n	8003006 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b89      	ldr	r3, [pc, #548]	@ (8002f84 <HAL_RCC_ClockConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d910      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b86      	ldr	r3, [pc, #536]	@ (8002f84 <HAL_RCC_ClockConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 0207 	bic.w	r2, r3, #7
 8002d72:	4984      	ldr	r1, [pc, #528]	@ (8002f84 <HAL_RCC_ClockConfig+0x240>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b82      	ldr	r3, [pc, #520]	@ (8002f84 <HAL_RCC_ClockConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e13c      	b.n	8003006 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d98:	4b7b      	ldr	r3, [pc, #492]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4978      	ldr	r1, [pc, #480]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80cd 	beq.w	8002f52 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d137      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xec>
 8002dc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002dce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dd8:	d802      	bhi.n	8002de0 <HAL_RCC_ClockConfig+0x9c>
 8002dda:	4b6b      	ldr	r3, [pc, #428]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	e00f      	b.n	8002e00 <HAL_RCC_ClockConfig+0xbc>
 8002de0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002de4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002df2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002df4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dfc:	4b62      	ldr	r3, [pc, #392]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e08:	fa92 f2a2 	rbit	r2, r2
 8002e0c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002e0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e10:	fab2 f282 	clz	r2, r2
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f042 0220 	orr.w	r2, r2, #32
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f002 021f 	and.w	r2, r2, #31
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d171      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0ea      	b.n	8003006 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d137      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x164>
 8002e38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e3c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e50:	d802      	bhi.n	8002e58 <HAL_RCC_ClockConfig+0x114>
 8002e52:	4b4d      	ldr	r3, [pc, #308]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	e00f      	b.n	8002e78 <HAL_RCC_ClockConfig+0x134>
 8002e58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e74:	4b44      	ldr	r3, [pc, #272]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e7c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e80:	fa92 f2a2 	rbit	r2, r2
 8002e84:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e88:	fab2 f282 	clz	r2, r2
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	f042 0220 	orr.w	r2, r2, #32
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f002 021f 	and.w	r2, r2, #31
 8002e98:	2101      	movs	r1, #1
 8002e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d135      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0ae      	b.n	8003006 <HAL_RCC_ClockConfig+0x2c2>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ebe:	d802      	bhi.n	8002ec6 <HAL_RCC_ClockConfig+0x182>
 8002ec0:	4b31      	ldr	r3, [pc, #196]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	e00d      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x19e>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	4b2a      	ldr	r3, [pc, #168]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	61ba      	str	r2, [r7, #24]
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	fa92 f2a2 	rbit	r2, r2
 8002eec:	617a      	str	r2, [r7, #20]
  return result;
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	fab2 f282 	clz	r2, r2
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	f042 0220 	orr.w	r2, r2, #32
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	f002 021f 	and.w	r2, r2, #31
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f202 	lsl.w	r2, r1, r2
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e07a      	b.n	8003006 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f10:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 0203 	bic.w	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	491a      	ldr	r1, [pc, #104]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f22:	f7fd fe93 	bl	8000c4c <HAL_GetTick>
 8002f26:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2a:	f7fd fe8f 	bl	8000c4c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e062      	b.n	8003006 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 020c 	and.w	r2, r3, #12
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d1eb      	bne.n	8002f2a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f52:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <HAL_RCC_ClockConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d215      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f60:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <HAL_RCC_ClockConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f023 0207 	bic.w	r2, r3, #7
 8002f68:	4906      	ldr	r1, [pc, #24]	@ (8002f84 <HAL_RCC_ClockConfig+0x240>)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <HAL_RCC_ClockConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d006      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e041      	b.n	8003006 <HAL_RCC_ClockConfig+0x2c2>
 8002f82:	bf00      	nop
 8002f84:	40022000 	.word	0x40022000
 8002f88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f98:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <HAL_RCC_ClockConfig+0x2cc>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	491a      	ldr	r1, [pc, #104]	@ (8003010 <HAL_RCC_ClockConfig+0x2cc>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fb6:	4b16      	ldr	r3, [pc, #88]	@ (8003010 <HAL_RCC_ClockConfig+0x2cc>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4912      	ldr	r1, [pc, #72]	@ (8003010 <HAL_RCC_ClockConfig+0x2cc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fca:	f000 f829 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8002fce:	4601      	mov	r1, r0
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003010 <HAL_RCC_ClockConfig+0x2cc>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fd8:	22f0      	movs	r2, #240	@ 0xf0
 8002fda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	fa92 f2a2 	rbit	r2, r2
 8002fe2:	60fa      	str	r2, [r7, #12]
  return result;
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	fab2 f282 	clz	r2, r2
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	40d3      	lsrs	r3, r2
 8002fee:	4a09      	ldr	r2, [pc, #36]	@ (8003014 <HAL_RCC_ClockConfig+0x2d0>)
 8002ff0:	5cd3      	ldrb	r3, [r2, r3]
 8002ff2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ff6:	4a08      	ldr	r2, [pc, #32]	@ (8003018 <HAL_RCC_ClockConfig+0x2d4>)
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ffa:	4b08      	ldr	r3, [pc, #32]	@ (800301c <HAL_RCC_ClockConfig+0x2d8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fde0 	bl	8000bc4 <HAL_InitTick>
  
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3778      	adds	r7, #120	@ 0x78
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	08005988 	.word	0x08005988
 8003018:	20000000 	.word	0x20000000
 800301c:	20000004 	.word	0x20000004

08003020 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800303a:	4b1e      	ldr	r3, [pc, #120]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d002      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x30>
 800304a:	2b08      	cmp	r3, #8
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x36>
 800304e:	e026      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003050:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003052:	613b      	str	r3, [r7, #16]
      break;
 8003054:	e026      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	0c9b      	lsrs	r3, r3, #18
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003064:	4b13      	ldr	r3, [pc, #76]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	4a14      	ldr	r2, [pc, #80]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800306e:	5cd3      	ldrb	r3, [r2, r3]
 8003070:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800307c:	4a0e      	ldr	r2, [pc, #56]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	fbb2 f2f3 	udiv	r2, r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	e004      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a0c      	ldr	r2, [pc, #48]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	613b      	str	r3, [r7, #16]
      break;
 800309c:	e002      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030a0:	613b      	str	r3, [r7, #16]
      break;
 80030a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a4:	693b      	ldr	r3, [r7, #16]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	007a1200 	.word	0x007a1200
 80030bc:	080059a0 	.word	0x080059a0
 80030c0:	080059b0 	.word	0x080059b0
 80030c4:	003d0900 	.word	0x003d0900

080030c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030e6:	f7ff ffef 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030ea:	4601      	mov	r1, r0
 80030ec:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030f4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	fa92 f2a2 	rbit	r2, r2
 8003100:	603a      	str	r2, [r7, #0]
  return result;
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	fab2 f282 	clz	r2, r2
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	40d3      	lsrs	r3, r2
 800310c:	4a04      	ldr	r2, [pc, #16]	@ (8003120 <HAL_RCC_GetPCLK1Freq+0x40>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	08005998 	.word	0x08005998

08003124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800312a:	f7ff ffcd 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 800312e:	4601      	mov	r1, r0
 8003130:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003138:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800313c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	fa92 f2a2 	rbit	r2, r2
 8003144:	603a      	str	r2, [r7, #0]
  return result;
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	fab2 f282 	clz	r2, r2
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	40d3      	lsrs	r3, r2
 8003150:	4a04      	ldr	r2, [pc, #16]	@ (8003164 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003152:	5cd3      	ldrb	r3, [r2, r3]
 8003154:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000
 8003164:	08005998 	.word	0x08005998

08003168 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b092      	sub	sp, #72	@ 0x48
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80d2 	beq.w	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318c:	4b4d      	ldr	r3, [pc, #308]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10e      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003198:	4b4a      	ldr	r3, [pc, #296]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	4a49      	ldr	r2, [pc, #292]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800319e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	61d3      	str	r3, [r2, #28]
 80031a4:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b6:	4b44      	ldr	r3, [pc, #272]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d118      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a40      	ldr	r2, [pc, #256]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ce:	f7fd fd3d 	bl	8000c4c <HAL_GetTick>
 80031d2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d4:	e008      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d6:	f7fd fd39 	bl	8000c4c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b64      	cmp	r3, #100	@ 0x64
 80031e2:	d901      	bls.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e12b      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e8:	4b37      	ldr	r3, [pc, #220]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031f4:	4b33      	ldr	r3, [pc, #204]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8082 	beq.w	800330a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800320e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003210:	429a      	cmp	r2, r3
 8003212:	d07a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003214:	4b2b      	ldr	r3, [pc, #172]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800321c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800321e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003222:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800322c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	4b25      	ldr	r3, [pc, #148]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	461a      	mov	r2, r3
 800323e:	2301      	movs	r3, #1
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003246:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	4b1c      	ldr	r3, [pc, #112]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	461a      	mov	r2, r3
 8003262:	2300      	movs	r3, #0
 8003264:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003266:	4a17      	ldr	r2, [pc, #92]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800326c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d049      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fd fce9 	bl	8000c4c <HAL_GetTick>
 800327a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fd fce5 	bl	8000c4c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0d5      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003294:	2302      	movs	r3, #2
 8003296:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a0:	2302      	movs	r3, #2
 80032a2:	623b      	str	r3, [r7, #32]
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	61fb      	str	r3, [r7, #28]
  return result;
 80032ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d108      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80032be:	4b01      	ldr	r3, [pc, #4]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	e00d      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
 80032cc:	10908100 	.word	0x10908100
 80032d0:	2302      	movs	r3, #2
 80032d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	2202      	movs	r2, #2
 80032e2:	613a      	str	r2, [r7, #16]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	fa92 f2a2 	rbit	r2, r2
 80032ea:	60fa      	str	r2, [r7, #12]
  return result;
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	fab2 f282 	clz	r2, r2
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f002 021f 	and.w	r2, r2, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0b9      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800330a:	4b4f      	ldr	r3, [pc, #316]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	494c      	ldr	r1, [pc, #304]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003318:	4313      	orrs	r3, r2
 800331a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800331c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003324:	4b48      	ldr	r3, [pc, #288]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	4a47      	ldr	r2, [pc, #284]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800332a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800332e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800333c:	4b42      	ldr	r3, [pc, #264]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	f023 0203 	bic.w	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	493f      	ldr	r1, [pc, #252]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800334a:	4313      	orrs	r3, r2
 800334c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800335a:	4b3b      	ldr	r3, [pc, #236]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	4938      	ldr	r1, [pc, #224]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003368:	4313      	orrs	r3, r2
 800336a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003378:	4b33      	ldr	r3, [pc, #204]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	4930      	ldr	r1, [pc, #192]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003386:	4313      	orrs	r3, r2
 8003388:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003396:	4b2c      	ldr	r3, [pc, #176]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f023 0210 	bic.w	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4929      	ldr	r1, [pc, #164]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033b4:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	4921      	ldr	r1, [pc, #132]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f023 0220 	bic.w	r2, r3, #32
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	491a      	ldr	r1, [pc, #104]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80033f0:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	4912      	ldr	r1, [pc, #72]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800340e:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	490b      	ldr	r1, [pc, #44]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	4903      	ldr	r1, [pc, #12]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800343a:	4313      	orrs	r3, r2
 800343c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3748      	adds	r7, #72	@ 0x48
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000

0800344c <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check SDADC handle */
  if(hsdadc == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e07f      	b.n	800355e <HAL_SDADC_Init+0x112>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));

  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	639a      	str	r2, [r3, #56]	@ 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fd fa4b 	bl	8000938 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80034b0:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80034d8:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 80034ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <HAL_SDADC_Init+0x11c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d00f      	beq.n	800351c <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 80034fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003568 <HAL_SDADC_Init+0x11c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a19      	ldr	r2, [pc, #100]	@ (8003568 <HAL_SDADC_Init+0x11c>)
 8003502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003506:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8003508:	4b17      	ldr	r3, [pc, #92]	@ (8003568 <HAL_SDADC_Init+0x11c>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	4915      	ldr	r1, [pc, #84]	@ (8003568 <HAL_SDADC_Init+0x11c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8003516:	2002      	movs	r0, #2
 8003518:	f7fd fba4 	bl	8000c64 <HAL_Delay>
  }

  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  tickstart = HAL_GetTick();
 800352c:	f7fd fb8e 	bl	8000c4c <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8003532:	e008      	b.n	8003546 <HAL_SDADC_Init+0xfa>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8003534:	f7fd fb8a 	bl	8000c4c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003540:	d901      	bls.n	8003546 <HAL_SDADC_Init+0xfa>
    {
      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e00b      	b.n	800355e <HAL_SDADC_Init+0x112>
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ef      	bne.n	8003534 <HAL_SDADC_Init+0xe8>
    }
  }

  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return HAL status */
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40016000 	.word	0x40016000

0800356c <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d002      	beq.n	800358c <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
 800358a:	e025      	b.n	80035d8 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f9df 	bl	8003950 <SDADC_EnterInitMode>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d006      	beq.n	80035a6 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	22ff      	movs	r2, #255	@ 0xff
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	75fb      	strb	r3, [r7, #23]
 80035a4:	e018      	b.n	80035d8 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80035b0:	4413      	add	r3, r2
 80035b2:	3320      	adds	r3, #32
 80035b4:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80035be:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 80035c4:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80035cc:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 80035ce:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80035d0:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f9df 	bl	8003996 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d002      	beq.n	8003604 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	75fb      	strb	r3, [r7, #23]
 8003602:	e037      	b.n	8003674 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f9a3 	bl	8003950 <SDADC_EnterInitMode>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	22ff      	movs	r2, #255	@ 0xff
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	75fb      	strb	r3, [r7, #23]
 800361c:	e02a      	b.n	8003674 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01f      	beq.n	8003666 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43da      	mvns	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	400a      	ands	r2, r1
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	641a      	str	r2, [r3, #64]	@ 0x40
 8003664:	e003      	b.n	800366e <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f991 	bl	8003996 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8003674:	7dfb      	ldrb	r3, [r7, #23]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	00080100 	.word	0x00080100

08003684 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d027      	beq.n	80036ee <HAL_SDADC_InjectedConfigChannel+0x6a>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036a4:	2bff      	cmp	r3, #255	@ 0xff
 80036a6:	d022      	beq.n	80036ee <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	b292      	uxth	r2, r2
 80036b0:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d108      	bne.n	80036ca <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0220 	orr.w	r2, r2, #32
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	e007      	b.n	80036da <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0220 	bic.w	r2, r2, #32
 80036d8:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 80036e0:	68b8      	ldr	r0, [r7, #8]
 80036e2:	f000 f96a 	bl	80039ba <SDADC_GetInjChannelsNbr>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	621a      	str	r2, [r3, #32]
 80036ec:	e001      	b.n	80036f2 <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a12      	ldr	r2, [pc, #72]	@ (8003758 <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d105      	bne.n	8003720 <HAL_SDADC_SelectInjectedTrigger+0x24>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d102      	bne.n	8003720 <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e014      	b.n	800374a <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d009      	beq.n	800373e <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8003730:	2b02      	cmp	r3, #2
 8003732:	d004      	beq.n	800373e <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 800373a:	2b03      	cmp	r3, #3
 800373c:	d103      	bne.n	8003746 <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003744:	e001      	b.n	800374a <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	40016000 	.word	0x40016000

0800375c <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003770:	2b01      	cmp	r3, #1
 8003772:	d120      	bne.n	80037b6 <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f8eb 	bl	8003950 <SDADC_EnterInitMode>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d006      	beq.n	800378e <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	22ff      	movs	r2, #255	@ 0xff
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	e015      	b.n	80037ba <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800379c:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8f1 	bl	8003996 <SDADC_ExitInitMode>
 80037b4:	e001      	b.n	80037ba <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_SDADC_InjectedStart>:
  *         or if regular conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedStart(SDADC_HandleTypeDef *hsdadc)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d004      	beq.n	80037e0 <HAL_SDADC_InjectedStart+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_REG))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d105      	bne.n	80037ec <HAL_SDADC_InjectedStart+0x28>
  {
    /* Start injected conversion */
    status = SDADC_InjConvStart(hsdadc);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f90e 	bl	8003a02 <SDADC_InjConvStart>
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	e001      	b.n	80037f0 <HAL_SDADC_InjectedStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_SDADC_PollForInjectedConversion>:
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForInjectedConversion(SDADC_HandleTypeDef* hsdadc,
                                                      uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800380a:	2b04      	cmp	r3, #4
 800380c:	d006      	beq.n	800381c <HAL_SDADC_PollForInjectedConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8003814:	2b05      	cmp	r3, #5
 8003816:	d001      	beq.n	800381c <HAL_SDADC_PollForInjectedConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e057      	b.n	80038cc <HAL_SDADC_PollForInjectedConversion+0xd2>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800381c:	f7fd fa16 	bl	8000c4c <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

    /* Wait JEOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_JEOCF) != SDADC_ISR_JEOCF)
 8003822:	e010      	b.n	8003846 <HAL_SDADC_PollForInjectedConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d00c      	beq.n	8003846 <HAL_SDADC_PollForInjectedConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 800382c:	f7fd fa0e 	bl	8000c4c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d302      	bcc.n	8003842 <HAL_SDADC_PollForInjectedConversion+0x48>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_SDADC_PollForInjectedConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e042      	b.n	80038cc <HAL_SDADC_PollForInjectedConversion+0xd2>
    while((hsdadc->Instance->ISR & SDADC_ISR_JEOCF) != SDADC_ISR_JEOCF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d1e7      	bne.n	8003824 <HAL_SDADC_PollForInjectedConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b04      	cmp	r3, #4
 8003860:	d10d      	bne.n	800387e <HAL_SDADC_PollForInjectedConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f867 	bl	800393c <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRJOVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0204 	orr.w	r2, r2, #4
 800387c:	60da      	str	r2, [r3, #12]
    }
    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	1e5a      	subs	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	625a      	str	r2, [r3, #36]	@ 0x24
    if(hsdadc->InjConvRemaining == 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <HAL_SDADC_PollForInjectedConversion+0x9e>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1a      	ldr	r2, [r3, #32]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Update SDADC state only if not continuous conversion, SW trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d114      	bne.n	80038ca <HAL_SDADC_PollForInjectedConversion+0xd0>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d110      	bne.n	80038ca <HAL_SDADC_PollForInjectedConversion+0xd0>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d10a      	bne.n	80038ca <HAL_SDADC_PollForInjectedConversion+0xd0>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d101      	bne.n	80038c2 <HAL_SDADC_PollForInjectedConversion+0xc8>
 80038be:	2201      	movs	r2, #1
 80038c0:	e000      	b.n	80038c4 <HAL_SDADC_PollForInjectedConversion+0xca>
 80038c2:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Return function status */
    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_SDADC_InjectedStop>:
  * @note   This function should be called only if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedStop(SDADC_HandleTypeDef *hsdadc)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d007      	beq.n	80038f6 <HAL_SDADC_InjectedStop+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d002      	beq.n	80038f6 <HAL_SDADC_InjectedStop+0x22>
  {
    /* Return error status */
    status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	e004      	b.n	8003900 <HAL_SDADC_InjectedStop+0x2c>
  }
  else
  {
    /* Stop injected conversion */
    status = SDADC_InjConvStop(hsdadc);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f8d3 	bl	8003aa2 <SDADC_InjConvStop>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_SDADC_InjectedGetValue>:
  * @param  hsdadc SDADC handle.
  * @param  Channel Corresponding channel of injected conversion.
  * @retval Injected conversion value
  */
uint32_t HAL_SDADC_InjectedGetValue(SDADC_HandleTypeDef *hsdadc, uint32_t* Channel)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(Channel != ((void*) 0));

  /* Read SDADC_JDATAR register and extract channel and conversion value */
  value = hsdadc->Instance->JDATAR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	60fb      	str	r3, [r7, #12]
  *Channel = ((value & SDADC_JDATAR_JDATACH) >> SDADC_JDATAR_CH_OFFSET);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	0e1b      	lsrs	r3, r3, #24
 8003920:	f003 020f 	and.w	r2, r3, #15
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	601a      	str	r2, [r3, #0]
  value &= SDADC_JDATAR_JDATA;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	b29b      	uxth	r3, r3
 800392c:	60fb      	str	r3, [r7, #12]

  /* Return injected conversion value */
  return value;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003966:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8003968:	f7fd f970 	bl	8000c4c <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 800396e:	e008      	b.n	8003982 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8003970:	f7fd f96c 	bl	8000c4c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2bc8      	cmp	r3, #200	@ 0xc8
 800397c:	d901      	bls.n	8003982 <SDADC_EnterInitMode+0x32>
    {
      return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e005      	b.n	800398e <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	daf1      	bge.n	8003970 <SDADC_EnterInitMode+0x20>
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80039ac:	601a      	str	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b087      	sub	sp, #28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	e00d      	b.n	80039ee <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3301      	adds	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d9ee      	bls.n	80039d2 <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 80039f4:	697b      	ldr	r3, [r7, #20]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <SDADC_InjConvStart>:
  * @brief  This function allows to really start injected conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_InjConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]

  /* Initialize number of injected conversions remaining */
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1a      	ldr	r2, [r3, #32]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check injected trigger */
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <SDADC_InjConvStart+0x2e>
  {
    /* Set JSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JSWSTART;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	e025      	b.n	8003a7c <SDADC_InjConvStart+0x7a>
  }
  else /* external or synchronous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff8d 	bl	8003950 <SDADC_EnterInitMode>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <SDADC_InjConvStart+0x48>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	22ff      	movs	r2, #255	@ 0xff
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	73fb      	strb	r3, [r7, #15]
 8003a48:	e018      	b.n	8003a7c <SDADC_InjConvStart+0x7a>
    }
    else
    {
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d108      	bne.n	8003a64 <SDADC_InjConvStart+0x62>
      {
        /* Set JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e008      	b.n	8003a76 <SDADC_InjConvStart+0x74>
      }
      else /* external trigger */
      {
        /* Set JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ff8d 	bl	8003996 <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <SDADC_InjConvStart+0x96>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                    HAL_SDADC_STATE_INJ : HAL_SDADC_STATE_REG_INJ;
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <SDADC_InjConvStart+0x8e>
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	e000      	b.n	8003a92 <SDADC_InjConvStart+0x90>
 8003a90:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  /* Return function status */
  return status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <SDADC_InjConvStop>:
  * @brief  This function allows to really stop injected conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_InjConvStop(SDADC_HandleTypeDef* hsdadc)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;

  /* Check continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d10c      	bne.n	8003acc <SDADC_InjConvStop+0x2a>
  {
    /* Clear JEOCF by reading SDADC_JDATAR register */
    dummy_read_for_register_reset =  hsdadc->Instance->JDATAR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab8:	60bb      	str	r3, [r7, #8]
    UNUSED(dummy_read_for_register_reset);
 8003aba:	68bb      	ldr	r3, [r7, #8]

    /* Clear JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0220 	bic.w	r2, r2, #32
 8003aca:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of injected conversion */
  tickstart = HAL_GetTick();
 8003acc:	f7fd f8be 	bl	8000c4c <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_JCIP) != 0UL)
 8003ad2:	e00c      	b.n	8003aee <SDADC_InjConvStop+0x4c>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8003ad4:	f7fd f8ba 	bl	8000c4c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2bc8      	cmp	r3, #200	@ 0xc8
 8003ae0:	d905      	bls.n	8003aee <SDADC_InjConvStop+0x4c>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	22ff      	movs	r2, #255	@ 0xff
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e053      	b.n	8003b96 <SDADC_InjConvStop+0xf4>
  while((hsdadc->Instance->ISR & SDADC_ISR_JCIP) != 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1eb      	bne.n	8003ad4 <SDADC_InjConvStop+0x32>
    }
  }
  /* Check if trigger is not software */
  if(hsdadc->InjectedTrigger != SDADC_SOFTWARE_TRIGGER)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d023      	beq.n	8003b4c <SDADC_InjConvStop+0xaa>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff23 	bl	8003950 <SDADC_EnterInitMode>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <SDADC_InjConvStop+0x7a>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	22ff      	movs	r2, #255	@ 0xff
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e03c      	b.n	8003b96 <SDADC_InjConvStop+0xf4>
    }
    else
    {
      /* Check if trigger is synchronous */
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d108      	bne.n	8003b36 <SDADC_InjConvStop+0x94>
      {
        /* Clear JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e007      	b.n	8003b46 <SDADC_InjConvStop+0xa4>
      }
      else /* external trigger */
      {
        /* Clear JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTEN);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8003b44:	605a      	str	r2, [r3, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ff25 	bl	8003996 <SDADC_ExitInitMode>
    }
  }
  /* Check if continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <SDADC_InjConvStop+0xc2>
  {
    /* Restore JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0220 	orr.w	r2, r2, #32
 8003b62:	605a      	str	r2, [r3, #4]
  }
  /* Clear JEOCF by reading SDADC_JDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->JDATAR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6a:	60bb      	str	r3, [r7, #8]
  UNUSED(dummy_read_for_register_reset);
 8003b6c:	68bb      	ldr	r3, [r7, #8]

  /* Set CLRJOVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0204 	orr.w	r2, r2, #4
 8003b7c:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d101      	bne.n	8003b8c <SDADC_InjConvStop+0xea>
 8003b88:	2201      	movs	r2, #1
 8003b8a:	e000      	b.n	8003b8e <SDADC_InjConvStop+0xec>
 8003b8c:	2203      	movs	r2, #3
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e041      	b.n	8003c34 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fc fef7 	bl	80009b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f000 fa75 	bl	80040cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d001      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e049      	b.n	8003ce8 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c74:	d01d      	beq.n	8003cb2 <HAL_TIM_Base_Start_IT+0x76>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_TIM_Base_Start_IT+0x76>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_TIM_Base_Start_IT+0x76>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cfc <HAL_TIM_Base_Start_IT+0xc0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_TIM_Base_Start_IT+0x76>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a19      	ldr	r2, [pc, #100]	@ (8003d00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIM_Base_Start_IT+0x76>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a18      	ldr	r2, [pc, #96]	@ (8003d04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIM_Base_Start_IT+0x76>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a16      	ldr	r2, [pc, #88]	@ (8003d08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d111      	bne.n	8003cd6 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b06      	cmp	r3, #6
 8003cc2:	d010      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd4:	e007      	b.n	8003ce6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40001800 	.word	0x40001800
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40015c00 	.word	0x40015c00

08003d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d020      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01b      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0202 	mvn.w	r2, #2
 8003d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f999 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003d5c:	e005      	b.n	8003d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f98b 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f99c 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d020      	beq.n	8003dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01b      	beq.n	8003dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0204 	mvn.w	r2, #4
 8003d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f973 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f965 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f976 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d020      	beq.n	8003e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01b      	beq.n	8003e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0208 	mvn.w	r2, #8
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f94d 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f93f 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f950 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d020      	beq.n	8003e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01b      	beq.n	8003e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0210 	mvn.w	r2, #16
 8003e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f927 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003e40:	e005      	b.n	8003e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f919 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f92a 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00c      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0201 	mvn.w	r2, #1
 8003e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fc fc48 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00c      	beq.n	8003e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fad6 	bl	8004448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00c      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f8fb 	bl	80040b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0220 	mvn.w	r2, #32
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 faa8 	bl	8004434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_TIM_ConfigClockSource+0x1c>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e0b4      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x186>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f40:	d03e      	beq.n	8003fc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f46:	f200 8087 	bhi.w	8004058 <HAL_TIM_ConfigClockSource+0x16c>
 8003f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4e:	f000 8086 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x172>
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f56:	d87f      	bhi.n	8004058 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b70      	cmp	r3, #112	@ 0x70
 8003f5a:	d01a      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0xa6>
 8003f5c:	2b70      	cmp	r3, #112	@ 0x70
 8003f5e:	d87b      	bhi.n	8004058 <HAL_TIM_ConfigClockSource+0x16c>
 8003f60:	2b60      	cmp	r3, #96	@ 0x60
 8003f62:	d050      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x11a>
 8003f64:	2b60      	cmp	r3, #96	@ 0x60
 8003f66:	d877      	bhi.n	8004058 <HAL_TIM_ConfigClockSource+0x16c>
 8003f68:	2b50      	cmp	r3, #80	@ 0x50
 8003f6a:	d03c      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0xfa>
 8003f6c:	2b50      	cmp	r3, #80	@ 0x50
 8003f6e:	d873      	bhi.n	8004058 <HAL_TIM_ConfigClockSource+0x16c>
 8003f70:	2b40      	cmp	r3, #64	@ 0x40
 8003f72:	d058      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x13a>
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	d86f      	bhi.n	8004058 <HAL_TIM_ConfigClockSource+0x16c>
 8003f78:	2b30      	cmp	r3, #48	@ 0x30
 8003f7a:	d064      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0x15a>
 8003f7c:	2b30      	cmp	r3, #48	@ 0x30
 8003f7e:	d86b      	bhi.n	8004058 <HAL_TIM_ConfigClockSource+0x16c>
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d060      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0x15a>
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d867      	bhi.n	8004058 <HAL_TIM_ConfigClockSource+0x16c>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d05c      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0x15a>
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d05a      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0x15a>
 8003f90:	e062      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fa2:	f000 f9b3 	bl	800430c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	609a      	str	r2, [r3, #8]
      break;
 8003fbe:	e04f      	b.n	8004060 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fd0:	f000 f99c 	bl	800430c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fe2:	609a      	str	r2, [r3, #8]
      break;
 8003fe4:	e03c      	b.n	8004060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f000 f910 	bl	8004218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2150      	movs	r1, #80	@ 0x50
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f969 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8004004:	e02c      	b.n	8004060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004012:	461a      	mov	r2, r3
 8004014:	f000 f92f 	bl	8004276 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2160      	movs	r1, #96	@ 0x60
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f959 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8004024:	e01c      	b.n	8004060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004032:	461a      	mov	r2, r3
 8004034:	f000 f8f0 	bl	8004218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2140      	movs	r1, #64	@ 0x40
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f949 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8004044:	e00c      	b.n	8004060 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f000 f940 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8004056:	e003      	b.n	8004060 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
      break;
 800405c:	e000      	b.n	8004060 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800405e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e2:	d00f      	beq.n	8004104 <TIM_Base_SetConfig+0x38>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a42      	ldr	r2, [pc, #264]	@ (80041f0 <TIM_Base_SetConfig+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_Base_SetConfig+0x38>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a41      	ldr	r2, [pc, #260]	@ (80041f4 <TIM_Base_SetConfig+0x128>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_Base_SetConfig+0x38>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a40      	ldr	r2, [pc, #256]	@ (80041f8 <TIM_Base_SetConfig+0x12c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_Base_SetConfig+0x38>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3f      	ldr	r2, [pc, #252]	@ (80041fc <TIM_Base_SetConfig+0x130>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411c:	d027      	beq.n	800416e <TIM_Base_SetConfig+0xa2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a33      	ldr	r2, [pc, #204]	@ (80041f0 <TIM_Base_SetConfig+0x124>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d023      	beq.n	800416e <TIM_Base_SetConfig+0xa2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a32      	ldr	r2, [pc, #200]	@ (80041f4 <TIM_Base_SetConfig+0x128>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01f      	beq.n	800416e <TIM_Base_SetConfig+0xa2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a31      	ldr	r2, [pc, #196]	@ (80041f8 <TIM_Base_SetConfig+0x12c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01b      	beq.n	800416e <TIM_Base_SetConfig+0xa2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a31      	ldr	r2, [pc, #196]	@ (8004200 <TIM_Base_SetConfig+0x134>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d017      	beq.n	800416e <TIM_Base_SetConfig+0xa2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a30      	ldr	r2, [pc, #192]	@ (8004204 <TIM_Base_SetConfig+0x138>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <TIM_Base_SetConfig+0xa2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2f      	ldr	r2, [pc, #188]	@ (8004208 <TIM_Base_SetConfig+0x13c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00f      	beq.n	800416e <TIM_Base_SetConfig+0xa2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2e      	ldr	r2, [pc, #184]	@ (800420c <TIM_Base_SetConfig+0x140>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_Base_SetConfig+0xa2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2d      	ldr	r2, [pc, #180]	@ (8004210 <TIM_Base_SetConfig+0x144>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <TIM_Base_SetConfig+0xa2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2c      	ldr	r2, [pc, #176]	@ (8004214 <TIM_Base_SetConfig+0x148>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0xa2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a24      	ldr	r2, [pc, #144]	@ (80041fc <TIM_Base_SetConfig+0x130>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a19      	ldr	r2, [pc, #100]	@ (800420c <TIM_Base_SetConfig+0x140>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_Base_SetConfig+0xf0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a18      	ldr	r2, [pc, #96]	@ (8004210 <TIM_Base_SetConfig+0x144>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0xf0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a17      	ldr	r2, [pc, #92]	@ (8004214 <TIM_Base_SetConfig+0x148>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d103      	bne.n	80041c4 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d105      	bne.n	80041e2 <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]
  }
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40015c00 	.word	0x40015c00
 8004200:	40001800 	.word	0x40001800
 8004204:	40001c00 	.word	0x40001c00
 8004208:	40002000 	.word	0x40002000
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800

08004218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 030a 	bic.w	r3, r3, #10
 8004254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f023 0210 	bic.w	r2, r3, #16
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	621a      	str	r2, [r3, #32]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f043 0307 	orr.w	r3, r3, #7
 80042f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	609a      	str	r2, [r3, #8]
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	021a      	lsls	r2, r3, #8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	431a      	orrs	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4313      	orrs	r3, r2
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	609a      	str	r2, [r3, #8]
}
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004360:	2302      	movs	r3, #2
 8004362:	e055      	b.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a6:	d01d      	beq.n	80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1b      	ldr	r2, [pc, #108]	@ (800441c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a18      	ldr	r2, [pc, #96]	@ (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a17      	ldr	r2, [pc, #92]	@ (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a15      	ldr	r2, [pc, #84]	@ (800442c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a14      	ldr	r2, [pc, #80]	@ (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d10c      	bne.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40001800 	.word	0x40001800
 800442c:	40014000 	.word	0x40014000
 8004430:	40015c00 	.word	0x40015c00

08004434 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e040      	b.n	80044f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc fabe 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	@ 0x24
 8004488:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0201 	bic.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fd76 	bl	8004f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fbf9 	bl	8004ca0 <UART_SetConfig>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e01b      	b.n	80044f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fdf5 	bl	80050d8 <UART_CheckIdleState>
 80044ee:	4603      	mov	r3, r0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	@ 0x28
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800450c:	2b20      	cmp	r3, #32
 800450e:	d177      	bne.n	8004600 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_UART_Transmit+0x24>
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e070      	b.n	8004602 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2221      	movs	r2, #33	@ 0x21
 800452c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452e:	f7fc fb8d 	bl	8000c4c <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800454c:	d108      	bne.n	8004560 <HAL_UART_Transmit+0x68>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e003      	b.n	8004568 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004568:	e02f      	b.n	80045ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	2180      	movs	r1, #128	@ 0x80
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fe57 	bl	8005228 <UART_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e03b      	b.n	8004602 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459c:	b292      	uxth	r2, r2
 800459e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	3302      	adds	r3, #2
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e007      	b.n	80045b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3301      	adds	r3, #1
 80045b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1c9      	bne.n	800456a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	2140      	movs	r1, #64	@ 0x40
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fe21 	bl	8005228 <UART_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e005      	b.n	8004602 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
  }
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b08a      	sub	sp, #40	@ 0x28
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	4613      	mov	r3, r2
 8004616:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461e:	2b20      	cmp	r3, #32
 8004620:	d132      	bne.n	8004688 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_UART_Receive_IT+0x24>
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e02b      	b.n	800468a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d018      	beq.n	8004678 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	613b      	str	r3, [r7, #16]
   return(result);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800465a:	627b      	str	r3, [r7, #36]	@ 0x24
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	623b      	str	r3, [r7, #32]
 8004666:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	69f9      	ldr	r1, [r7, #28]
 800466a:	6a3a      	ldr	r2, [r7, #32]
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	61bb      	str	r3, [r7, #24]
   return(result);
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e6      	bne.n	8004646 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	461a      	mov	r2, r3
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fe40 	bl	8005304 <UART_Start_Receive_IT>
 8004684:	4603      	mov	r3, r0
 8004686:	e000      	b.n	800468a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004688:	2302      	movs	r3, #2
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	3728      	adds	r7, #40	@ 0x28
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b0ba      	sub	sp, #232	@ 0xe8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80046be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80046c2:	4013      	ands	r3, r2
 80046c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80046c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d115      	bne.n	80046fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00f      	beq.n	80046fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 82ab 	beq.w	8004c48 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	4798      	blx	r3
      }
      return;
 80046fa:	e2a5      	b.n	8004c48 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8117 	beq.w	8004934 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004712:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004716:	4b85      	ldr	r3, [pc, #532]	@ (800492c <HAL_UART_IRQHandler+0x298>)
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 810a 	beq.w	8004934 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d011      	beq.n	8004750 <HAL_UART_IRQHandler+0xbc>
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004746:	f043 0201 	orr.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d011      	beq.n	8004780 <HAL_UART_IRQHandler+0xec>
 800475c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2202      	movs	r2, #2
 800476e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004776:	f043 0204 	orr.w	r2, r3, #4
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d011      	beq.n	80047b0 <HAL_UART_IRQHandler+0x11c>
 800478c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00b      	beq.n	80047b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2204      	movs	r2, #4
 800479e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a6:	f043 0202 	orr.w	r2, r3, #2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d017      	beq.n	80047ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00b      	beq.n	80047ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2208      	movs	r2, #8
 80047da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e2:	f043 0208 	orr.w	r2, r3, #8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d012      	beq.n	800481e <HAL_UART_IRQHandler+0x18a>
 80047f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00c      	beq.n	800481e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800480c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8211 	beq.w	8004c4c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004858:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004866:	2b40      	cmp	r3, #64	@ 0x40
 8004868:	d005      	beq.n	8004876 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800486a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800486e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004872:	2b00      	cmp	r3, #0
 8004874:	d04f      	beq.n	8004916 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fdf8 	bl	800546c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004886:	2b40      	cmp	r3, #64	@ 0x40
 8004888:	d141      	bne.n	800490e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3308      	adds	r3, #8
 8004890:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80048a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80048ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80048c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1d9      	bne.n	800488a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d013      	beq.n	8004906 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e2:	4a13      	ldr	r2, [pc, #76]	@ (8004930 <HAL_UART_IRQHandler+0x29c>)
 80048e4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd f82c 	bl	8001948 <HAL_DMA_Abort_IT>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d017      	beq.n	8004926 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004900:	4610      	mov	r0, r2
 8004902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	e00f      	b.n	8004926 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f9b4 	bl	8004c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	e00b      	b.n	8004926 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9b0 	bl	8004c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004914:	e007      	b.n	8004926 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f9ac 	bl	8004c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004924:	e192      	b.n	8004c4c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004926:	bf00      	nop
    return;
 8004928:	e190      	b.n	8004c4c <HAL_UART_IRQHandler+0x5b8>
 800492a:	bf00      	nop
 800492c:	04000120 	.word	0x04000120
 8004930:	08005535 	.word	0x08005535

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004938:	2b01      	cmp	r3, #1
 800493a:	f040 814b 	bne.w	8004bd4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8144 	beq.w	8004bd4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 813d 	beq.w	8004bd4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2210      	movs	r2, #16
 8004960:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496c:	2b40      	cmp	r3, #64	@ 0x40
 800496e:	f040 80b5 	bne.w	8004adc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800497e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 8164 	beq.w	8004c50 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800498e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004992:	429a      	cmp	r2, r3
 8004994:	f080 815c 	bcs.w	8004c50 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800499e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	f000 8086 	beq.w	8004aba <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80049c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80049d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049dc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1da      	bne.n	80049ae <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3308      	adds	r3, #8
 80049fe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3308      	adds	r3, #8
 8004a18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a1c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a24:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e1      	bne.n	80049f8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3308      	adds	r3, #8
 8004a54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a58:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e3      	bne.n	8004a34 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a8a:	f023 0310 	bic.w	r3, r3, #16
 8004a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a9e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004aa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e4      	bne.n	8004a7a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fc ff09 	bl	80018cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f8d7 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ada:	e0b9      	b.n	8004c50 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80ab 	beq.w	8004c54 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80a6 	beq.w	8004c54 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b2c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e4      	bne.n	8004b08 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3308      	adds	r3, #8
 8004b44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	f023 0301 	bic.w	r3, r3, #1
 8004b54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b62:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e3      	bne.n	8004b3e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0310 	bic.w	r3, r3, #16
 8004b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	69b9      	ldr	r1, [r7, #24]
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e4      	bne.n	8004b8a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f85b 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bd2:	e03f      	b.n	8004c54 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <HAL_UART_IRQHandler+0x56a>
 8004be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004be4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fe84 	bl	8005904 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bfc:	e02d      	b.n	8004c5a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00e      	beq.n	8004c28 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01c      	beq.n	8004c58 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
    }
    return;
 8004c26:	e017      	b.n	8004c58 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d012      	beq.n	8004c5a <HAL_UART_IRQHandler+0x5c6>
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00c      	beq.n	8004c5a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fc8d 	bl	8005560 <UART_EndTransmit_IT>
    return;
 8004c46:	e008      	b.n	8004c5a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c48:	bf00      	nop
 8004c4a:	e006      	b.n	8004c5a <HAL_UART_IRQHandler+0x5c6>
    return;
 8004c4c:	bf00      	nop
 8004c4e:	e004      	b.n	8004c5a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c50:	bf00      	nop
 8004c52:	e002      	b.n	8004c5a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <HAL_UART_IRQHandler+0x5c6>
    return;
 8004c58:	bf00      	nop
  }

}
 8004c5a:	37e8      	adds	r7, #232	@ 0xe8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004cce:	f023 030c 	bic.w	r3, r3, #12
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	6979      	ldr	r1, [r7, #20]
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a99      	ldr	r2, [pc, #612]	@ (8004f80 <UART_SetConfig+0x2e0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d120      	bne.n	8004d62 <UART_SetConfig+0xc2>
 8004d20:	4b98      	ldr	r3, [pc, #608]	@ (8004f84 <UART_SetConfig+0x2e4>)
 8004d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d817      	bhi.n	8004d5c <UART_SetConfig+0xbc>
 8004d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d34 <UART_SetConfig+0x94>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d45 	.word	0x08004d45
 8004d38:	08004d51 	.word	0x08004d51
 8004d3c:	08004d57 	.word	0x08004d57
 8004d40:	08004d4b 	.word	0x08004d4b
 8004d44:	2301      	movs	r3, #1
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e061      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e05e      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004d50:	2304      	movs	r3, #4
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e05b      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004d56:	2308      	movs	r3, #8
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e058      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e055      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a88      	ldr	r2, [pc, #544]	@ (8004f88 <UART_SetConfig+0x2e8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d124      	bne.n	8004db6 <UART_SetConfig+0x116>
 8004d6c:	4b85      	ldr	r3, [pc, #532]	@ (8004f84 <UART_SetConfig+0x2e4>)
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d78:	d011      	beq.n	8004d9e <UART_SetConfig+0xfe>
 8004d7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d7e:	d817      	bhi.n	8004db0 <UART_SetConfig+0x110>
 8004d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d84:	d011      	beq.n	8004daa <UART_SetConfig+0x10a>
 8004d86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d8a:	d811      	bhi.n	8004db0 <UART_SetConfig+0x110>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <UART_SetConfig+0xf8>
 8004d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d94:	d006      	beq.n	8004da4 <UART_SetConfig+0x104>
 8004d96:	e00b      	b.n	8004db0 <UART_SetConfig+0x110>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e037      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	77fb      	strb	r3, [r7, #31]
 8004da2:	e034      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004da4:	2304      	movs	r3, #4
 8004da6:	77fb      	strb	r3, [r7, #31]
 8004da8:	e031      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004daa:	2308      	movs	r3, #8
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e02e      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004db0:	2310      	movs	r3, #16
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e02b      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a74      	ldr	r2, [pc, #464]	@ (8004f8c <UART_SetConfig+0x2ec>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d124      	bne.n	8004e0a <UART_SetConfig+0x16a>
 8004dc0:	4b70      	ldr	r3, [pc, #448]	@ (8004f84 <UART_SetConfig+0x2e4>)
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004dc8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004dcc:	d011      	beq.n	8004df2 <UART_SetConfig+0x152>
 8004dce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004dd2:	d817      	bhi.n	8004e04 <UART_SetConfig+0x164>
 8004dd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004dd8:	d011      	beq.n	8004dfe <UART_SetConfig+0x15e>
 8004dda:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004dde:	d811      	bhi.n	8004e04 <UART_SetConfig+0x164>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <UART_SetConfig+0x14c>
 8004de4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004de8:	d006      	beq.n	8004df8 <UART_SetConfig+0x158>
 8004dea:	e00b      	b.n	8004e04 <UART_SetConfig+0x164>
 8004dec:	2300      	movs	r3, #0
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e00d      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004df2:	2302      	movs	r3, #2
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e00a      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004df8:	2304      	movs	r3, #4
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e007      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004dfe:	2308      	movs	r3, #8
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	e004      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004e04:	2310      	movs	r3, #16
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e001      	b.n	8004e0e <UART_SetConfig+0x16e>
 8004e0a:	2310      	movs	r3, #16
 8004e0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e16:	d15a      	bne.n	8004ece <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8004e18:	7ffb      	ldrb	r3, [r7, #31]
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d827      	bhi.n	8004e6e <UART_SetConfig+0x1ce>
 8004e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e24 <UART_SetConfig+0x184>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e49 	.word	0x08004e49
 8004e28:	08004e51 	.word	0x08004e51
 8004e2c:	08004e59 	.word	0x08004e59
 8004e30:	08004e6f 	.word	0x08004e6f
 8004e34:	08004e5f 	.word	0x08004e5f
 8004e38:	08004e6f 	.word	0x08004e6f
 8004e3c:	08004e6f 	.word	0x08004e6f
 8004e40:	08004e6f 	.word	0x08004e6f
 8004e44:	08004e67 	.word	0x08004e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e48:	f7fe f94a 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8004e4c:	61b8      	str	r0, [r7, #24]
        break;
 8004e4e:	e013      	b.n	8004e78 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e50:	f7fe f968 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8004e54:	61b8      	str	r0, [r7, #24]
        break;
 8004e56:	e00f      	b.n	8004e78 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e58:	4b4d      	ldr	r3, [pc, #308]	@ (8004f90 <UART_SetConfig+0x2f0>)
 8004e5a:	61bb      	str	r3, [r7, #24]
        break;
 8004e5c:	e00c      	b.n	8004e78 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5e:	f7fe f8df 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8004e62:	61b8      	str	r0, [r7, #24]
        break;
 8004e64:	e008      	b.n	8004e78 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e6a:	61bb      	str	r3, [r7, #24]
        break;
 8004e6c:	e004      	b.n	8004e78 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	77bb      	strb	r3, [r7, #30]
        break;
 8004e76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d074      	beq.n	8004f68 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	005a      	lsls	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b0f      	cmp	r3, #15
 8004e98:	d916      	bls.n	8004ec8 <UART_SetConfig+0x228>
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea0:	d212      	bcs.n	8004ec8 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f023 030f 	bic.w	r3, r3, #15
 8004eaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	89fb      	ldrh	r3, [r7, #14]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	89fa      	ldrh	r2, [r7, #14]
 8004ec4:	60da      	str	r2, [r3, #12]
 8004ec6:	e04f      	b.n	8004f68 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	77bb      	strb	r3, [r7, #30]
 8004ecc:	e04c      	b.n	8004f68 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ece:	7ffb      	ldrb	r3, [r7, #31]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d828      	bhi.n	8004f26 <UART_SetConfig+0x286>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <UART_SetConfig+0x23c>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f01 	.word	0x08004f01
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f11 	.word	0x08004f11
 8004ee8:	08004f27 	.word	0x08004f27
 8004eec:	08004f17 	.word	0x08004f17
 8004ef0:	08004f27 	.word	0x08004f27
 8004ef4:	08004f27 	.word	0x08004f27
 8004ef8:	08004f27 	.word	0x08004f27
 8004efc:	08004f1f 	.word	0x08004f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f00:	f7fe f8ee 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8004f04:	61b8      	str	r0, [r7, #24]
        break;
 8004f06:	e013      	b.n	8004f30 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f08:	f7fe f90c 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8004f0c:	61b8      	str	r0, [r7, #24]
        break;
 8004f0e:	e00f      	b.n	8004f30 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b1f      	ldr	r3, [pc, #124]	@ (8004f90 <UART_SetConfig+0x2f0>)
 8004f12:	61bb      	str	r3, [r7, #24]
        break;
 8004f14:	e00c      	b.n	8004f30 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7fe f883 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8004f1a:	61b8      	str	r0, [r7, #24]
        break;
 8004f1c:	e008      	b.n	8004f30 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f22:	61bb      	str	r3, [r7, #24]
        break;
 8004f24:	e004      	b.n	8004f30 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d018      	beq.n	8004f68 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	085a      	lsrs	r2, r3, #1
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	441a      	add	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b0f      	cmp	r3, #15
 8004f4e:	d909      	bls.n	8004f64 <UART_SetConfig+0x2c4>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f56:	d205      	bcs.n	8004f64 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	e001      	b.n	8004f68 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f74:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40013800 	.word	0x40013800
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40004400 	.word	0x40004400
 8004f8c:	40004800 	.word	0x40004800
 8004f90:	007a1200 	.word	0x007a1200

08004f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01a      	beq.n	80050aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005092:	d10a      	bne.n	80050aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	605a      	str	r2, [r3, #4]
  }
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b098      	sub	sp, #96	@ 0x60
 80050dc:	af02      	add	r7, sp, #8
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050e8:	f7fb fdb0 	bl	8000c4c <HAL_GetTick>
 80050ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d12e      	bne.n	800515a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005104:	2200      	movs	r2, #0
 8005106:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f88c 	bl	8005228 <UART_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d021      	beq.n	800515a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800512a:	653b      	str	r3, [r7, #80]	@ 0x50
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005134:	647b      	str	r3, [r7, #68]	@ 0x44
 8005136:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800513a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e6      	bne.n	8005116 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e062      	b.n	8005220 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b04      	cmp	r3, #4
 8005166:	d149      	bne.n	80051fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005170:	2200      	movs	r2, #0
 8005172:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f856 	bl	8005228 <UART_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d03c      	beq.n	80051fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	623b      	str	r3, [r7, #32]
   return(result);
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e6      	bne.n	8005182 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3308      	adds	r3, #8
 80051ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3308      	adds	r3, #8
 80051d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051d4:	61fa      	str	r2, [r7, #28]
 80051d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	69b9      	ldr	r1, [r7, #24]
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	617b      	str	r3, [r7, #20]
   return(result);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e5      	bne.n	80051b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e011      	b.n	8005220 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3758      	adds	r7, #88	@ 0x58
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005238:	e04f      	b.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d04b      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fb fd03 	bl	8000c4c <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <UART_WaitOnFlagUntilTimeout+0x30>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e04e      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d037      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b80      	cmp	r3, #128	@ 0x80
 800526e:	d034      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b40      	cmp	r3, #64	@ 0x40
 8005274:	d031      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b08      	cmp	r3, #8
 8005282:	d110      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2208      	movs	r2, #8
 800528a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f8ed 	bl	800546c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2208      	movs	r2, #8
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e029      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052b4:	d111      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f8d3 	bl	800546c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e00f      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	461a      	mov	r2, r3
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d0a0      	beq.n	800523a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005304:	b480      	push	{r7}
 8005306:	b097      	sub	sp, #92	@ 0x5c
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	88fa      	ldrh	r2, [r7, #6]
 800531c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005336:	d10e      	bne.n	8005356 <UART_Start_Receive_IT+0x52>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d105      	bne.n	800534c <UART_Start_Receive_IT+0x48>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005346:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800534a:	e01a      	b.n	8005382 <UART_Start_Receive_IT+0x7e>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	22ff      	movs	r2, #255	@ 0xff
 8005350:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005354:	e015      	b.n	8005382 <UART_Start_Receive_IT+0x7e>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10d      	bne.n	800537a <UART_Start_Receive_IT+0x76>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <UART_Start_Receive_IT+0x6c>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	22ff      	movs	r2, #255	@ 0xff
 800536a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800536e:	e008      	b.n	8005382 <UART_Start_Receive_IT+0x7e>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	227f      	movs	r2, #127	@ 0x7f
 8005374:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005378:	e003      	b.n	8005382 <UART_Start_Receive_IT+0x7e>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2222      	movs	r2, #34	@ 0x22
 800538e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053b2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80053b4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80053c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ce:	d107      	bne.n	80053e0 <UART_Start_Receive_IT+0xdc>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d103      	bne.n	80053e0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a22      	ldr	r2, [pc, #136]	@ (8005464 <UART_Start_Receive_IT+0x160>)
 80053dc:	669a      	str	r2, [r3, #104]	@ 0x68
 80053de:	e002      	b.n	80053e6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a21      	ldr	r2, [pc, #132]	@ (8005468 <UART_Start_Receive_IT+0x164>)
 80053e4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d019      	beq.n	8005422 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800540c:	637b      	str	r3, [r7, #52]	@ 0x34
 800540e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800541a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e6      	bne.n	80053ee <UART_Start_Receive_IT+0xea>
 8005420:	e018      	b.n	8005454 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	613b      	str	r3, [r7, #16]
   return(result);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f043 0320 	orr.w	r3, r3, #32
 8005436:	653b      	str	r3, [r7, #80]	@ 0x50
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005440:	623b      	str	r3, [r7, #32]
 8005442:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	69f9      	ldr	r1, [r7, #28]
 8005446:	6a3a      	ldr	r2, [r7, #32]
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	61bb      	str	r3, [r7, #24]
   return(result);
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e6      	bne.n	8005422 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	375c      	adds	r7, #92	@ 0x5c
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	0800575d 	.word	0x0800575d
 8005468:	080055b5 	.word	0x080055b5

0800546c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800546c:	b480      	push	{r7}
 800546e:	b095      	sub	sp, #84	@ 0x54
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005492:	643b      	str	r3, [r7, #64]	@ 0x40
 8005494:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e6      	bne.n	8005474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3308      	adds	r3, #8
 80054c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e5      	bne.n	80054a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d118      	bne.n	8005514 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f023 0310 	bic.w	r3, r3, #16
 80054f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6979      	ldr	r1, [r7, #20]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	613b      	str	r3, [r7, #16]
   return(result);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e6      	bne.n	80054e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005528:	bf00      	nop
 800552a:	3754      	adds	r7, #84	@ 0x54
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff fb8e 	bl	8004c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	60bb      	str	r3, [r7, #8]
   return(result);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6979      	ldr	r1, [r7, #20]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	613b      	str	r3, [r7, #16]
   return(result);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e6      	bne.n	8005568 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fb5a 	bl	8004c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ac:	bf00      	nop
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b09c      	sub	sp, #112	@ 0x70
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055cc:	2b22      	cmp	r3, #34	@ 0x22
 80055ce:	f040 80b9 	bne.w	8005744 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80055d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80055e0:	b2d9      	uxtb	r1, r3
 80055e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ec:	400a      	ands	r2, r1
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 809c 	bne.w	8005754 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800562a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800562c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800563a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800563c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005640:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e6      	bne.n	800561c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800565e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	667b      	str	r3, [r7, #100]	@ 0x64
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3308      	adds	r3, #8
 800566c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800566e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005670:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800567c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d018      	beq.n	80056d6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	623b      	str	r3, [r7, #32]
   return(result);
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80056c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e6      	bne.n	80056a4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d12e      	bne.n	800573c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f023 0310 	bic.w	r3, r3, #16
 80056f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	69b9      	ldr	r1, [r7, #24]
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	617b      	str	r3, [r7, #20]
   return(result);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e6      	bne.n	80056e4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b10      	cmp	r3, #16
 8005722:	d103      	bne.n	800572c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2210      	movs	r2, #16
 800572a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff faa7 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800573a:	e00b      	b.n	8005754 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7fa ffc1 	bl	80006c4 <HAL_UART_RxCpltCallback>
}
 8005742:	e007      	b.n	8005754 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0208 	orr.w	r2, r2, #8
 8005752:	619a      	str	r2, [r3, #24]
}
 8005754:	bf00      	nop
 8005756:	3770      	adds	r7, #112	@ 0x70
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b09c      	sub	sp, #112	@ 0x70
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800576a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005774:	2b22      	cmp	r3, #34	@ 0x22
 8005776:	f040 80b9 	bne.w	80058ec <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005780:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005788:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800578a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800578e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005792:	4013      	ands	r3, r2
 8005794:	b29a      	uxth	r2, r3
 8005796:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005798:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579e:	1c9a      	adds	r2, r3, #2
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f040 809c 	bne.w	80058fc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80057e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80057f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e6      	bne.n	80057c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3308      	adds	r3, #8
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	663b      	str	r3, [r7, #96]	@ 0x60
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3308      	adds	r3, #8
 8005814:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005816:	643a      	str	r2, [r7, #64]	@ 0x40
 8005818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800581c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e5      	bne.n	80057f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d018      	beq.n	800587e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	61fb      	str	r3, [r7, #28]
   return(result);
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005860:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800586a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e6      	bne.n	800584c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005882:	2b01      	cmp	r3, #1
 8005884:	d12e      	bne.n	80058e4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	60bb      	str	r3, [r7, #8]
   return(result);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f023 0310 	bic.w	r3, r3, #16
 80058a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6979      	ldr	r1, [r7, #20]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	613b      	str	r3, [r7, #16]
   return(result);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e6      	bne.n	800588c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d103      	bne.n	80058d4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2210      	movs	r2, #16
 80058d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff f9d3 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058e2:	e00b      	b.n	80058fc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7fa feed 	bl	80006c4 <HAL_UART_RxCpltCallback>
}
 80058ea:	e007      	b.n	80058fc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	619a      	str	r2, [r3, #24]
}
 80058fc:	bf00      	nop
 80058fe:	3770      	adds	r7, #112	@ 0x70
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <memset>:
 8005918:	4402      	add	r2, r0
 800591a:	4603      	mov	r3, r0
 800591c:	4293      	cmp	r3, r2
 800591e:	d100      	bne.n	8005922 <memset+0xa>
 8005920:	4770      	bx	lr
 8005922:	f803 1b01 	strb.w	r1, [r3], #1
 8005926:	e7f9      	b.n	800591c <memset+0x4>

08005928 <__libc_init_array>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	4d0d      	ldr	r5, [pc, #52]	@ (8005960 <__libc_init_array+0x38>)
 800592c:	4c0d      	ldr	r4, [pc, #52]	@ (8005964 <__libc_init_array+0x3c>)
 800592e:	1b64      	subs	r4, r4, r5
 8005930:	10a4      	asrs	r4, r4, #2
 8005932:	2600      	movs	r6, #0
 8005934:	42a6      	cmp	r6, r4
 8005936:	d109      	bne.n	800594c <__libc_init_array+0x24>
 8005938:	4d0b      	ldr	r5, [pc, #44]	@ (8005968 <__libc_init_array+0x40>)
 800593a:	4c0c      	ldr	r4, [pc, #48]	@ (800596c <__libc_init_array+0x44>)
 800593c:	f000 f818 	bl	8005970 <_init>
 8005940:	1b64      	subs	r4, r4, r5
 8005942:	10a4      	asrs	r4, r4, #2
 8005944:	2600      	movs	r6, #0
 8005946:	42a6      	cmp	r6, r4
 8005948:	d105      	bne.n	8005956 <__libc_init_array+0x2e>
 800594a:	bd70      	pop	{r4, r5, r6, pc}
 800594c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005950:	4798      	blx	r3
 8005952:	3601      	adds	r6, #1
 8005954:	e7ee      	b.n	8005934 <__libc_init_array+0xc>
 8005956:	f855 3b04 	ldr.w	r3, [r5], #4
 800595a:	4798      	blx	r3
 800595c:	3601      	adds	r6, #1
 800595e:	e7f2      	b.n	8005946 <__libc_init_array+0x1e>
 8005960:	080059c0 	.word	0x080059c0
 8005964:	080059c0 	.word	0x080059c0
 8005968:	080059c0 	.word	0x080059c0
 800596c:	080059c4 	.word	0x080059c4

08005970 <_init>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr

0800597c <_fini>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr
