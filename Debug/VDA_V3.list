
VDA_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006818  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080069a0  080069a0  000079a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a60  08006a60  00007a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a68  08006a68  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a68  08006a68  00007a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a6c  08006a6c  00007a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006a70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000010  08006a7c  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08006a7c  0000829c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b96  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6c  00000000  00000000  0001cbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  0001fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e53  00000000  00000000  00020d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbd7  00000000  00000000  00021be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b7e  00000000  00000000  0003e7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaef3  00000000  00000000  00055338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010022b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e54  00000000  00000000  00100270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001050c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006988 	.word	0x08006988

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006988 	.word	0x08006988

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	@ 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <__gedf2>:
 8000978:	f04f 3cff 	mov.w	ip, #4294967295
 800097c:	e006      	b.n	800098c <__cmpdf2+0x4>
 800097e:	bf00      	nop

08000980 <__ledf2>:
 8000980:	f04f 0c01 	mov.w	ip, #1
 8000984:	e002      	b.n	800098c <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__cmpdf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	bf18      	it	ne
 800099e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a2:	d01b      	beq.n	80009dc <__cmpdf2+0x54>
 80009a4:	b001      	add	sp, #4
 80009a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009aa:	bf0c      	ite	eq
 80009ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b0:	ea91 0f03 	teqne	r1, r3
 80009b4:	bf02      	ittt	eq
 80009b6:	ea90 0f02 	teqeq	r0, r2
 80009ba:	2000      	moveq	r0, #0
 80009bc:	4770      	bxeq	lr
 80009be:	f110 0f00 	cmn.w	r0, #0
 80009c2:	ea91 0f03 	teq	r1, r3
 80009c6:	bf58      	it	pl
 80009c8:	4299      	cmppl	r1, r3
 80009ca:	bf08      	it	eq
 80009cc:	4290      	cmpeq	r0, r2
 80009ce:	bf2c      	ite	cs
 80009d0:	17d8      	asrcs	r0, r3, #31
 80009d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d6:	f040 0001 	orr.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	d102      	bne.n	80009ec <__cmpdf2+0x64>
 80009e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ea:	d107      	bne.n	80009fc <__cmpdf2+0x74>
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d1d6      	bne.n	80009a4 <__cmpdf2+0x1c>
 80009f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fa:	d0d3      	beq.n	80009a4 <__cmpdf2+0x1c>
 80009fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_cdrcmple>:
 8000a04:	4684      	mov	ip, r0
 8000a06:	4610      	mov	r0, r2
 8000a08:	4662      	mov	r2, ip
 8000a0a:	468c      	mov	ip, r1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4663      	mov	r3, ip
 8000a10:	e000      	b.n	8000a14 <__aeabi_cdcmpeq>
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdcmpeq>:
 8000a14:	b501      	push	{r0, lr}
 8000a16:	f7ff ffb7 	bl	8000988 <__cmpdf2>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	bf48      	it	mi
 8000a1e:	f110 0f00 	cmnmi.w	r0, #0
 8000a22:	bd01      	pop	{r0, pc}

08000a24 <__aeabi_dcmpeq>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff fff4 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2001      	moveq	r0, #1
 8000a30:	2000      	movne	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmplt>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffea 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a40:	bf34      	ite	cc
 8000a42:	2001      	movcc	r0, #1
 8000a44:	2000      	movcs	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmple>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffe0 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpge>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffce 	bl	8000a04 <__aeabi_cdrcmple>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpgt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffc4 	bl	8000a04 <__aeabi_cdrcmple>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <filtroMediaMovil>:
double x_notch[FILTER_ORDER + 1] = {0};
double y_notch[FILTER_ORDER + 1] = {0};


// Aplica el filtro de media móvil sin necesidad de inicialización previa
uint32_t filtroMediaMovil(uint16_t nuevaMuestra) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
    static uint16_t ventana[WINDOW_SIZE] = {0};  // Inicializa en cero
    static uint8_t indice = 0;
    static uint32_t sumaVentana = 0;

    // Restar la muestra más antigua y sumar la nueva
    sumaVentana = sumaVentana - ventana[indice] + nuevaMuestra;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <filtroMediaMovil+0x70>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <filtroMediaMovil+0x74>)
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4a18      	ldr	r2, [pc, #96]	@ (8000b40 <filtroMediaMovil+0x78>)
 8000ade:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000ae2:	1a9a      	subs	r2, r3, r2
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a13      	ldr	r2, [pc, #76]	@ (8000b38 <filtroMediaMovil+0x70>)
 8000aea:	6013      	str	r3, [r2, #0]
    ventana[indice] = nuevaMuestra;
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <filtroMediaMovil+0x74>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	4a13      	ldr	r2, [pc, #76]	@ (8000b40 <filtroMediaMovil+0x78>)
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

    // Mover el índice circular
    indice = (indice + 1) % WINDOW_SIZE;
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <filtroMediaMovil+0x74>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <filtroMediaMovil+0x7c>)
 8000b02:	fb83 1302 	smull	r1, r3, r3, r2
 8000b06:	4413      	add	r3, r2
 8000b08:	1119      	asrs	r1, r3, #4
 8000b0a:	17d3      	asrs	r3, r2, #31
 8000b0c:	1ac9      	subs	r1, r1, r3
 8000b0e:	460b      	mov	r3, r1
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	1a5b      	subs	r3, r3, r1
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1ad1      	subs	r1, r2, r3
 8000b18:	b2ca      	uxtb	r2, r1
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <filtroMediaMovil+0x74>)
 8000b1c:	701a      	strb	r2, [r3, #0]

    // Retornar el valor filtrado
    return (uint32_t)(sumaVentana / WINDOW_SIZE);
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <filtroMediaMovil+0x70>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <filtroMediaMovil+0x7c>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	091b      	lsrs	r3, r3, #4
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000080 	.word	0x20000080
 8000b3c:	20000084 	.word	0x20000084
 8000b40:	20000088 	.word	0x20000088
 8000b44:	88888889 	.word	0x88888889

08000b48 <iir_filter>:
//orden del nenominador
//donde se guardan los x calculados
// donde se guardan los y calculados

uint16_t iir_filter(uint16_t input, const double *num, const double *den,
                         int num_order, int den_order, double *x, double *y) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	@ 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	4603      	mov	r3, r0
 8000b56:	81fb      	strh	r3, [r7, #14]
    // Convertir entrada de uint16_t a double para cálculos internos
    double input_double = (double)input;
 8000b58:	89fb      	ldrh	r3, [r7, #14]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fc80 	bl	8000460 <__aeabi_ui2d>
 8000b60:	4602      	mov	r2, r0
 8000b62:	460b      	mov	r3, r1
 8000b64:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Desplazar valores anteriores de x
    for (uint8_t i = num_order; i > 0; i--) {
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000b6e:	e015      	b.n	8000b9c <iir_filter+0x54>
        x[i] = x[i-1];
 8000b70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b74:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b7e:	4413      	add	r3, r2
 8000b80:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000b88:	4411      	add	r1, r2
 8000b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8e:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint8_t i = num_order; i > 0; i--) {
 8000b92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b96:	3b01      	subs	r3, #1
 8000b98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1e5      	bne.n	8000b70 <iir_filter+0x28>
    }
    x[0] = input_double;
 8000ba4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000ba6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000baa:	e9c1 2300 	strd	r2, r3, [r1]

    // Calcular salida usando coeficientes del numerador
    double output = 0.0;
 8000bae:	f04f 0200 	mov.w	r2, #0
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (uint8_t i = 0; i <= num_order; i++) {
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000bc0:	e01e      	b.n	8000c00 <iir_filter+0xb8>
        output += num[i] * x[i];
 8000bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	4413      	add	r3, r2
 8000bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bd8:	4413      	add	r3, r2
 8000bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bde:	f7ff fcb9 	bl	8000554 <__aeabi_dmul>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000bea:	f7ff fafd 	bl	80001e8 <__adddf3>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (uint8_t i = 0; i <= num_order; i++) {
 8000bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dadb      	bge.n	8000bc2 <iir_filter+0x7a>
    }

    // Aplicar coeficientes del denominador
    for (int i = 1; i <= den_order; i++) {
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	623b      	str	r3, [r7, #32]
 8000c0e:	e02c      	b.n	8000c6a <iir_filter+0x122>
        if(den[i] != 0.0){
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	f7ff fefe 	bl	8000a24 <__aeabi_dcmpeq>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d11a      	bne.n	8000c64 <iir_filter+0x11c>
            output -= den[i] * y[i - 1];
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8000c40:	3b01      	subs	r3, #1
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c46:	4413      	add	r3, r2
 8000c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4c:	f7ff fc82 	bl	8000554 <__aeabi_dmul>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000c58:	f7ff fac4 	bl	80001e4 <__aeabi_dsub>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (int i = 1; i <= den_order; i++) {
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	3301      	adds	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
 8000c6a:	6a3a      	ldr	r2, [r7, #32]
 8000c6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	ddce      	ble.n	8000c10 <iir_filter+0xc8>
        }
    }

    // Normalizar por den[0]
    output /= den[0];
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000c7c:	f7ff fd94 	bl	80007a8 <__aeabi_ddiv>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Desplazar valores anteriores de y
    for (uint8_t i = den_order; i > 0; i--) {
 8000c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c8a:	77fb      	strb	r3, [r7, #31]
 8000c8c:	e011      	b.n	8000cb2 <iir_filter+0x16a>
        y[i] = y[i-1];
 8000c8e:	7ffb      	ldrb	r3, [r7, #31]
 8000c90:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8000c94:	3b01      	subs	r3, #1
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c9a:	4413      	add	r3, r2
 8000c9c:	7ffa      	ldrb	r2, [r7, #31]
 8000c9e:	00d2      	lsls	r2, r2, #3
 8000ca0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000ca2:	4411      	add	r1, r2
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint8_t i = den_order; i > 0; i--) {
 8000cac:	7ffb      	ldrb	r3, [r7, #31]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	77fb      	strb	r3, [r7, #31]
 8000cb2:	7ffb      	ldrb	r3, [r7, #31]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1ea      	bne.n	8000c8e <iir_filter+0x146>
    }
    y[0] = output;
 8000cb8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000cbe:	e9c1 2300 	strd	r2, r3, [r1]

    // Convertir salida a uint16_t con saturación
    if (output < 0) {
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000cce:	f7ff feb3 	bl	8000a38 <__aeabi_dcmplt>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <iir_filter+0x194>
        return 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e012      	b.n	8000d02 <iir_filter+0x1ba>
    } else if (output > 65535) {
 8000cdc:	a30c      	add	r3, pc, #48	@ (adr r3, 8000d10 <iir_filter+0x1c8>)
 8000cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000ce6:	f7ff fec5 	bl	8000a74 <__aeabi_dcmpgt>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <iir_filter+0x1ae>
        return 65535;
 8000cf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cf4:	e005      	b.n	8000d02 <iir_filter+0x1ba>
    } else {
        return (uint16_t)output;
 8000cf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000cfa:	f7ff fec5 	bl	8000a88 <__aeabi_d2uiz>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b29b      	uxth	r3, r3
    }
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3738      	adds	r7, #56	@ 0x38
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	f3af 8000 	nop.w
 8000d10:	00000000 	.word	0x00000000
 8000d14:	40efffe0 	.word	0x40efffe0

08000d18 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d1c:	f3bf 8f4f 	dsb	sy
}
 8000d20:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <__NVIC_SystemReset+0x24>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d2a:	4904      	ldr	r1, [pc, #16]	@ (8000d3c <__NVIC_SystemReset+0x24>)
 8000d2c:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <__NVIC_SystemReset+0x28>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d32:	f3bf 8f4f 	dsb	sy
}
 8000d36:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <__NVIC_SystemReset+0x20>
 8000d3c:	e000ed00 	.word	0xe000ed00
 8000d40:	05fa0004 	.word	0x05fa0004

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 ffa2 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f850 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f000 fa4e 	bl	80011f0 <MX_GPIO_Init>
  MX_SDADC1_Init();
 8000d54:	f000 f918 	bl	8000f88 <MX_SDADC1_Init>
  MX_USART1_UART_Init();
 8000d58:	f000 fa1a 	bl	8001190 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d5c:	f000 f97e 	bl	800105c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000d60:	f000 f8aa 	bl	8000eb8 <MX_ADC1_Init>
  MX_DAC2_Init();
 8000d64:	f000 f8e6 	bl	8000f34 <MX_DAC2_Init>
  MX_TIM19_Init();
 8000d68:	f000 f9c4 	bl	80010f4 <MX_TIM19_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d6c:	481a      	ldr	r0, [pc, #104]	@ (8000dd8 <main+0x94>)
 8000d6e:	f003 fffb 	bl	8004d68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim19);
 8000d72:	481a      	ldr	r0, [pc, #104]	@ (8000ddc <main+0x98>)
 8000d74:	f003 fff8 	bl	8004d68 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4819      	ldr	r0, [pc, #100]	@ (8000de0 <main+0x9c>)
 8000d7c:	f001 fd8a 	bl	8002894 <HAL_DAC_Start>
  SerialHandler_Init(&huart1);
 8000d80:	4818      	ldr	r0, [pc, #96]	@ (8000de4 <main+0xa0>)
 8000d82:	f000 fb9f 	bl	80014c4 <SerialHandler_Init>
  HAL_GPIO_WritePin(POWER_LED_GPIO_Port, POWER_LED_Pin, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	4817      	ldr	r0, [pc, #92]	@ (8000de8 <main+0xa4>)
 8000d8c:	f002 f810 	bl	8002db0 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      if (flag) {
 8000d90:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <main+0xa8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0fb      	beq.n	8000d90 <main+0x4c>
          // Aquí puedes hacer algo cuando el flag esté en 1
      	//HAL_UART_Transmit(&huart1, (uint8_t[]){0x79}, 1, 1);
      HAL_GPIO_WritePin(FF_D_GPIO_Port, FF_D_Pin, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d9e:	4812      	ldr	r0, [pc, #72]	@ (8000de8 <main+0xa4>)
 8000da0:	f002 f806 	bl	8002db0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(FF_CLK_GPIO_Port, FF_CLK_Pin, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000daa:	480f      	ldr	r0, [pc, #60]	@ (8000de8 <main+0xa4>)
 8000dac:	f002 f800 	bl	8002db0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f000 ffd3 	bl	8001d5c <HAL_Delay>
      HAL_GPIO_WritePin(FF_CLK_GPIO_Port, FF_CLK_Pin, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dbc:	480a      	ldr	r0, [pc, #40]	@ (8000de8 <main+0xa4>)
 8000dbe:	f001 fff7 	bl	8002db0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f000 ffca 	bl	8001d5c <HAL_Delay>
      HAL_GPIO_WritePin(FF_CLK_GPIO_Port, FF_CLK_Pin, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4806      	ldr	r0, [pc, #24]	@ (8000de8 <main+0xa4>)
 8000dd0:	f001 ffee 	bl	8002db0 <HAL_GPIO_WritePin>
      NVIC_SystemReset();
 8000dd4:	f7ff ffa0 	bl	8000d18 <__NVIC_SystemReset>
 8000dd8:	2000014c 	.word	0x2000014c
 8000ddc:	20000198 	.word	0x20000198
 8000de0:	200000f4 	.word	0x200000f4
 8000de4:	200001e4 	.word	0x200001e4
 8000de8:	48000400 	.word	0x48000400
 8000dec:	2000026c 	.word	0x2000026c

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09a      	sub	sp, #104	@ 0x68
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dfa:	2228      	movs	r2, #40	@ 0x28
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f005 fd96 	bl	8006930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	222c      	movs	r2, #44	@ 0x2c
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f005 fd88 	bl	8006930 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e20:	2301      	movs	r3, #1
 8000e22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e32:	2302      	movs	r3, #2
 8000e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e3a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e3c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e40:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 f804 	bl	8002e54 <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e52:	f000 fad3 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e70:	2102      	movs	r1, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fffc 	bl	8003e70 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e7e:	f000 fabd 	bl	80013fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1
 8000e82:	f640 0381 	movw	r3, #2177	@ 0x881
 8000e86:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV12;
 8000e8c:	f04f 4328 	mov.w	r3, #2818572288	@ 0xa8000000
 8000e90:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 f9fb 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ea4:	f000 faaa 	bl	80013fc <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8000ea8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000eac:	f001 ffb2 	bl	8002e14 <HAL_PWREx_EnableSDADC>
}
 8000eb0:	bf00      	nop
 8000eb2:	3768      	adds	r7, #104	@ 0x68
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_ADC1_Init+0x74>)
 8000eca:	4a19      	ldr	r2, [pc, #100]	@ (8000f30 <MX_ADC1_Init+0x78>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_ADC1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <MX_ADC1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_ADC1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <MX_ADC1_Init+0x74>)
 8000ee2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000ee6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee8:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <MX_ADC1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_ADC1_Init+0x74>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef4:	480d      	ldr	r0, [pc, #52]	@ (8000f2c <MX_ADC1_Init+0x74>)
 8000ef6:	f000 ff55 	bl	8001da4 <HAL_ADC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f00:	f000 fa7c 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f04:	2308      	movs	r3, #8
 8000f06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_ADC1_Init+0x74>)
 8000f16:	f001 f9d9 	bl	80022cc <HAL_ADC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f20:	f000 fa6c 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200000c4 	.word	0x200000c4
 8000f30:	40012400 	.word	0x40012400

08000f34 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_DAC2_Init+0x4c>)
 8000f46:	4a0f      	ldr	r2, [pc, #60]	@ (8000f84 <MX_DAC2_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_DAC2_Init+0x4c>)
 8000f4c:	f001 fc5b 	bl	8002806 <HAL_DAC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 8000f56:	f000 fa51 	bl	80013fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_DAC2_Init+0x4c>)
 8000f6a:	f001 fcde 	bl	800292a <HAL_DAC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 8000f74:	f000 fa42 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000f4 	.word	0x200000f4
 8000f84:	40009800 	.word	0x40009800

08000f88 <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8000f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8001054 <MX_SDADC1_Init+0xcc>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000fac:	4b28      	ldr	r3, [pc, #160]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_VREFINT2;
 8000fb2:	4b27      	ldr	r3, [pc, #156]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8000fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fb8:	611a      	str	r2, [r3, #16]
  hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8000fba:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8000fc0:	4823      	ldr	r0, [pc, #140]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8000fc2:	f003 fad9 	bl	8004578 <HAL_SDADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_SDADC1_Init+0x48>
  {
    Error_Handler();
 8000fcc:	f000 fa16 	bl	80013fc <Error_Handler>
  }

  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	481f      	ldr	r0, [pc, #124]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8000fd4:	f003 fc58 	bl	8004888 <HAL_SDADC_SelectInjectedDelay>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_SDADC1_Init+0x5a>
  {
    Error_Handler();
 8000fde:	f000 fa0d 	bl	80013fc <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	481a      	ldr	r0, [pc, #104]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8000fe6:	f003 fc1f 	bl	8004828 <HAL_SDADC_SelectInjectedTrigger>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_SDADC1_Init+0x6c>
  {
    Error_Handler();
 8000ff0:	f000 fa04 	bl	80013fc <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_OFF) != HAL_OK)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4918      	ldr	r1, [pc, #96]	@ (8001058 <MX_SDADC1_Init+0xd0>)
 8000ff8:	4815      	ldr	r0, [pc, #84]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8000ffa:	f003 fbd9 	bl	80047b0 <HAL_SDADC_InjectedConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_SDADC1_Init+0x80>
  {
    Error_Handler();
 8001004:	f000 f9fa 	bl	80013fc <Error_Handler>
  }

  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001008:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 800100c:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1_2;
 800100e:	f44f 03e0 	mov.w	r3, #7340032	@ 0x700000
 8001012:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	461a      	mov	r2, r3
 8001020:	2100      	movs	r1, #0
 8001022:	480b      	ldr	r0, [pc, #44]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8001024:	f003 fb38 	bl	8004698 <HAL_SDADC_PrepareChannelConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_SDADC1_Init+0xaa>
  {
    Error_Handler();
 800102e:	f000 f9e5 	bl	80013fc <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_0) != HAL_OK)
 8001032:	2200      	movs	r2, #0
 8001034:	4908      	ldr	r1, [pc, #32]	@ (8001058 <MX_SDADC1_Init+0xd0>)
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_SDADC1_Init+0xc8>)
 8001038:	f003 fb6a 	bl	8004710 <HAL_SDADC_AssociateChannelConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_SDADC1_Init+0xbe>
  {
    Error_Handler();
 8001042:	f000 f9db 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000108 	.word	0x20000108
 8001054:	40016000 	.word	0x40016000
 8001058:	00050020 	.word	0x00050020

0800105c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001078:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <MX_TIM2_Init+0x94>)
 800107a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800107e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001080:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <MX_TIM2_Init+0x94>)
 8001082:	2207      	movs	r2, #7
 8001084:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <MX_TIM2_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_TIM2_Init+0x94>)
 800108e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001092:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <MX_TIM2_Init+0x94>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <MX_TIM2_Init+0x94>)
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a0:	4813      	ldr	r0, [pc, #76]	@ (80010f0 <MX_TIM2_Init+0x94>)
 80010a2:	f003 fe12 	bl	8004cca <HAL_TIM_Base_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010ac:	f000 f9a6 	bl	80013fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	4619      	mov	r1, r3
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <MX_TIM2_Init+0x94>)
 80010be:	f003 ffab 	bl	8005018 <HAL_TIM_ConfigClockSource>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010c8:	f000 f998 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_TIM2_Init+0x94>)
 80010da:	f004 f9cd 	bl	8005478 <HAL_TIMEx_MasterConfigSynchronization>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010e4:	f000 f98a 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000014c 	.word	0x2000014c

080010f4 <MX_TIM19_Init>:
  * @brief TIM19 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM19_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM19_Init 0 */

  /* USER CODE END TIM19_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM19_Init 1 */

  /* USER CODE END TIM19_Init 1 */
  htim19.Instance = TIM19;
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_TIM19_Init+0x94>)
 8001112:	4a1e      	ldr	r2, [pc, #120]	@ (800118c <MX_TIM19_Init+0x98>)
 8001114:	601a      	str	r2, [r3, #0]
  htim19.Init.Prescaler = 7200-1;
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_TIM19_Init+0x94>)
 8001118:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800111c:	605a      	str	r2, [r3, #4]
  htim19.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_TIM19_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim19.Init.Period = 10000-1;
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <MX_TIM19_Init+0x94>)
 8001126:	f242 720f 	movw	r2, #9999	@ 0x270f
 800112a:	60da      	str	r2, [r3, #12]
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_TIM19_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_TIM19_Init+0x94>)
 8001134:	2280      	movs	r2, #128	@ 0x80
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim19) != HAL_OK)
 8001138:	4813      	ldr	r0, [pc, #76]	@ (8001188 <MX_TIM19_Init+0x94>)
 800113a:	f003 fdc6 	bl	8004cca <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM19_Init+0x54>
  {
    Error_Handler();
 8001144:	f000 f95a 	bl	80013fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim19, &sClockSourceConfig) != HAL_OK)
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4619      	mov	r1, r3
 8001154:	480c      	ldr	r0, [pc, #48]	@ (8001188 <MX_TIM19_Init+0x94>)
 8001156:	f003 ff5f 	bl	8005018 <HAL_TIM_ConfigClockSource>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM19_Init+0x70>
  {
    Error_Handler();
 8001160:	f000 f94c 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_TIM19_Init+0x94>)
 8001172:	f004 f981 	bl	8005478 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM19_Init+0x8c>
  {
    Error_Handler();
 800117c:	f000 f93e 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM19_Init 2 */

  /* USER CODE END TIM19_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000198 	.word	0x20000198
 800118c:	40015c00 	.word	0x40015c00

08001190 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 8001196:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <MX_USART1_UART_Init+0x5c>)
 8001198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <MX_USART1_UART_Init+0x58>)
 80011d4:	f004 f9d8 	bl	8005588 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011de:	f000 f90d 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001e4 	.word	0x200001e4
 80011ec:	40013800 	.word	0x40013800

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b2b      	ldr	r3, [pc, #172]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a2a      	ldr	r2, [pc, #168]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 800120c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800121e:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a24      	ldr	r2, [pc, #144]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 8001224:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a1e      	ldr	r2, [pc, #120]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001258:	6153      	str	r3, [r2, #20]
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <MX_GPIO_Init+0xc4>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACQ_LED_Pin|POWER_LED_Pin|FF_D_Pin|FF_CLK_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800126c:	4812      	ldr	r0, [pc, #72]	@ (80012b8 <MX_GPIO_Init+0xc8>)
 800126e:	f001 fd9f 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8001272:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	@ (80012bc <MX_GPIO_Init+0xcc>)
 8001288:	f001 fc18 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : ACQ_LED_Pin POWER_LED_Pin FF_D_Pin FF_CLK_Pin */
  GPIO_InitStruct.Pin = ACQ_LED_Pin|POWER_LED_Pin|FF_D_Pin|FF_CLK_Pin;
 800128c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4804      	ldr	r0, [pc, #16]	@ (80012b8 <MX_GPIO_Init+0xc8>)
 80012a6:	f001 fc09 	bl	8002abc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	@ 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800

080012c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d0:	d146      	bne.n	8001360 <HAL_TIM_PeriodElapsedCallback+0xa0>
		//HAL_GPIO_TogglePin(POWER_LED_GPIO_Port, POWER_LED_Pin);
		HAL_ADC_Start(&hadc1);
 80012d2:	482c      	ldr	r0, [pc, #176]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012d4:	f000 fe3e 	bl	8001f54 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 80012d8:	210a      	movs	r1, #10
 80012da:	482a      	ldr	r0, [pc, #168]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012dc:	f000 fed0 	bl	8002080 <HAL_ADC_PollForConversion>
		potentiometer_value = HAL_ADC_GetValue(&hadc1);
 80012e0:	4828      	ldr	r0, [pc, #160]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012e2:	f000 ffe5 	bl	80022b0 <HAL_ADC_GetValue>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a27      	ldr	r2, [pc, #156]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012ea:	6013      	str	r3, [r2, #0]
		filtered_potentiometer_value = filtroMediaMovil((uint16_t)(potentiometer_value));
 80012ec:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fbe8 	bl	8000ac8 <filtroMediaMovil>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a24      	ldr	r2, [pc, #144]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012fc:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 80012fe:	4821      	ldr	r0, [pc, #132]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001300:	f000 fe92 	bl	8002028 <HAL_ADC_Stop>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, filtered_potentiometer_value);
 8001304:	4b21      	ldr	r3, [pc, #132]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	4820      	ldr	r0, [pc, #128]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800130e:	f001 fa9c 	bl	800284a <HAL_DAC_SetValue>
		lectura_vda = Read_ADC(&hsdadc1);
 8001312:	4820      	ldr	r0, [pc, #128]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001314:	f000 f852 	bl	80013bc <Read_ADC>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800131e:	801a      	strh	r2, [r3, #0]
		filtered_vda = iir_filter(lectura_vda, num_notch, den_notch, FILTER_ORDER, FILTER_ORDER, x_notch, y_notch);
 8001320:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001322:	8818      	ldrh	r0, [r3, #0]
 8001324:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	2304      	movs	r3, #4
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2304      	movs	r3, #4
 8001332:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001334:	491c      	ldr	r1, [pc, #112]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001336:	f7ff fc07 	bl	8000b48 <iir_filter>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001340:	801a      	strh	r2, [r3, #0]

		// Crear trama de datos

	    uint8_t frame[4];
	    frame[0] = 'A'; // Inicio de trama
 8001342:	2341      	movs	r3, #65	@ 0x41
 8001344:	733b      	strb	r3, [r7, #12]
	    frame[1] = (uint8_t)(filtered_vda & 0xFF); // Byte menos significativo
 8001346:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	737b      	strb	r3, [r7, #13]
	    frame[2] = (uint8_t)((filtered_vda >> 8) & 0xFF); // Byte más significativo
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	b29b      	uxth	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	73bb      	strb	r3, [r7, #14]
	    frame[3] = 'Z'; // Fin de trama
 800135a:	235a      	movs	r3, #90	@ 0x5a
 800135c:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_TogglePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin);
		}

	}

}
 800135e:	e00c      	b.n	800137a <HAL_TIM_PeriodElapsedCallback+0xba>
	}else if (htim->Instance==TIM19){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d107      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0xba>
		if (blink_ACQ_LED == 1){
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d103      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0xba>
			HAL_GPIO_TogglePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin);
 8001372:	2140      	movs	r1, #64	@ 0x40
 8001374:	4810      	ldr	r0, [pc, #64]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001376:	f001 fd33 	bl	8002de0 <HAL_GPIO_TogglePin>
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200000c4 	.word	0x200000c4
 8001388:	20000270 	.word	0x20000270
 800138c:	20000274 	.word	0x20000274
 8001390:	200000f4 	.word	0x200000f4
 8001394:	20000108 	.word	0x20000108
 8001398:	20000278 	.word	0x20000278
 800139c:	20000058 	.word	0x20000058
 80013a0:	20000030 	.word	0x20000030
 80013a4:	08006a00 	.word	0x08006a00
 80013a8:	080069d8 	.word	0x080069d8
 80013ac:	2000027a 	.word	0x2000027a
 80013b0:	40015c00 	.word	0x40015c00
 80013b4:	2000026d 	.word	0x2000026d
 80013b8:	48000400 	.word	0x48000400

080013bc <Read_ADC>:


uint16_t Read_ADC(SDADC_HandleTypeDef *hsdadc) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
    int16_t adcVal;
    uint32_t channel;
    uint16_t vin;

    // Inicia la conversión inyectada
    HAL_SDADC_InjectedStart(hsdadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f003 fa93 	bl	80048f0 <HAL_SDADC_InjectedStart>

    // Espera a que la conversión se complete
    HAL_SDADC_PollForInjectedConversion(hsdadc, HAL_MAX_DELAY);
 80013ca:	f04f 31ff 	mov.w	r1, #4294967295
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f003 faa9 	bl	8004926 <HAL_SDADC_PollForInjectedConversion>

    // Obtiene el valor del ADC
    adcVal = HAL_SDADC_InjectedGetValue(hsdadc, &channel);
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4619      	mov	r1, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f003 fb2b 	bl	8004a36 <HAL_SDADC_InjectedGetValue>
 80013e0:	4603      	mov	r3, r0
 80013e2:	81fb      	strh	r3, [r7, #14]

    // Detiene la conversión
    HAL_SDADC_InjectedStop(hsdadc);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f003 fb0b 	bl	8004a00 <HAL_SDADC_InjectedStop>

    // Calcula el voltaje en base al valor del ADC
    vin = (adcVal + 32768);
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80013f0:	81bb      	strh	r3, [r7, #12]

    return vin; // Retorna el valor en voltios
 80013f2:	89bb      	ldrh	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <process_command>:
static volatile uint8_t received_byte;
static volatile char rx_buffer[BUFFER_SIZE];
static volatile uint8_t rx_index = 0;
static volatile uint8_t flag = 0;

static void process_command(const char *command) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    if (strcmp(command, "ASTOPZ") == 0) {
 8001410:	4925      	ldr	r1, [pc, #148]	@ (80014a8 <process_command+0xa0>)
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7fe fed8 	bl	80001c8 <strcmp>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d104      	bne.n	8001428 <process_command+0x20>
        state_machine(EVENT_STOP, &current_state);
 800141e:	4923      	ldr	r1, [pc, #140]	@ (80014ac <process_command+0xa4>)
 8001420:	2002      	movs	r0, #2
 8001422:	f000 f8b5 	bl	8001590 <state_machine>
    } else if (strcmp(command, "AACQZ") == 0) {
    	state_machine(EVENT_ACQ, &current_state);
    }else if (strcmp(command, "ARESETZ") == 0) {
        	state_machine(EVENT_RESTART, &current_state);
        }
}
 8001426:	e03a      	b.n	800149e <process_command+0x96>
    } else if (strcmp(command, "ASTARTZ") == 0) {
 8001428:	4921      	ldr	r1, [pc, #132]	@ (80014b0 <process_command+0xa8>)
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7fe fecc 	bl	80001c8 <strcmp>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d104      	bne.n	8001440 <process_command+0x38>
    	state_machine(EVENT_START, &current_state);
 8001436:	491d      	ldr	r1, [pc, #116]	@ (80014ac <process_command+0xa4>)
 8001438:	2001      	movs	r0, #1
 800143a:	f000 f8a9 	bl	8001590 <state_machine>
}
 800143e:	e02e      	b.n	800149e <process_command+0x96>
    } else if (strcmp(command, "AAGCONZ") == 0) {
 8001440:	491c      	ldr	r1, [pc, #112]	@ (80014b4 <process_command+0xac>)
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7fe fec0 	bl	80001c8 <strcmp>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d104      	bne.n	8001458 <process_command+0x50>
    	state_machine(EVENT_AGC_ON, &current_state);
 800144e:	4917      	ldr	r1, [pc, #92]	@ (80014ac <process_command+0xa4>)
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f89d 	bl	8001590 <state_machine>
}
 8001456:	e022      	b.n	800149e <process_command+0x96>
    } else if (strcmp(command, "AAGCOFFZ") == 0) {
 8001458:	4917      	ldr	r1, [pc, #92]	@ (80014b8 <process_command+0xb0>)
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7fe feb4 	bl	80001c8 <strcmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d104      	bne.n	8001470 <process_command+0x68>
    	state_machine(EVENT_AGC_OFF, &current_state);
 8001466:	4911      	ldr	r1, [pc, #68]	@ (80014ac <process_command+0xa4>)
 8001468:	2004      	movs	r0, #4
 800146a:	f000 f891 	bl	8001590 <state_machine>
}
 800146e:	e016      	b.n	800149e <process_command+0x96>
    } else if (strcmp(command, "AACQZ") == 0) {
 8001470:	4912      	ldr	r1, [pc, #72]	@ (80014bc <process_command+0xb4>)
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7fe fea8 	bl	80001c8 <strcmp>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d104      	bne.n	8001488 <process_command+0x80>
    	state_machine(EVENT_ACQ, &current_state);
 800147e:	490b      	ldr	r1, [pc, #44]	@ (80014ac <process_command+0xa4>)
 8001480:	2005      	movs	r0, #5
 8001482:	f000 f885 	bl	8001590 <state_machine>
}
 8001486:	e00a      	b.n	800149e <process_command+0x96>
    }else if (strcmp(command, "ARESETZ") == 0) {
 8001488:	490d      	ldr	r1, [pc, #52]	@ (80014c0 <process_command+0xb8>)
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7fe fe9c 	bl	80001c8 <strcmp>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <process_command+0x96>
        	state_machine(EVENT_RESTART, &current_state);
 8001496:	4905      	ldr	r1, [pc, #20]	@ (80014ac <process_command+0xa4>)
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f879 	bl	8001590 <state_machine>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	080069a0 	.word	0x080069a0
 80014ac:	20000296 	.word	0x20000296
 80014b0:	080069a8 	.word	0x080069a8
 80014b4:	080069b0 	.word	0x080069b0
 80014b8:	080069b8 	.word	0x080069b8
 80014bc:	080069c4 	.word	0x080069c4
 80014c0:	080069cc 	.word	0x080069cc

080014c4 <SerialHandler_Init>:

void SerialHandler_Init(UART_HandleTypeDef *huart) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
    uart_handle = huart;
 80014cc:	4a06      	ldr	r2, [pc, #24]	@ (80014e8 <SerialHandler_Init+0x24>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(uart_handle, &received_byte, 1);  // Habilita la recepción por interrupción
 80014d2:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <SerialHandler_Init+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2201      	movs	r2, #1
 80014d8:	4904      	ldr	r1, [pc, #16]	@ (80014ec <SerialHandler_Init+0x28>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 f8a2 	bl	8005624 <HAL_UART_Receive_IT>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000027c 	.word	0x2000027c
 80014ec:	20000280 	.word	0x20000280

080014f0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    if (huart == uart_handle) {
 80014f8:	4b20      	ldr	r3, [pc, #128]	@ (800157c <HAL_UART_RxCpltCallback+0x8c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d138      	bne.n	8001574 <HAL_UART_RxCpltCallback+0x84>
        if (received_byte == 0x7F) {
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <HAL_UART_RxCpltCallback+0x90>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b7f      	cmp	r3, #127	@ 0x7f
 800150a:	d103      	bne.n	8001514 <HAL_UART_RxCpltCallback+0x24>
            flag = 1;
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <HAL_UART_RxCpltCallback+0x94>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e028      	b.n	8001566 <HAL_UART_RxCpltCallback+0x76>
        } else if (received_byte == '\n') {
 8001514:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <HAL_UART_RxCpltCallback+0x90>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d10d      	bne.n	800153a <HAL_UART_RxCpltCallback+0x4a>
            rx_buffer[rx_index] = '\0'; // Termina la cadena
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <HAL_UART_RxCpltCallback+0x98>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4b19      	ldr	r3, [pc, #100]	@ (800158c <HAL_UART_RxCpltCallback+0x9c>)
 8001528:	2100      	movs	r1, #0
 800152a:	5499      	strb	r1, [r3, r2]
            process_command((const char *)rx_buffer);
 800152c:	4817      	ldr	r0, [pc, #92]	@ (800158c <HAL_UART_RxCpltCallback+0x9c>)
 800152e:	f7ff ff6b 	bl	8001408 <process_command>
            rx_index = 0; // Reinicia el índice
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_UART_RxCpltCallback+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e015      	b.n	8001566 <HAL_UART_RxCpltCallback+0x76>
        } else if (rx_index < BUFFER_SIZE - 1) {
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <HAL_UART_RxCpltCallback+0x98>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b0e      	cmp	r3, #14
 8001542:	d80d      	bhi.n	8001560 <HAL_UART_RxCpltCallback+0x70>
            rx_buffer[rx_index++] = received_byte;
 8001544:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_UART_RxCpltCallback+0x98>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	b2d1      	uxtb	r1, r2
 800154e:	4a0e      	ldr	r2, [pc, #56]	@ (8001588 <HAL_UART_RxCpltCallback+0x98>)
 8001550:	7011      	strb	r1, [r2, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_UART_RxCpltCallback+0x90>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2d9      	uxtb	r1, r3
 800155a:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <HAL_UART_RxCpltCallback+0x9c>)
 800155c:	5499      	strb	r1, [r3, r2]
 800155e:	e002      	b.n	8001566 <HAL_UART_RxCpltCallback+0x76>
        } else {
            rx_index = 0; // Resetea en caso de desbordamiento
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <HAL_UART_RxCpltCallback+0x98>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(uart_handle, (uint8_t *)&received_byte, 1);
 8001566:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_UART_RxCpltCallback+0x8c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2201      	movs	r2, #1
 800156c:	4904      	ldr	r1, [pc, #16]	@ (8001580 <HAL_UART_RxCpltCallback+0x90>)
 800156e:	4618      	mov	r0, r3
 8001570:	f004 f858 	bl	8005624 <HAL_UART_Receive_IT>
    }
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000027c 	.word	0x2000027c
 8001580:	20000280 	.word	0x20000280
 8001584:	20000295 	.word	0x20000295
 8001588:	20000294 	.word	0x20000294
 800158c:	20000284 	.word	0x20000284

08001590 <state_machine>:
#include "state_machine.h"
#include "main.h"

state_type current_state = STATE_STANDBY_MANUAL;

int8_t state_machine(event_type event, state_type* state) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]

	int8_t ret = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]

	 switch (*state) {
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	f200 8164 	bhi.w	8001872 <state_machine+0x2e2>
 80015aa:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <state_machine+0x20>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015c9 	.word	0x080015c9
 80015b4:	08001631 	.word	0x08001631
 80015b8:	08001697 	.word	0x08001697
 80015bc:	0800171b 	.word	0x0800171b
 80015c0:	08001803 	.word	0x08001803
 80015c4:	08001795 	.word	0x08001795
	        case STATE_STANDBY_MANUAL:
	            switch (event) {
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	f200 8153 	bhi.w	8001876 <state_machine+0x2e6>
 80015d0:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <state_machine+0x48>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	080015f1 	.word	0x080015f1
 80015dc:	08001609 	.word	0x08001609
 80015e0:	08001617 	.word	0x08001617
 80015e4:	0800161d 	.word	0x0800161d
 80015e8:	08001623 	.word	0x08001623
 80015ec:	08001629 	.word	0x08001629
	            	case EVENT_RESTART:
	            		*state = STATE_STANDBY_MANUAL;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2140      	movs	r1, #64	@ 0x40
 80015fa:	48a7      	ldr	r0, [pc, #668]	@ (8001898 <state_machine+0x308>)
 80015fc:	f001 fbd8 	bl	8002db0 <HAL_GPIO_WritePin>
	                    blink_ACQ_LED = 0;
 8001600:	4ba6      	ldr	r3, [pc, #664]	@ (800189c <state_machine+0x30c>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
	            		break;
 8001606:	e012      	b.n	800162e <state_machine+0x9e>
	                case EVENT_START:
	                    *state = STATE_MANUAL_OPERATION;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2202      	movs	r2, #2
 800160c:	701a      	strb	r2, [r3, #0]
	                    blink_ACQ_LED = 1;
 800160e:	4ba3      	ldr	r3, [pc, #652]	@ (800189c <state_machine+0x30c>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
	                    break;
 8001614:	e00b      	b.n	800162e <state_machine+0x9e>
	                case EVENT_STOP:
	                	ret = -1;
 8001616:	23ff      	movs	r3, #255	@ 0xff
 8001618:	73fb      	strb	r3, [r7, #15]
	                	break;
 800161a:	e008      	b.n	800162e <state_machine+0x9e>
	                case EVENT_AGC_ON:
	                	ret = -1;
 800161c:	23ff      	movs	r3, #255	@ 0xff
 800161e:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001620:	e005      	b.n	800162e <state_machine+0x9e>
	                case EVENT_AGC_OFF:
	                	ret = -1;
 8001622:	23ff      	movs	r3, #255	@ 0xff
 8001624:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001626:	e002      	b.n	800162e <state_machine+0x9e>
	                case EVENT_ACQ:
	                	ret = -1;
 8001628:	23ff      	movs	r3, #255	@ 0xff
 800162a:	73fb      	strb	r3, [r7, #15]
	                    break;
 800162c:	bf00      	nop
	            }
	            break;
 800162e:	e122      	b.n	8001876 <state_machine+0x2e6>

		        case STATE_STANDBY_AUTO:
		            switch (event) {
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b05      	cmp	r3, #5
 8001634:	f200 8121 	bhi.w	800187a <state_machine+0x2ea>
 8001638:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <state_machine+0xb0>)
 800163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163e:	bf00      	nop
 8001640:	08001659 	.word	0x08001659
 8001644:	0800166f 	.word	0x0800166f
 8001648:	0800167d 	.word	0x0800167d
 800164c:	08001683 	.word	0x08001683
 8001650:	08001689 	.word	0x08001689
 8001654:	0800168f 	.word	0x0800168f
						case EVENT_RESTART:
							*state = STATE_STANDBY_MANUAL;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
		                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2140      	movs	r1, #64	@ 0x40
 8001662:	488d      	ldr	r0, [pc, #564]	@ (8001898 <state_machine+0x308>)
 8001664:	f001 fba4 	bl	8002db0 <HAL_GPIO_WritePin>
		                    blink_ACQ_LED = 0;
 8001668:	4b8c      	ldr	r3, [pc, #560]	@ (800189c <state_machine+0x30c>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
		                case EVENT_START:
		                    *state = STATE_AUTOMATIC_OPERATION;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2203      	movs	r2, #3
 8001672:	701a      	strb	r2, [r3, #0]
		                    blink_ACQ_LED = 1;
 8001674:	4b89      	ldr	r3, [pc, #548]	@ (800189c <state_machine+0x30c>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
		                    break;
 800167a:	e00b      	b.n	8001694 <state_machine+0x104>
		                case EVENT_STOP:
		                	ret = -1;
 800167c:	23ff      	movs	r3, #255	@ 0xff
 800167e:	73fb      	strb	r3, [r7, #15]
		                	break;
 8001680:	e008      	b.n	8001694 <state_machine+0x104>
		                case EVENT_AGC_ON:
		                	ret = -1;
 8001682:	23ff      	movs	r3, #255	@ 0xff
 8001684:	73fb      	strb	r3, [r7, #15]
		                	break;
 8001686:	e005      	b.n	8001694 <state_machine+0x104>
		                case EVENT_AGC_OFF:
		                	ret = -1;
 8001688:	23ff      	movs	r3, #255	@ 0xff
 800168a:	73fb      	strb	r3, [r7, #15]
		                	break;
 800168c:	e002      	b.n	8001694 <state_machine+0x104>
		                case EVENT_ACQ:
		                	ret = -1;
 800168e:	23ff      	movs	r3, #255	@ 0xff
 8001690:	73fb      	strb	r3, [r7, #15]
		                    break;
 8001692:	bf00      	nop
		            }
		            break;
 8001694:	e0f1      	b.n	800187a <state_machine+0x2ea>

	        case STATE_MANUAL_OPERATION:
	            switch (event) {
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b05      	cmp	r3, #5
 800169a:	f200 80f0 	bhi.w	800187e <state_machine+0x2ee>
 800169e:	a201      	add	r2, pc, #4	@ (adr r2, 80016a4 <state_machine+0x114>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	080016bd 	.word	0x080016bd
 80016a8:	08001713 	.word	0x08001713
 80016ac:	080016d5 	.word	0x080016d5
 80016b0:	080016ed 	.word	0x080016ed
 80016b4:	080016f5 	.word	0x080016f5
 80016b8:	080016fb 	.word	0x080016fb
	            	case EVENT_RESTART:
	            	    *state = STATE_STANDBY_MANUAL;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2140      	movs	r1, #64	@ 0x40
 80016c6:	4874      	ldr	r0, [pc, #464]	@ (8001898 <state_machine+0x308>)
 80016c8:	f001 fb72 	bl	8002db0 <HAL_GPIO_WritePin>
	                    blink_ACQ_LED = 0;
 80016cc:	4b73      	ldr	r3, [pc, #460]	@ (800189c <state_machine+0x30c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
	            	    break;
 80016d2:	e021      	b.n	8001718 <state_machine+0x188>
	                case EVENT_STOP:
	                    *state = STATE_STANDBY_MANUAL;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2140      	movs	r1, #64	@ 0x40
 80016de:	486e      	ldr	r0, [pc, #440]	@ (8001898 <state_machine+0x308>)
 80016e0:	f001 fb66 	bl	8002db0 <HAL_GPIO_WritePin>
	                    blink_ACQ_LED = 0;
 80016e4:	4b6d      	ldr	r3, [pc, #436]	@ (800189c <state_machine+0x30c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
	                    break;
 80016ea:	e015      	b.n	8001718 <state_machine+0x188>
	                case EVENT_AGC_ON:
	                    *state = STATE_AUTOMATIC_OPERATION;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2203      	movs	r2, #3
 80016f0:	701a      	strb	r2, [r3, #0]
	                    break;
 80016f2:	e011      	b.n	8001718 <state_machine+0x188>
	                case EVENT_AGC_OFF:
	                	ret = -1;
 80016f4:	23ff      	movs	r3, #255	@ 0xff
 80016f6:	73fb      	strb	r3, [r7, #15]
	                	break;
 80016f8:	e00e      	b.n	8001718 <state_machine+0x188>
	                case EVENT_ACQ:
	                    *state = STATE_ACQUIRING_MANUAL;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2205      	movs	r2, #5
 80016fe:	701a      	strb	r2, [r3, #0]
	                    blink_ACQ_LED = 0;
 8001700:	4b66      	ldr	r3, [pc, #408]	@ (800189c <state_machine+0x30c>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 1);
 8001706:	2201      	movs	r2, #1
 8001708:	2140      	movs	r1, #64	@ 0x40
 800170a:	4863      	ldr	r0, [pc, #396]	@ (8001898 <state_machine+0x308>)
 800170c:	f001 fb50 	bl	8002db0 <HAL_GPIO_WritePin>
	                    break;
 8001710:	e002      	b.n	8001718 <state_machine+0x188>
	                case EVENT_START:
	                	ret = -1;
 8001712:	23ff      	movs	r3, #255	@ 0xff
 8001714:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001716:	bf00      	nop
	            }
	            break;
 8001718:	e0b1      	b.n	800187e <state_machine+0x2ee>

	        case STATE_AUTOMATIC_OPERATION:
	            switch (event) {
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b05      	cmp	r3, #5
 800171e:	f200 80b0 	bhi.w	8001882 <state_machine+0x2f2>
 8001722:	a201      	add	r2, pc, #4	@ (adr r2, 8001728 <state_machine+0x198>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	08001741 	.word	0x08001741
 800172c:	0800177f 	.word	0x0800177f
 8001730:	08001759 	.word	0x08001759
 8001734:	08001785 	.word	0x08001785
 8001738:	0800178b 	.word	0x0800178b
 800173c:	08001767 	.word	0x08001767
					case EVENT_RESTART:
						*state = STATE_STANDBY_MANUAL;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2140      	movs	r1, #64	@ 0x40
 800174a:	4853      	ldr	r0, [pc, #332]	@ (8001898 <state_machine+0x308>)
 800174c:	f001 fb30 	bl	8002db0 <HAL_GPIO_WritePin>
	                    blink_ACQ_LED = 0;
 8001750:	4b52      	ldr	r3, [pc, #328]	@ (800189c <state_machine+0x30c>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
						break;
 8001756:	e01c      	b.n	8001792 <state_machine+0x202>
	                case EVENT_STOP:
	                    *state = STATE_STANDBY_AUTO;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
	                    blink_ACQ_LED = 0;
 800175e:	4b4f      	ldr	r3, [pc, #316]	@ (800189c <state_machine+0x30c>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
	                    break;
 8001764:	e015      	b.n	8001792 <state_machine+0x202>
	                case EVENT_ACQ:
	                    *state = STATE_ACQUIRING_AUTO;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2204      	movs	r2, #4
 800176a:	701a      	strb	r2, [r3, #0]
	                    blink_ACQ_LED = 0;
 800176c:	4b4b      	ldr	r3, [pc, #300]	@ (800189c <state_machine+0x30c>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	2140      	movs	r1, #64	@ 0x40
 8001776:	4848      	ldr	r0, [pc, #288]	@ (8001898 <state_machine+0x308>)
 8001778:	f001 fb1a 	bl	8002db0 <HAL_GPIO_WritePin>
	                    break;
 800177c:	e009      	b.n	8001792 <state_machine+0x202>
	                case EVENT_START:
	                	ret = -1;
 800177e:	23ff      	movs	r3, #255	@ 0xff
 8001780:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001782:	e006      	b.n	8001792 <state_machine+0x202>
	                case EVENT_AGC_ON:
	                	ret = -1;
 8001784:	23ff      	movs	r3, #255	@ 0xff
 8001786:	73fb      	strb	r3, [r7, #15]
	                    break;
 8001788:	e003      	b.n	8001792 <state_machine+0x202>
	                case EVENT_AGC_OFF:
	                	*state = STATE_MANUAL_OPERATION;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2202      	movs	r2, #2
 800178e:	701a      	strb	r2, [r3, #0]
	                	break;
 8001790:	bf00      	nop
	            }
	            break;
 8001792:	e076      	b.n	8001882 <state_machine+0x2f2>

	        case STATE_ACQUIRING_MANUAL:
	            switch (event) {
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d875      	bhi.n	8001886 <state_machine+0x2f6>
 800179a:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <state_machine+0x210>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b9 	.word	0x080017b9
 80017a4:	080017e9 	.word	0x080017e9
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	080017ef 	.word	0x080017ef
 80017b0:	080017f5 	.word	0x080017f5
 80017b4:	080017fb 	.word	0x080017fb
					case EVENT_RESTART:
						*state = STATE_STANDBY_MANUAL;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2140      	movs	r1, #64	@ 0x40
 80017c2:	4835      	ldr	r0, [pc, #212]	@ (8001898 <state_machine+0x308>)
 80017c4:	f001 faf4 	bl	8002db0 <HAL_GPIO_WritePin>
	                    blink_ACQ_LED = 0;
 80017c8:	4b34      	ldr	r3, [pc, #208]	@ (800189c <state_machine+0x30c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
						break;
 80017ce:	e017      	b.n	8001800 <state_machine+0x270>
	                case EVENT_STOP:
	                    *state = STATE_MANUAL_OPERATION;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
	                    blink_ACQ_LED = 1;
 80017d6:	4b31      	ldr	r3, [pc, #196]	@ (800189c <state_machine+0x30c>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2140      	movs	r1, #64	@ 0x40
 80017e0:	482d      	ldr	r0, [pc, #180]	@ (8001898 <state_machine+0x308>)
 80017e2:	f001 fae5 	bl	8002db0 <HAL_GPIO_WritePin>
	                    break;
 80017e6:	e00b      	b.n	8001800 <state_machine+0x270>
	                case EVENT_START:
	                	ret = -1;
 80017e8:	23ff      	movs	r3, #255	@ 0xff
 80017ea:	73fb      	strb	r3, [r7, #15]
	                	break;
 80017ec:	e008      	b.n	8001800 <state_machine+0x270>
	                case EVENT_AGC_ON:
	                	ret = -1;
 80017ee:	23ff      	movs	r3, #255	@ 0xff
 80017f0:	73fb      	strb	r3, [r7, #15]
	                	break;
 80017f2:	e005      	b.n	8001800 <state_machine+0x270>
	                case EVENT_AGC_OFF:
	                	ret = -1;
 80017f4:	23ff      	movs	r3, #255	@ 0xff
 80017f6:	73fb      	strb	r3, [r7, #15]
	                	break;
 80017f8:	e002      	b.n	8001800 <state_machine+0x270>
	                case EVENT_ACQ:
	                	ret = -1;
 80017fa:	23ff      	movs	r3, #255	@ 0xff
 80017fc:	73fb      	strb	r3, [r7, #15]
	                    break;
 80017fe:	bf00      	nop
	            }
	            break;
 8001800:	e041      	b.n	8001886 <state_machine+0x2f6>

		        case STATE_ACQUIRING_AUTO:
		            switch (event) {
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d840      	bhi.n	800188a <state_machine+0x2fa>
 8001808:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <state_machine+0x280>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	08001829 	.word	0x08001829
 8001814:	08001859 	.word	0x08001859
 8001818:	08001841 	.word	0x08001841
 800181c:	0800185f 	.word	0x0800185f
 8001820:	08001865 	.word	0x08001865
 8001824:	0800186b 	.word	0x0800186b
						case EVENT_RESTART:
							*state = STATE_STANDBY_MANUAL;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
		                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2140      	movs	r1, #64	@ 0x40
 8001832:	4819      	ldr	r0, [pc, #100]	@ (8001898 <state_machine+0x308>)
 8001834:	f001 fabc 	bl	8002db0 <HAL_GPIO_WritePin>
		                    blink_ACQ_LED = 0;
 8001838:	4b18      	ldr	r3, [pc, #96]	@ (800189c <state_machine+0x30c>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
							break;
 800183e:	e017      	b.n	8001870 <state_machine+0x2e0>
		                case EVENT_STOP:
		                    *state = STATE_AUTOMATIC_OPERATION;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2203      	movs	r2, #3
 8001844:	701a      	strb	r2, [r3, #0]
		                    blink_ACQ_LED = 1;
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <state_machine+0x30c>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
		                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2140      	movs	r1, #64	@ 0x40
 8001850:	4811      	ldr	r0, [pc, #68]	@ (8001898 <state_machine+0x308>)
 8001852:	f001 faad 	bl	8002db0 <HAL_GPIO_WritePin>
		                    break;
 8001856:	e00b      	b.n	8001870 <state_machine+0x2e0>
		                case EVENT_START:
		                	ret = -1;
 8001858:	23ff      	movs	r3, #255	@ 0xff
 800185a:	73fb      	strb	r3, [r7, #15]
		                	break;
 800185c:	e008      	b.n	8001870 <state_machine+0x2e0>
		                case EVENT_AGC_ON:
		                	ret = -1;
 800185e:	23ff      	movs	r3, #255	@ 0xff
 8001860:	73fb      	strb	r3, [r7, #15]
		                	break;
 8001862:	e005      	b.n	8001870 <state_machine+0x2e0>
		                case EVENT_AGC_OFF:
		                	ret = -1;
 8001864:	23ff      	movs	r3, #255	@ 0xff
 8001866:	73fb      	strb	r3, [r7, #15]
		                	break;
 8001868:	e002      	b.n	8001870 <state_machine+0x2e0>
		                case EVENT_ACQ:
		                	ret = -1;
 800186a:	23ff      	movs	r3, #255	@ 0xff
 800186c:	73fb      	strb	r3, [r7, #15]
		                    break;
 800186e:	bf00      	nop
		            }
		            break;
 8001870:	e00b      	b.n	800188a <state_machine+0x2fa>



	        default:
	            // TODO: Manejo de estado desconocido (si es necesario)
	            break;
 8001872:	bf00      	nop
 8001874:	e00a      	b.n	800188c <state_machine+0x2fc>
	            break;
 8001876:	bf00      	nop
 8001878:	e008      	b.n	800188c <state_machine+0x2fc>
		            break;
 800187a:	bf00      	nop
 800187c:	e006      	b.n	800188c <state_machine+0x2fc>
	            break;
 800187e:	bf00      	nop
 8001880:	e004      	b.n	800188c <state_machine+0x2fc>
	            break;
 8001882:	bf00      	nop
 8001884:	e002      	b.n	800188c <state_machine+0x2fc>
	            break;
 8001886:	bf00      	nop
 8001888:	e000      	b.n	800188c <state_machine+0x2fc>
		            break;
 800188a:	bf00      	nop
	    }
	 return ret;
 800188c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	48000400 	.word	0x48000400
 800189c:	2000026d 	.word	0x2000026d

080018a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <HAL_MspInit+0x44>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	4a0e      	ldr	r2, [pc, #56]	@ (80018e4 <HAL_MspInit+0x44>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6193      	str	r3, [r2, #24]
 80018b2:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <HAL_MspInit+0x44>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <HAL_MspInit+0x44>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a08      	ldr	r2, [pc, #32]	@ (80018e4 <HAL_MspInit+0x44>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	61d3      	str	r3, [r2, #28]
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_MspInit+0x44>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000

080018e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a15      	ldr	r2, [pc, #84]	@ (800195c <HAL_ADC_MspInit+0x74>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d123      	bne.n	8001952 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_ADC_MspInit+0x78>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4a14      	ldr	r2, [pc, #80]	@ (8001960 <HAL_ADC_MspInit+0x78>)
 8001910:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001914:	6193      	str	r3, [r2, #24]
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_ADC_MspInit+0x78>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <HAL_ADC_MspInit+0x78>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <HAL_ADC_MspInit+0x78>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800192c:	6153      	str	r3, [r2, #20]
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <HAL_ADC_MspInit+0x78>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800193a:	2301      	movs	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193e:	2303      	movs	r3, #3
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	@ (8001964 <HAL_ADC_MspInit+0x7c>)
 800194e:	f001 f8b5 	bl	8002abc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	@ 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40012400 	.word	0x40012400
 8001960:	40021000 	.word	0x40021000
 8001964:	48000400 	.word	0x48000400

08001968 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a15      	ldr	r2, [pc, #84]	@ (80019dc <HAL_DAC_MspInit+0x74>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d124      	bne.n	80019d4 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC2_MspInit 0 */

    /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_DAC_MspInit+0x78>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <HAL_DAC_MspInit+0x78>)
 8001990:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_DAC_MspInit+0x78>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <HAL_DAC_MspInit+0x78>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	4a0e      	ldr	r2, [pc, #56]	@ (80019e0 <HAL_DAC_MspInit+0x78>)
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ac:	6153      	str	r3, [r2, #20]
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_DAC_MspInit+0x78>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019ba:	2340      	movs	r3, #64	@ 0x40
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019be:	2303      	movs	r3, #3
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d0:	f001 f874 	bl	8002abc <HAL_GPIO_Init>

    /* USER CODE END DAC2_MspInit 1 */

  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	@ 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40009800 	.word	0x40009800
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_SDADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsdadc: SDADC handle pointer
  * @retval None
  */
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a15      	ldr	r2, [pc, #84]	@ (8001a58 <HAL_SDADC_MspInit+0x74>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d123      	bne.n	8001a4e <HAL_SDADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN SDADC1_MspInit 0 */

    /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_SDADC_MspInit+0x78>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	4a14      	ldr	r2, [pc, #80]	@ (8001a5c <HAL_SDADC_MspInit+0x78>)
 8001a0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a10:	6193      	str	r3, [r2, #24]
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_SDADC_MspInit+0x78>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_SDADC_MspInit+0x78>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	4a0e      	ldr	r2, [pc, #56]	@ (8001a5c <HAL_SDADC_MspInit+0x78>)
 8001a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a28:	6153      	str	r3, [r2, #20]
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <HAL_SDADC_MspInit+0x78>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**SDADC1 GPIO Configuration
    PB1     ------> SDADC1_AIN5P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a36:	2302      	movs	r3, #2
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <HAL_SDADC_MspInit+0x7c>)
 8001a4a:	f001 f837 	bl	8002abc <HAL_GPIO_Init>

    /* USER CODE END SDADC1_MspInit 1 */

  }

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	@ 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40016000 	.word	0x40016000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	48000400 	.word	0x48000400

08001a64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a74:	d114      	bne.n	8001aa0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_TIM_Base_MspInit+0x78>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a18      	ldr	r2, [pc, #96]	@ (8001adc <HAL_TIM_Base_MspInit+0x78>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	61d3      	str	r3, [r2, #28]
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <HAL_TIM_Base_MspInit+0x78>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	201c      	movs	r0, #28
 8001a94:	f000 fe81 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a98:	201c      	movs	r0, #28
 8001a9a:	f000 fe9a 	bl	80027d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM19_MspInit 1 */

    /* USER CODE END TIM19_MspInit 1 */
  }

}
 8001a9e:	e018      	b.n	8001ad2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM19)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d113      	bne.n	8001ad2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM19_CLK_ENABLE();
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_TIM_Base_MspInit+0x78>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <HAL_TIM_Base_MspInit+0x78>)
 8001ab0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ab4:	6193      	str	r3, [r2, #24]
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_TIM_Base_MspInit+0x78>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM19_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	204e      	movs	r0, #78	@ 0x4e
 8001ac8:	f000 fe67 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM19_IRQn);
 8001acc:	204e      	movs	r0, #78	@ 0x4e
 8001ace:	f000 fe80 	bl	80027d2 <HAL_NVIC_EnableIRQ>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40015c00 	.word	0x40015c00

08001ae4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1c      	ldr	r2, [pc, #112]	@ (8001b74 <HAL_UART_MspInit+0x90>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d131      	bne.n	8001b6a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <HAL_UART_MspInit+0x94>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b78 <HAL_UART_MspInit+0x94>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b10:	6193      	str	r3, [r2, #24]
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_UART_MspInit+0x94>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_UART_MspInit+0x94>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4a15      	ldr	r2, [pc, #84]	@ (8001b78 <HAL_UART_MspInit+0x94>)
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b28:	6153      	str	r3, [r2, #20]
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <HAL_UART_MspInit+0x94>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b56:	f000 ffb1 	bl	8002abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2025      	movs	r0, #37	@ 0x25
 8001b60:	f000 fe1b 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b64:	2025      	movs	r0, #37	@ 0x25
 8001b66:	f000 fe34 	bl	80027d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	@ 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40013800 	.word	0x40013800
 8001b78:	40021000 	.word	0x40021000

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <NMI_Handler+0x4>

08001b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <MemManage_Handler+0x4>

08001b94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <BusFault_Handler+0x4>

08001b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <UsageFault_Handler+0x4>

08001ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd2:	f000 f8a3 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <TIM2_IRQHandler+0x10>)
 8001be2:	f003 f929 	bl	8004e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000014c 	.word	0x2000014c

08001bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <USART1_IRQHandler+0x10>)
 8001bf6:	f003 fd59 	bl	80056ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200001e4 	.word	0x200001e4

08001c04 <TIM19_IRQHandler>:

/**
  * @brief This function handles TIM19 global interrupt.
  */
void TIM19_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM19_IRQn 0 */

  /* USER CODE END TIM19_IRQn 0 */
  HAL_TIM_IRQHandler(&htim19);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <TIM19_IRQHandler+0x10>)
 8001c0a:	f003 f915 	bl	8004e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM19_IRQn 1 */

  /* USER CODE END TIM19_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000198 	.word	0x20000198

08001c18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <SystemInit+0x20>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c22:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <SystemInit+0x20>)
 8001c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c74 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c40:	f7ff ffea 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c46:	490d      	ldr	r1, [pc, #52]	@ (8001c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c48:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <LoopForever+0xe>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c88 <LoopForever+0x16>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f004 fe69 	bl	8006940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c6e:	f7ff f869 	bl	8000d44 <main>

08001c72 <LoopForever>:

LoopForever:
    b LoopForever
 8001c72:	e7fe      	b.n	8001c72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c74:	20006000 	.word	0x20006000
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c80:	08006a70 	.word	0x08006a70
  ldr r2, =_sbss
 8001c84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c88:	2000029c 	.word	0x2000029c

08001c8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC1_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <HAL_Init+0x28>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a07      	ldr	r2, [pc, #28]	@ (8001cb8 <HAL_Init+0x28>)
 8001c9a:	f043 0310 	orr.w	r3, r3, #16
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 fd6f 	bl	8002784 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f000 f808 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cac:	f7ff fdf8 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40022000 	.word	0x40022000

08001cbc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_InitTick+0x54>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_InitTick+0x58>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fd87 	bl	80027ee <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d80a      	bhi.n	8001d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f000 fd4f 	bl	800279a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	@ (8001d18 <HAL_InitTick+0x5c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000008 	.word	0x20000008
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_IncTick+0x20>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_IncTick+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <HAL_IncTick+0x24>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000298 	.word	0x20000298

08001d44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d48:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <HAL_GetTick+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000298 	.word	0x20000298

08001d5c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff ffee 	bl	8001d44 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d82:	bf00      	nop
 8001d84:	f7ff ffde 	bl	8001d44 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008

08001da4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0be      	b.n	8001f44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fd80 	bl	80018e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fbb9 	bl	8002560 <ADC_ConversionStop_Disable>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 8099 	bne.w	8001f32 <HAL_ADC_Init+0x18e>
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 8095 	bne.w	8001f32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e10:	f023 0302 	bic.w	r3, r3, #2
 8001e14:	f043 0202 	orr.w	r2, r3, #2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8001e24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7b1b      	ldrb	r3, [r3, #12]
 8001e2a:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8001e2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e3c:	d003      	beq.n	8001e46 <HAL_ADC_Init+0xa2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_ADC_Init+0xa8>
 8001e46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4a:	e000      	b.n	8001e4e <HAL_ADC_Init+0xaa>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7d1b      	ldrb	r3, [r3, #20]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d119      	bne.n	8001e90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7b1b      	ldrb	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e00b      	b.n	8001e90 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <HAL_ADC_Init+0x1a8>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ec0:	d003      	beq.n	8001eca <HAL_ADC_Init+0x126>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d104      	bne.n	8001ed4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	051b      	lsls	r3, r3, #20
 8001ed2:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eda:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HAL_ADC_Init+0x1ac>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d10b      	bne.n	8001f10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f0e:	e018      	b.n	8001f42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f14:	f023 0312 	bic.w	r3, r3, #18
 8001f18:	f043 0210 	orr.w	r2, r3, #16
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f30:	e007      	b.n	8001f42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	f043 0210 	orr.w	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	ffe1f7fd 	.word	0xffe1f7fd
 8001f50:	ff1f0efe 	.word	0xff1f0efe

08001f54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Start+0x1a>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e058      	b.n	8002020 <HAL_ADC_Start+0xcc>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa98 	bl	80024ac <ADC_Enable>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d14b      	bne.n	800201e <HAL_ADC_Start+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) */
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fb0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fca:	f023 0206 	bic.w	r2, r3, #6
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fd2:	e002      	b.n	8001fda <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f06f 0202 	mvn.w	r2, #2
 8001fea:	601a      	str	r2, [r3, #0]
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ff6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ffa:	d108      	bne.n	800200e <HAL_ADC_Start+0xba>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e007      	b.n	800201e <HAL_ADC_Start+0xca>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800201c:	609a      	str	r2, [r3, #8]
    }
  }

  /* Return function status */
  return tmp_hal_status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Stop+0x1a>
 800203e:	2302      	movs	r3, #2
 8002040:	e01a      	b.n	8002078 <HAL_ADC_Stop+0x50>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa88 	bl	8002560 <ADC_ConversionStop_Disable>
 8002050:	4603      	mov	r3, r0
 8002052:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  
  /* Variables for polling in case of scan mode enabled */
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a0:	d10b      	bne.n	80020ba <HAL_ADC_PollForConversion+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	f043 0220 	orr.w	r2, r3, #32
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0e9      	b.n	800228e <HAL_ADC_PollForConversion+0x20e>
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80020ba:	f7ff fe43 	bl	8001d44 <HAL_GetTick>
 80020be:	60f8      	str	r0, [r7, #12]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d131      	bne.n	8002132 <HAL_ADC_PollForConversion+0xb2>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d12a      	bne.n	8002132 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020dc:	e021      	b.n	8002122 <HAL_ADC_PollForConversion+0xa2>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d01d      	beq.n	8002122 <HAL_ADC_PollForConversion+0xa2>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_ADC_PollForConversion+0x7c>
 80020ec:	f7ff fe2a 	bl	8001d44 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d212      	bcs.n	8002122 <HAL_ADC_PollForConversion+0xa2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10b      	bne.n	8002122 <HAL_ADC_PollForConversion+0xa2>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210e:	f043 0204 	orr.w	r2, r3, #4
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0b5      	b.n	800228e <HAL_ADC_PollForConversion+0x20e>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0d6      	beq.n	80020de <HAL_ADC_PollForConversion+0x5e>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002130:	e083      	b.n	800223a <HAL_ADC_PollForConversion+0x1ba>
  {
    /* Replace polling by wait for maximum conversion time */
    /* Calculation of CPU cycles corresponding to ADC conversion cycles.      */
    /* Retrieve ADC clock prescaler and ADC maximum conversion cycles on all  */
    /* channels.                                                              */
    Conversion_Timeout_CPU_cycles_max = ADC_CLOCK_PRESCALER_RANGE() ;
 8002132:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <HAL_ADC_PollForConversion+0x218>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_ADC_PollForConversion+0xd2>
 800213e:	4b56      	ldr	r3, [pc, #344]	@ (8002298 <HAL_ADC_PollForConversion+0x218>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_PollForConversion+0xce>
 800214a:	2302      	movs	r3, #2
 800214c:	e00a      	b.n	8002164 <HAL_ADC_PollForConversion+0xe4>
 800214e:	2320      	movs	r3, #32
 8002150:	e008      	b.n	8002164 <HAL_ADC_PollForConversion+0xe4>
 8002152:	4b51      	ldr	r3, [pc, #324]	@ (8002298 <HAL_ADC_PollForConversion+0x218>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_PollForConversion+0xe2>
 800215e:	2320      	movs	r3, #32
 8002160:	e000      	b.n	8002164 <HAL_ADC_PollForConversion+0xe4>
 8002162:	2380      	movs	r3, #128	@ 0x80
 8002164:	613b      	str	r3, [r7, #16]
    Conversion_Timeout_CPU_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	4b4b      	ldr	r3, [pc, #300]	@ (800229c <HAL_ADC_PollForConversion+0x21c>)
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d118      	bne.n	80021a6 <HAL_ADC_PollForConversion+0x126>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	4b49      	ldr	r3, [pc, #292]	@ (80022a0 <HAL_ADC_PollForConversion+0x220>)
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d111      	bne.n	80021a6 <HAL_ADC_PollForConversion+0x126>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	4b46      	ldr	r3, [pc, #280]	@ (80022a4 <HAL_ADC_PollForConversion+0x224>)
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d108      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x122>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4b44      	ldr	r3, [pc, #272]	@ (80022a8 <HAL_ADC_PollForConversion+0x228>)
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x122>
 800219e:	2314      	movs	r3, #20
 80021a0:	e020      	b.n	80021e4 <HAL_ADC_PollForConversion+0x164>
 80021a2:	2329      	movs	r3, #41	@ 0x29
 80021a4:	e01e      	b.n	80021e4 <HAL_ADC_PollForConversion+0x164>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	4b3d      	ldr	r3, [pc, #244]	@ (80022a4 <HAL_ADC_PollForConversion+0x224>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d106      	bne.n	80021c2 <HAL_ADC_PollForConversion+0x142>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <HAL_ADC_PollForConversion+0x228>)
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <HAL_ADC_PollForConversion+0x15e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	4b38      	ldr	r3, [pc, #224]	@ (80022ac <HAL_ADC_PollForConversion+0x22c>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x162>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	4b35      	ldr	r3, [pc, #212]	@ (80022ac <HAL_ADC_PollForConversion+0x22c>)
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x162>
 80021de:	2354      	movs	r3, #84	@ 0x54
 80021e0:	e000      	b.n	80021e4 <HAL_ADC_PollForConversion+0x164>
 80021e2:	23fc      	movs	r3, #252	@ 0xfc
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	613b      	str	r3, [r7, #16]
    
    /* Poll with maximum conversion time */
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021ec:	e021      	b.n	8002232 <HAL_ADC_PollForConversion+0x1b2>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d01a      	beq.n	800222c <HAL_ADC_PollForConversion+0x1ac>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_ADC_PollForConversion+0x18c>
 80021fc:	f7ff fda2 	bl	8001d44 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d20f      	bcs.n	800222c <HAL_ADC_PollForConversion+0x1ac>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d20b      	bcs.n	800222c <HAL_ADC_PollForConversion+0x1ac>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	f043 0204 	orr.w	r2, r3, #4
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e030      	b.n	800228e <HAL_ADC_PollForConversion+0x20e>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3301      	adds	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	429a      	cmp	r2, r3
 8002238:	d3d9      	bcc.n	80021ee <HAL_ADC_PollForConversion+0x16e>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f06f 0212 	mvn.w	r2, #18
 8002242:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002248:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F37x devices, in case of sequencer enabled                 */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800225a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800225e:	d115      	bne.n	800228c <HAL_ADC_PollForConversion+0x20c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002264:	2b00      	cmp	r3, #0
 8002266:	d111      	bne.n	800228c <HAL_ADC_PollForConversion+0x20c>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <HAL_ADC_PollForConversion+0x20c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002284:	f043 0201 	orr.w	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	24924924 	.word	0x24924924
 80022a0:	00924924 	.word	0x00924924
 80022a4:	12492492 	.word	0x12492492
 80022a8:	00492492 	.word	0x00492492
 80022ac:	00249249 	.word	0x00249249

080022b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x20>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e0d2      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1c6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	d81c      	bhi.n	8002336 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	3b05      	subs	r3, #5
 800230e:	221f      	movs	r2, #31
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	4019      	ands	r1, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	3b05      	subs	r3, #5
 8002328:	fa00 f203 	lsl.w	r2, r0, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	635a      	str	r2, [r3, #52]	@ 0x34
 8002334:	e03c      	b.n	80023b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d81c      	bhi.n	8002378 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	3b23      	subs	r3, #35	@ 0x23
 8002350:	221f      	movs	r2, #31
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	4019      	ands	r1, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	3b23      	subs	r3, #35	@ 0x23
 800236a:	fa00 f203 	lsl.w	r2, r0, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	631a      	str	r2, [r3, #48]	@ 0x30
 8002376:	e01b      	b.n	80023b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	3b41      	subs	r3, #65	@ 0x41
 800238a:	221f      	movs	r2, #31
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	4019      	ands	r1, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	3b41      	subs	r3, #65	@ 0x41
 80023a4:	fa00 f203 	lsl.w	r2, r0, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b0a      	cmp	r3, #10
 80023b6:	d91c      	bls.n	80023f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68d9      	ldr	r1, [r3, #12]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1e      	subs	r3, #30
 80023ca:	2207      	movs	r2, #7
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4019      	ands	r1, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6898      	ldr	r0, [r3, #8]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	3b1e      	subs	r3, #30
 80023e4:	fa00 f203 	lsl.w	r2, r0, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	e019      	b.n	8002426 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6919      	ldr	r1, [r3, #16]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	2207      	movs	r2, #7
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	4019      	ands	r1, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6898      	ldr	r0, [r3, #8]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4413      	add	r3, r2
 800241a:	fa00 f203 	lsl.w	r2, r0, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b10      	cmp	r3, #16
 800242c:	d003      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002432:	2b11      	cmp	r3, #17
 8002434:	d11e      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002444:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b10      	cmp	r3, #16
 800244c:	d11c      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <HAL_ADC_ConfigChannel+0x1d4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a14      	ldr	r2, [pc, #80]	@ (80024a4 <HAL_ADC_ConfigChannel+0x1d8>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	0c9a      	lsrs	r2, r3, #18
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8002464:	e002      	b.n	800246c <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	3b01      	subs	r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f9      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002472:	e009      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b12      	cmp	r3, #18
 800247a:	d105      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 800247c:	4b0a      	ldr	r3, [pc, #40]	@ (80024a8 <HAL_ADC_ConfigChannel+0x1dc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a09      	ldr	r2, [pc, #36]	@ (80024a8 <HAL_ADC_ConfigChannel+0x1dc>)
 8002482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002486:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000000 	.word	0x20000000
 80024a4:	431bde83 	.word	0x431bde83
 80024a8:	40010000 	.word	0x40010000

080024ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d040      	beq.n	800254c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024da:	4b1f      	ldr	r3, [pc, #124]	@ (8002558 <ADC_Enable+0xac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1f      	ldr	r2, [pc, #124]	@ (800255c <ADC_Enable+0xb0>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	0c9b      	lsrs	r3, r3, #18
 80024e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024e8:	e002      	b.n	80024f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024f6:	f7ff fc25 	bl	8001d44 <HAL_GetTick>
 80024fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024fc:	e01f      	b.n	800253e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024fe:	f7ff fc21 	bl	8001d44 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d918      	bls.n	800253e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d011      	beq.n	800253e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251e:	f043 0210 	orr.w	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e007      	b.n	800254e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d1d8      	bne.n	80024fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000
 800255c:	431bde83 	.word	0x431bde83

08002560 <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d12e      	bne.n	80025d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800258a:	f7ff fbdb 	bl	8001d44 <HAL_GetTick>
 800258e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002590:	e01b      	b.n	80025ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002592:	f7ff fbd7 	bl	8001d44 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d914      	bls.n	80025ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d10d      	bne.n	80025ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b2:	f043 0210 	orr.w	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e007      	b.n	80025da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d0dc      	beq.n	8002592 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <__NVIC_SetPriorityGrouping>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <__NVIC_SetPriorityGrouping+0x44>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002600:	4013      	ands	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800260c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002616:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <__NVIC_SetPriorityGrouping+0x44>)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	60d3      	str	r3, [r2, #12]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_GetPriorityGrouping>:
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002630:	4b04      	ldr	r3, [pc, #16]	@ (8002644 <__NVIC_GetPriorityGrouping+0x18>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	f003 0307 	and.w	r3, r3, #7
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_EnableIRQ>:
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	2b00      	cmp	r3, #0
 8002658:	db0b      	blt.n	8002672 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	4907      	ldr	r1, [pc, #28]	@ (8002680 <__NVIC_EnableIRQ+0x38>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	2001      	movs	r0, #1
 800266a:	fa00 f202 	lsl.w	r2, r0, r2
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000e100 	.word	0xe000e100

08002684 <__NVIC_SetPriority>:
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	2b00      	cmp	r3, #0
 8002696:	db0a      	blt.n	80026ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	490c      	ldr	r1, [pc, #48]	@ (80026d0 <__NVIC_SetPriority+0x4c>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	440b      	add	r3, r1
 80026a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026ac:	e00a      	b.n	80026c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4908      	ldr	r1, [pc, #32]	@ (80026d4 <__NVIC_SetPriority+0x50>)
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3b04      	subs	r3, #4
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	440b      	add	r3, r1
 80026c2:	761a      	strb	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000e100 	.word	0xe000e100
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <NVIC_EncodePriority>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	@ 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f1c3 0307 	rsb	r3, r3, #7
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf28      	it	cs
 80026f6:	2304      	movcs	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d902      	bls.n	8002708 <NVIC_EncodePriority+0x30>
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3b03      	subs	r3, #3
 8002706:	e000      	b.n	800270a <NVIC_EncodePriority+0x32>
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002720:	f04f 31ff 	mov.w	r1, #4294967295
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43d9      	mvns	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	4313      	orrs	r3, r2
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	@ 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002750:	d301      	bcc.n	8002756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002756:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <SysTick_Config+0x40>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275e:	210f      	movs	r1, #15
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f7ff ff8e 	bl	8002684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <SysTick_Config+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276e:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <SysTick_Config+0x40>)
 8002770:	2207      	movs	r2, #7
 8002772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	e000e010 	.word	0xe000e010

08002784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff29 	bl	80025e4 <__NVIC_SetPriorityGrouping>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ac:	f7ff ff3e 	bl	800262c <__NVIC_GetPriorityGrouping>
 80027b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f7ff ff8e 	bl	80026d8 <NVIC_EncodePriority>
 80027bc:	4602      	mov	r2, r0
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff5d 	bl	8002684 <__NVIC_SetPriority>
}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff31 	bl	8002648 <__NVIC_EnableIRQ>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffa2 	bl	8002740 <SysTick_Config>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e014      	b.n	8002842 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	791b      	ldrb	r3, [r3, #4]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff f89d 	bl	8001968 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2202      	movs	r2, #2
 8002832:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	3308      	adds	r3, #8
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e004      	b.n	800287e <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	3314      	adds	r3, #20
 800287c:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	461a      	mov	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	795b      	ldrb	r3, [r3, #5]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_DAC_Start+0x16>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e039      	b.n	800291e <HAL_DAC_Start+0x8a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	409a      	lsls	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10f      	bne.n	80028f0 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80028da:	2b3c      	cmp	r3, #60	@ 0x3c
 80028dc:	d118      	bne.n	8002910 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	e00f      	b.n	8002910 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80028fa:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 80028fe:	d107      	bne.n	8002910 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0202 	orr.w	r2, r2, #2
 800290e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800292a:	b480      	push	{r7}
 800292c:	b087      	sub	sp, #28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	795b      	ldrb	r3, [r3, #5]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_DAC_ConfigChannel+0x20>
 8002946:	2302      	movs	r3, #2
 8002948:	e036      	b.n	80029b8 <HAL_DAC_ConfigChannel+0x8e>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2202      	movs	r2, #2
 8002954:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800295e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	22c0      	movs	r2, #192	@ 0xc0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43da      	mvns	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	400a      	ands	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e02e      	b.n	8002a34 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d008      	beq.n	80029f2 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2204      	movs	r2, #4
 80029e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e020      	b.n	8002a34 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 020e 	bic.w	r2, r2, #14
 8002a00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d005      	beq.n	8002a62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e027      	b.n	8002ab2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 020e 	bic.w	r2, r2, #14
 8002a70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
    }
  }
  return status;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aca:	e154      	b.n	8002d76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8146 	beq.w	8002d70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d005      	beq.n	8002afc <HAL_GPIO_Init+0x40>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d130      	bne.n	8002b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b32:	2201      	movs	r2, #1
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 0201 	and.w	r2, r3, #1
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d017      	beq.n	8002b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d123      	bne.n	8002bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	08da      	lsrs	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3208      	adds	r2, #8
 8002be8:	6939      	ldr	r1, [r7, #16]
 8002bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0203 	and.w	r2, r3, #3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80a0 	beq.w	8002d70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c30:	4b58      	ldr	r3, [pc, #352]	@ (8002d94 <HAL_GPIO_Init+0x2d8>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	4a57      	ldr	r2, [pc, #348]	@ (8002d94 <HAL_GPIO_Init+0x2d8>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6193      	str	r3, [r2, #24]
 8002c3c:	4b55      	ldr	r3, [pc, #340]	@ (8002d94 <HAL_GPIO_Init+0x2d8>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c48:	4a53      	ldr	r2, [pc, #332]	@ (8002d98 <HAL_GPIO_Init+0x2dc>)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	220f      	movs	r2, #15
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c72:	d019      	beq.n	8002ca8 <HAL_GPIO_Init+0x1ec>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a49      	ldr	r2, [pc, #292]	@ (8002d9c <HAL_GPIO_Init+0x2e0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_GPIO_Init+0x1e8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a48      	ldr	r2, [pc, #288]	@ (8002da0 <HAL_GPIO_Init+0x2e4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00d      	beq.n	8002ca0 <HAL_GPIO_Init+0x1e4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a47      	ldr	r2, [pc, #284]	@ (8002da4 <HAL_GPIO_Init+0x2e8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <HAL_GPIO_Init+0x1e0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a46      	ldr	r2, [pc, #280]	@ (8002da8 <HAL_GPIO_Init+0x2ec>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_GPIO_Init+0x1dc>
 8002c94:	2304      	movs	r3, #4
 8002c96:	e008      	b.n	8002caa <HAL_GPIO_Init+0x1ee>
 8002c98:	2305      	movs	r3, #5
 8002c9a:	e006      	b.n	8002caa <HAL_GPIO_Init+0x1ee>
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e004      	b.n	8002caa <HAL_GPIO_Init+0x1ee>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e002      	b.n	8002caa <HAL_GPIO_Init+0x1ee>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <HAL_GPIO_Init+0x1ee>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	f002 0203 	and.w	r2, r2, #3
 8002cb0:	0092      	lsls	r2, r2, #2
 8002cb2:	4093      	lsls	r3, r2
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cba:	4937      	ldr	r1, [pc, #220]	@ (8002d98 <HAL_GPIO_Init+0x2dc>)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc8:	4b38      	ldr	r3, [pc, #224]	@ (8002dac <HAL_GPIO_Init+0x2f0>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cec:	4a2f      	ldr	r2, [pc, #188]	@ (8002dac <HAL_GPIO_Init+0x2f0>)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8002dac <HAL_GPIO_Init+0x2f0>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d16:	4a25      	ldr	r2, [pc, #148]	@ (8002dac <HAL_GPIO_Init+0x2f0>)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d1c:	4b23      	ldr	r3, [pc, #140]	@ (8002dac <HAL_GPIO_Init+0x2f0>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d40:	4a1a      	ldr	r2, [pc, #104]	@ (8002dac <HAL_GPIO_Init+0x2f0>)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d46:	4b19      	ldr	r3, [pc, #100]	@ (8002dac <HAL_GPIO_Init+0x2f0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d6a:	4a10      	ldr	r2, [pc, #64]	@ (8002dac <HAL_GPIO_Init+0x2f0>)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	3301      	adds	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f47f aea3 	bne.w	8002acc <HAL_GPIO_Init+0x10>
  }
}
 8002d86:	bf00      	nop
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	48000400 	.word	0x48000400
 8002da0:	48000800 	.word	0x48000800
 8002da4:	48000c00 	.word	0x48000c00
 8002da8:	48001000 	.word	0x48001000
 8002dac:	40010400 	.word	0x40010400

08002db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc0:	787b      	ldrb	r3, [r7, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dcc:	e002      	b.n	8002dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4013      	ands	r3, r2
 8002df8:	041a      	lsls	r2, r3, #16
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	43d9      	mvns	r1, r3
 8002dfe:	887b      	ldrh	r3, [r7, #2]
 8002e00:	400b      	ands	r3, r1
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e4c <HAL_PWREx_EnableSDADC+0x38>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	4a0a      	ldr	r2, [pc, #40]	@ (8002e4c <HAL_PWREx_EnableSDADC+0x38>)
 8002e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	61d3      	str	r3, [r2, #28]
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <HAL_PWREx_EnableSDADC+0x38>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8002e34:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_PWREx_EnableSDADC+0x3c>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4905      	ldr	r1, [pc, #20]	@ (8002e50 <HAL_PWREx_EnableSDADC+0x3c>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40007000 	.word	0x40007000

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e64:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f000 bff4 	b.w	8003e62 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 816d 	beq.w	800316a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e90:	4bb4      	ldr	r3, [pc, #720]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e9c:	4bb1      	ldr	r3, [pc, #708]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d157      	bne.n	8002f58 <HAL_RCC_OscConfig+0x104>
 8002ea8:	4bae      	ldr	r3, [pc, #696]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb4:	d150      	bne.n	8002f58 <HAL_RCC_OscConfig+0x104>
 8002eb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002eba:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ed6:	d802      	bhi.n	8002ede <HAL_RCC_OscConfig+0x8a>
 8002ed8:	4ba2      	ldr	r3, [pc, #648]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	e015      	b.n	8002f0a <HAL_RCC_OscConfig+0xb6>
 8002ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ee2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002ef2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ef6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002efa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002f06:	4b97      	ldr	r3, [pc, #604]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f0e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002f12:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002f16:	fa92 f2a2 	rbit	r2, r2
 8002f1a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002f1e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002f22:	fab2 f282 	clz	r2, r2
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	f002 021f 	and.w	r2, r2, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f202 	lsl.w	r2, r1, r2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 8114 	beq.w	8003168 <HAL_RCC_OscConfig+0x314>
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f040 810b 	bne.w	8003168 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f000 bf85 	b.w	8003e62 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x124>
 8002f6a:	4b7e      	ldr	r3, [pc, #504]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7d      	ldr	r2, [pc, #500]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e036      	b.n	8002fe6 <HAL_RCC_OscConfig+0x192>
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10c      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x14e>
 8002f88:	4b76      	ldr	r3, [pc, #472]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a75      	ldr	r2, [pc, #468]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b73      	ldr	r3, [pc, #460]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a72      	ldr	r2, [pc, #456]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e021      	b.n	8002fe6 <HAL_RCC_OscConfig+0x192>
 8002fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fb2:	d10c      	bne.n	8002fce <HAL_RCC_OscConfig+0x17a>
 8002fb4:	4b6b      	ldr	r3, [pc, #428]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a6a      	ldr	r2, [pc, #424]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002fba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b68      	ldr	r3, [pc, #416]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a67      	ldr	r2, [pc, #412]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	e00b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x192>
 8002fce:	4b65      	ldr	r3, [pc, #404]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a64      	ldr	r2, [pc, #400]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b62      	ldr	r3, [pc, #392]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a61      	ldr	r2, [pc, #388]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002fe0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fe4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	f023 020f 	bic.w	r2, r3, #15
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	495a      	ldr	r1, [pc, #360]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d054      	beq.n	80030ba <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe fe98 	bl	8001d44 <HAL_GetTick>
 8003014:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800301a:	f7fe fe93 	bl	8001d44 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	@ 0x64
 8003028:	d902      	bls.n	8003030 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	f000 bf19 	b.w	8003e62 <HAL_RCC_OscConfig+0x100e>
 8003030:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003034:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003044:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003050:	d802      	bhi.n	8003058 <HAL_RCC_OscConfig+0x204>
 8003052:	4b44      	ldr	r3, [pc, #272]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	e015      	b.n	8003084 <HAL_RCC_OscConfig+0x230>
 8003058:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800305c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800306c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003070:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003074:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003080:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003088:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800308c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003090:	fa92 f2a2 	rbit	r2, r2
 8003094:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003098:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800309c:	fab2 f282 	clz	r2, r2
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f042 0220 	orr.w	r2, r2, #32
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	f002 021f 	and.w	r2, r2, #31
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f202 	lsl.w	r2, r1, r2
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0b0      	beq.n	800301a <HAL_RCC_OscConfig+0x1c6>
 80030b8:	e057      	b.n	800316a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7fe fe43 	bl	8001d44 <HAL_GetTick>
 80030be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	e00a      	b.n	80030da <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c4:	f7fe fe3e 	bl	8001d44 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	@ 0x64
 80030d2:	d902      	bls.n	80030da <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	f000 bec4 	b.w	8003e62 <HAL_RCC_OscConfig+0x100e>
 80030da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030de:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80030ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80030fa:	d802      	bhi.n	8003102 <HAL_RCC_OscConfig+0x2ae>
 80030fc:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	e015      	b.n	800312e <HAL_RCC_OscConfig+0x2da>
 8003102:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003106:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003116:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800311a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800311e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800312a:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <HAL_RCC_OscConfig+0x310>)
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003132:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003136:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800313a:	fa92 f2a2 	rbit	r2, r2
 800313e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003142:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003146:	fab2 f282 	clz	r2, r2
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	f042 0220 	orr.w	r2, r2, #32
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f002 021f 	and.w	r2, r2, #31
 8003156:	2101      	movs	r1, #1
 8003158:	fa01 f202 	lsl.w	r2, r1, r2
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1b0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x270>
 8003162:	e002      	b.n	800316a <HAL_RCC_OscConfig+0x316>
 8003164:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 816c 	beq.w	8003458 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003180:	4bcc      	ldr	r3, [pc, #816]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800318c:	4bc9      	ldr	r3, [pc, #804]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	d16d      	bne.n	8003274 <HAL_RCC_OscConfig+0x420>
 8003198:	4bc6      	ldr	r3, [pc, #792]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d167      	bne.n	8003274 <HAL_RCC_OscConfig+0x420>
 80031a4:	2302      	movs	r3, #2
 80031a6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80031b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80031c2:	d802      	bhi.n	80031ca <HAL_RCC_OscConfig+0x376>
 80031c4:	4bbb      	ldr	r3, [pc, #748]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	e013      	b.n	80031f2 <HAL_RCC_OscConfig+0x39e>
 80031ca:	2302      	movs	r3, #2
 80031cc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80031dc:	2302      	movs	r3, #2
 80031de:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80031e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80031ee:	4bb1      	ldr	r3, [pc, #708]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	2202      	movs	r2, #2
 80031f4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80031f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80031fc:	fa92 f2a2 	rbit	r2, r2
 8003200:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003204:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003208:	fab2 f282 	clz	r2, r2
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	f042 0220 	orr.w	r2, r2, #32
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	f002 021f 	and.w	r2, r2, #31
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f202 	lsl.w	r2, r1, r2
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCC_OscConfig+0x3e6>
 8003224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d002      	beq.n	800323a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f000 be14 	b.w	8003e62 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323a:	4b9e      	ldr	r3, [pc, #632]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003246:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	21f8      	movs	r1, #248	@ 0xf8
 8003250:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003258:	fa91 f1a1 	rbit	r1, r1
 800325c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003260:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003264:	fab1 f181 	clz	r1, r1
 8003268:	b2c9      	uxtb	r1, r1
 800326a:	408b      	lsls	r3, r1
 800326c:	4991      	ldr	r1, [pc, #580]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	e0f1      	b.n	8003458 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8083 	beq.w	800338c <HAL_RCC_OscConfig+0x538>
 8003286:	2301      	movs	r3, #1
 8003288:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003298:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032a6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	461a      	mov	r2, r3
 80032ae:	2301      	movs	r3, #1
 80032b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fe fd47 	bl	8001d44 <HAL_GetTick>
 80032b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fe fd42 	bl	8001d44 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d902      	bls.n	80032d2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	f000 bdc8 	b.w	8003e62 <HAL_RCC_OscConfig+0x100e>
 80032d2:	2302      	movs	r3, #2
 80032d4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80032e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80032f0:	d802      	bhi.n	80032f8 <HAL_RCC_OscConfig+0x4a4>
 80032f2:	4b70      	ldr	r3, [pc, #448]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	e013      	b.n	8003320 <HAL_RCC_OscConfig+0x4cc>
 80032f8:	2302      	movs	r3, #2
 80032fa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800330a:	2302      	movs	r3, #2
 800330c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003310:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800331c:	4b65      	ldr	r3, [pc, #404]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	2202      	movs	r2, #2
 8003322:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003326:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800332a:	fa92 f2a2 	rbit	r2, r2
 800332e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003332:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003336:	fab2 f282 	clz	r2, r2
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	f042 0220 	orr.w	r2, r2, #32
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	f002 021f 	and.w	r2, r2, #31
 8003346:	2101      	movs	r1, #1
 8003348:	fa01 f202 	lsl.w	r2, r1, r2
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0b4      	beq.n	80032bc <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b58      	ldr	r3, [pc, #352]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800335a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	21f8      	movs	r1, #248	@ 0xf8
 8003368:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003370:	fa91 f1a1 	rbit	r1, r1
 8003374:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003378:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800337c:	fab1 f181 	clz	r1, r1
 8003380:	b2c9      	uxtb	r1, r1
 8003382:	408b      	lsls	r3, r1
 8003384:	494b      	ldr	r1, [pc, #300]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
 800338a:	e065      	b.n	8003458 <HAL_RCC_OscConfig+0x604>
 800338c:	2301      	movs	r3, #1
 800338e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800339e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	461a      	mov	r2, r3
 80033b4:	2300      	movs	r3, #0
 80033b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe fcc4 	bl	8001d44 <HAL_GetTick>
 80033bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fe fcbf 	bl	8001d44 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d902      	bls.n	80033d8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	f000 bd45 	b.w	8003e62 <HAL_RCC_OscConfig+0x100e>
 80033d8:	2302      	movs	r3, #2
 80033da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80033ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80033f6:	d802      	bhi.n	80033fe <HAL_RCC_OscConfig+0x5aa>
 80033f8:	4b2e      	ldr	r3, [pc, #184]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	e013      	b.n	8003426 <HAL_RCC_OscConfig+0x5d2>
 80033fe:	2302      	movs	r3, #2
 8003400:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003410:	2302      	movs	r3, #2
 8003412:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003416:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003422:	4b24      	ldr	r3, [pc, #144]	@ (80034b4 <HAL_RCC_OscConfig+0x660>)
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	2202      	movs	r2, #2
 8003428:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800342c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003430:	fa92 f2a2 	rbit	r2, r2
 8003434:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003438:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800343c:	fab2 f282 	clz	r2, r2
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	f042 0220 	orr.w	r2, r2, #32
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	f002 021f 	and.w	r2, r2, #31
 800344c:	2101      	movs	r1, #1
 800344e:	fa01 f202 	lsl.w	r2, r1, r2
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1b4      	bne.n	80033c2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8115 	beq.w	8003698 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d07e      	beq.n	800357c <HAL_RCC_OscConfig+0x728>
 800347e:	2301      	movs	r3, #1
 8003480:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCC_OscConfig+0x664>)
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	461a      	mov	r2, r3
 80034a4:	2301      	movs	r3, #1
 80034a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a8:	f7fe fc4c 	bl	8001d44 <HAL_GetTick>
 80034ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b0:	e00f      	b.n	80034d2 <HAL_RCC_OscConfig+0x67e>
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fe fc42 	bl	8001d44 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d902      	bls.n	80034d2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	f000 bcc8 	b.w	8003e62 <HAL_RCC_OscConfig+0x100e>
 80034d2:	2302      	movs	r3, #2
 80034d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034ec:	2202      	movs	r2, #2
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003502:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003510:	2202      	movs	r2, #2
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800352a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352c:	4bb0      	ldr	r3, [pc, #704]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 800352e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003534:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003538:	2102      	movs	r1, #2
 800353a:	6019      	str	r1, [r3, #0]
 800353c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003540:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	fa93 f1a3 	rbit	r1, r3
 800354a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003552:	6019      	str	r1, [r3, #0]
  return result;
 8003554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003558:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0a0      	beq.n	80034bc <HAL_RCC_OscConfig+0x668>
 800357a:	e08d      	b.n	8003698 <HAL_RCC_OscConfig+0x844>
 800357c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003580:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	fa93 f2a3 	rbit	r2, r3
 8003596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800359e:	601a      	str	r2, [r3, #0]
  return result;
 80035a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80035a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b90      	ldr	r3, [pc, #576]	@ (80037f4 <HAL_RCC_OscConfig+0x9a0>)
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	461a      	mov	r2, r3
 80035ba:	2300      	movs	r3, #0
 80035bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035be:	f7fe fbc1 	bl	8001d44 <HAL_GetTick>
 80035c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c6:	e00a      	b.n	80035de <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c8:	f7fe fbbc 	bl	8001d44 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d902      	bls.n	80035de <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	f000 bc42 	b.w	8003e62 <HAL_RCC_OscConfig+0x100e>
 80035de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035e6:	2202      	movs	r2, #2
 80035e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	fa93 f2a3 	rbit	r2, r3
 80035f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003606:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800360a:	2202      	movs	r2, #2
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003612:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	fa93 f2a3 	rbit	r2, r3
 800361c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003620:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800362e:	2202      	movs	r2, #2
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003636:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	fa93 f2a3 	rbit	r2, r3
 8003640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003644:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003648:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364a:	4b69      	ldr	r3, [pc, #420]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 800364c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800364e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003652:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003656:	2102      	movs	r1, #2
 8003658:	6019      	str	r1, [r3, #0]
 800365a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	fa93 f1a3 	rbit	r1, r3
 8003668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003670:	6019      	str	r1, [r3, #0]
  return result;
 8003672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003676:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2101      	movs	r1, #1
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d197      	bne.n	80035c8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 819e 	beq.w	80039ea <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b4:	4b4e      	ldr	r3, [pc, #312]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d116      	bne.n	80036ee <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c0:	4b4b      	ldr	r3, [pc, #300]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	4a4a      	ldr	r2, [pc, #296]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	61d3      	str	r3, [r2, #28]
 80036cc:	4b48      	ldr	r3, [pc, #288]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80036d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80036e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	4b42      	ldr	r3, [pc, #264]	@ (80037f8 <HAL_RCC_OscConfig+0x9a4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11a      	bne.n	8003730 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fa:	4b3f      	ldr	r3, [pc, #252]	@ (80037f8 <HAL_RCC_OscConfig+0x9a4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a3e      	ldr	r2, [pc, #248]	@ (80037f8 <HAL_RCC_OscConfig+0x9a4>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003704:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003706:	f7fe fb1d 	bl	8001d44 <HAL_GetTick>
 800370a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	e009      	b.n	8003724 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003710:	f7fe fb18 	bl	8001d44 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b64      	cmp	r3, #100	@ 0x64
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e39e      	b.n	8003e62 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	4b34      	ldr	r3, [pc, #208]	@ (80037f8 <HAL_RCC_OscConfig+0x9a4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ef      	beq.n	8003710 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003734:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x8fa>
 8003740:	4b2b      	ldr	r3, [pc, #172]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4a2a      	ldr	r2, [pc, #168]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6213      	str	r3, [r2, #32]
 800374c:	e035      	b.n	80037ba <HAL_RCC_OscConfig+0x966>
 800374e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003752:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x924>
 800375e:	4b24      	ldr	r3, [pc, #144]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4a23      	ldr	r2, [pc, #140]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	4b21      	ldr	r3, [pc, #132]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	4a20      	ldr	r2, [pc, #128]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	6213      	str	r3, [r2, #32]
 8003776:	e020      	b.n	80037ba <HAL_RCC_OscConfig+0x966>
 8003778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800377c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d10c      	bne.n	80037a2 <HAL_RCC_OscConfig+0x94e>
 8003788:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4a18      	ldr	r2, [pc, #96]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 800378e:	f043 0304 	orr.w	r3, r3, #4
 8003792:	6213      	str	r3, [r2, #32]
 8003794:	4b16      	ldr	r3, [pc, #88]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4a15      	ldr	r2, [pc, #84]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6213      	str	r3, [r2, #32]
 80037a0:	e00b      	b.n	80037ba <HAL_RCC_OscConfig+0x966>
 80037a2:	4b13      	ldr	r3, [pc, #76]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	4a12      	ldr	r2, [pc, #72]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6213      	str	r3, [r2, #32]
 80037ae:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4a0f      	ldr	r2, [pc, #60]	@ (80037f0 <HAL_RCC_OscConfig+0x99c>)
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8087 	beq.w	80038da <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037cc:	f7fe faba 	bl	8001d44 <HAL_GetTick>
 80037d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d4:	e012      	b.n	80037fc <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7fe fab5 	bl	8001d44 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d908      	bls.n	80037fc <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e339      	b.n	8003e62 <HAL_RCC_OscConfig+0x100e>
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	10908120 	.word	0x10908120
 80037f8:	40007000 	.word	0x40007000
 80037fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003800:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003804:	2202      	movs	r2, #2
 8003806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	fa93 f2a3 	rbit	r2, r3
 8003816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003824:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003828:	2202      	movs	r2, #2
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003830:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f2a3 	rbit	r2, r3
 800383a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003842:	601a      	str	r2, [r3, #0]
  return result;
 8003844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003848:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800384c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <HAL_RCC_OscConfig+0xa10>
 800385e:	4b98      	ldr	r3, [pc, #608]	@ (8003ac0 <HAL_RCC_OscConfig+0xc6c>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	e013      	b.n	800388c <HAL_RCC_OscConfig+0xa38>
 8003864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003868:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800386c:	2202      	movs	r2, #2
 800386e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003874:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	fa93 f2a3 	rbit	r2, r3
 800387e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003882:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	4b8d      	ldr	r3, [pc, #564]	@ (8003ac0 <HAL_RCC_OscConfig+0xc6c>)
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003890:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003894:	2102      	movs	r1, #2
 8003896:	6011      	str	r1, [r2, #0]
 8003898:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800389c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	fa92 f1a2 	rbit	r1, r2
 80038a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038aa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80038ae:	6011      	str	r1, [r2, #0]
  return result;
 80038b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038b4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	fab2 f282 	clz	r2, r2
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f002 021f 	and.w	r2, r2, #31
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f43f af7f 	beq.w	80037d6 <HAL_RCC_OscConfig+0x982>
 80038d8:	e07d      	b.n	80039d6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038da:	f7fe fa33 	bl	8001d44 <HAL_GetTick>
 80038de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e2:	e00b      	b.n	80038fc <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e4:	f7fe fa2e 	bl	8001d44 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e2b2      	b.n	8003e62 <HAL_RCC_OscConfig+0x100e>
 80038fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003900:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003904:	2202      	movs	r2, #2
 8003906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	fa93 f2a3 	rbit	r2, r3
 8003916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003924:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003928:	2202      	movs	r2, #2
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003930:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	fa93 f2a3 	rbit	r2, r3
 800393a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003942:	601a      	str	r2, [r3, #0]
  return result;
 8003944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003948:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800394c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <HAL_RCC_OscConfig+0xb10>
 800395e:	4b58      	ldr	r3, [pc, #352]	@ (8003ac0 <HAL_RCC_OscConfig+0xc6c>)
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	e013      	b.n	800398c <HAL_RCC_OscConfig+0xb38>
 8003964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003968:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800396c:	2202      	movs	r2, #2
 800396e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003974:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	fa93 f2a3 	rbit	r2, r3
 800397e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003982:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac0 <HAL_RCC_OscConfig+0xc6c>)
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003990:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003994:	2102      	movs	r1, #2
 8003996:	6011      	str	r1, [r2, #0]
 8003998:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800399c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	fa92 f1a2 	rbit	r1, r2
 80039a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039aa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80039ae:	6011      	str	r1, [r2, #0]
  return result;
 80039b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	fab2 f282 	clz	r2, r2
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f002 021f 	and.w	r2, r2, #31
 80039ca:	2101      	movs	r1, #1
 80039cc:	fa01 f202 	lsl.w	r2, r1, r2
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d186      	bne.n	80038e4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039d6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d105      	bne.n	80039ea <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039de:	4b38      	ldr	r3, [pc, #224]	@ (8003ac0 <HAL_RCC_OscConfig+0xc6c>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	4a37      	ldr	r2, [pc, #220]	@ (8003ac0 <HAL_RCC_OscConfig+0xc6c>)
 80039e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8232 	beq.w	8003e60 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039fc:	4b30      	ldr	r3, [pc, #192]	@ (8003ac0 <HAL_RCC_OscConfig+0xc6c>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	f000 8201 	beq.w	8003e0c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	f040 8157 	bne.w	8003cca <HAL_RCC_OscConfig+0xe76>
 8003a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a20:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003a24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	fa93 f2a3 	rbit	r2, r3
 8003a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003a40:	601a      	str	r2, [r3, #0]
  return result;
 8003a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a46:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003a4a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4c:	fab3 f383 	clz	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a56:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fe f96f 	bl	8001d44 <HAL_GetTick>
 8003a66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6a:	e009      	b.n	8003a80 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fe f96a 	bl	8001d44 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e1f0      	b.n	8003e62 <HAL_RCC_OscConfig+0x100e>
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a92:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	fa93 f2a3 	rbit	r2, r3
 8003a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003aa4:	601a      	str	r2, [r3, #0]
  return result;
 8003aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aaa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003aae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab0:	fab3 f383 	clz	r3, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ab8:	d804      	bhi.n	8003ac4 <HAL_RCC_OscConfig+0xc70>
 8003aba:	4b01      	ldr	r3, [pc, #4]	@ (8003ac0 <HAL_RCC_OscConfig+0xc6c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	e029      	b.n	8003b14 <HAL_RCC_OscConfig+0xcc0>
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003acc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003af2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	fa93 f2a3 	rbit	r2, r3
 8003b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	4bc3      	ldr	r3, [pc, #780]	@ (8003e20 <HAL_RCC_OscConfig+0xfcc>)
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b18:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003b1c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b20:	6011      	str	r1, [r2, #0]
 8003b22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b26:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	fa92 f1a2 	rbit	r1, r2
 8003b30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b34:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b38:	6011      	str	r1, [r2, #0]
  return result;
 8003b3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b3e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	fab2 f282 	clz	r2, r2
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	f042 0220 	orr.w	r2, r2, #32
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f002 021f 	and.w	r2, r2, #31
 8003b54:	2101      	movs	r1, #1
 8003b56:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d185      	bne.n	8003a6c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b60:	4baf      	ldr	r3, [pc, #700]	@ (8003e20 <HAL_RCC_OscConfig+0xfcc>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	49a7      	ldr	r1, [pc, #668]	@ (8003e20 <HAL_RCC_OscConfig+0xfcc>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
 8003b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003b90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003bac:	601a      	str	r2, [r3, #0]
  return result;
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003bb6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003bc2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2301      	movs	r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe f8b9 	bl	8001d44 <HAL_GetTick>
 8003bd2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd6:	e009      	b.n	8003bec <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fe f8b4 	bl	8001d44 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e13a      	b.n	8003e62 <HAL_RCC_OscConfig+0x100e>
 8003bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003bf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	fa93 f2a3 	rbit	r2, r3
 8003c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003c10:	601a      	str	r2, [r3, #0]
  return result;
 8003c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c16:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003c1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c1c:	fab3 f383 	clz	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c24:	d802      	bhi.n	8003c2c <HAL_RCC_OscConfig+0xdd8>
 8003c26:	4b7e      	ldr	r3, [pc, #504]	@ (8003e20 <HAL_RCC_OscConfig+0xfcc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	e027      	b.n	8003c7c <HAL_RCC_OscConfig+0xe28>
 8003c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c30:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	fa93 f2a3 	rbit	r2, r3
 8003c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c56:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c64:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	fa93 f2a3 	rbit	r2, r3
 8003c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c72:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	4b69      	ldr	r3, [pc, #420]	@ (8003e20 <HAL_RCC_OscConfig+0xfcc>)
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c80:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c84:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c88:	6011      	str	r1, [r2, #0]
 8003c8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c8e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	fa92 f1a2 	rbit	r1, r2
 8003c98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c9c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003ca0:	6011      	str	r1, [r2, #0]
  return result;
 8003ca2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ca6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	fab2 f282 	clz	r2, r2
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f042 0220 	orr.w	r2, r2, #32
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	f002 021f 	and.w	r2, r2, #31
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d087      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xd84>
 8003cc8:	e0ca      	b.n	8003e60 <HAL_RCC_OscConfig+0x100c>
 8003cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cce:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003cd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cdc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	fa93 f2a3 	rbit	r2, r3
 8003ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cee:	601a      	str	r2, [r3, #0]
  return result;
 8003cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cf8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fe f818 	bl	8001d44 <HAL_GetTick>
 8003d14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d18:	e009      	b.n	8003d2e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fe f813 	bl	8001d44 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e099      	b.n	8003e62 <HAL_RCC_OscConfig+0x100e>
 8003d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d32:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d40:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	fa93 f2a3 	rbit	r2, r3
 8003d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d52:	601a      	str	r2, [r3, #0]
  return result;
 8003d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d58:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5e:	fab3 f383 	clz	r3, r3
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d66:	d802      	bhi.n	8003d6e <HAL_RCC_OscConfig+0xf1a>
 8003d68:	4b2d      	ldr	r3, [pc, #180]	@ (8003e20 <HAL_RCC_OscConfig+0xfcc>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	e027      	b.n	8003dbe <HAL_RCC_OscConfig+0xf6a>
 8003d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d72:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d80:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	fa93 f2a3 	rbit	r2, r3
 8003d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d98:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003d9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	4b19      	ldr	r3, [pc, #100]	@ (8003e20 <HAL_RCC_OscConfig+0xfcc>)
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dc2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003dc6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003dca:	6011      	str	r1, [r2, #0]
 8003dcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dd0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	fa92 f1a2 	rbit	r1, r2
 8003dda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dde:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003de2:	6011      	str	r1, [r2, #0]
  return result;
 8003de4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003de8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	fab2 f282 	clz	r2, r2
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f042 0220 	orr.w	r2, r2, #32
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	f002 021f 	and.w	r2, r2, #31
 8003dfe:	2101      	movs	r1, #1
 8003e00:	fa01 f202 	lsl.w	r2, r1, r2
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d187      	bne.n	8003d1a <HAL_RCC_OscConfig+0xec6>
 8003e0a:	e029      	b.n	8003e60 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d103      	bne.n	8003e24 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e020      	b.n	8003e62 <HAL_RCC_OscConfig+0x100e>
 8003e20:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e24:	4b11      	ldr	r3, [pc, #68]	@ (8003e6c <HAL_RCC_OscConfig+0x1018>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e2c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003e30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003e44:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003e48:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021000 	.word	0x40021000

08003e70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b09e      	sub	sp, #120	@ 0x78
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e154      	b.n	8004132 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e88:	4b89      	ldr	r3, [pc, #548]	@ (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d910      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b86      	ldr	r3, [pc, #536]	@ (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 0207 	bic.w	r2, r3, #7
 8003e9e:	4984      	ldr	r1, [pc, #528]	@ (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b82      	ldr	r3, [pc, #520]	@ (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e13c      	b.n	8004132 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec4:	4b7b      	ldr	r3, [pc, #492]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4978      	ldr	r1, [pc, #480]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80cd 	beq.w	800407e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d137      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xec>
 8003eec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ef0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003efa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f04:	d802      	bhi.n	8003f0c <HAL_RCC_ClockConfig+0x9c>
 8003f06:	4b6b      	ldr	r3, [pc, #428]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	e00f      	b.n	8003f2c <HAL_RCC_ClockConfig+0xbc>
 8003f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f14:	fa93 f3a3 	rbit	r3, r3
 8003f18:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f22:	fa93 f3a3 	rbit	r3, r3
 8003f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f28:	4b62      	ldr	r3, [pc, #392]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f34:	fa92 f2a2 	rbit	r2, r2
 8003f38:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003f3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f3c:	fab2 f282 	clz	r2, r2
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	f042 0220 	orr.w	r2, r2, #32
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f002 021f 	and.w	r2, r2, #31
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d171      	bne.n	800403c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0ea      	b.n	8004132 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d137      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x164>
 8003f64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f68:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f6c:	fa93 f3a3 	rbit	r3, r3
 8003f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f7c:	d802      	bhi.n	8003f84 <HAL_RCC_ClockConfig+0x114>
 8003f7e:	4b4d      	ldr	r3, [pc, #308]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	e00f      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x134>
 8003f84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9a:	fa93 f3a3 	rbit	r3, r3
 8003f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fa0:	4b44      	ldr	r3, [pc, #272]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fa8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003faa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fac:	fa92 f2a2 	rbit	r2, r2
 8003fb0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003fb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fb4:	fab2 f282 	clz	r2, r2
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	f042 0220 	orr.w	r2, r2, #32
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	f002 021f 	and.w	r2, r2, #31
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d135      	bne.n	800403c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0ae      	b.n	8004132 <HAL_RCC_ClockConfig+0x2c2>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fda:	fa93 f3a3 	rbit	r3, r3
 8003fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003fea:	d802      	bhi.n	8003ff2 <HAL_RCC_ClockConfig+0x182>
 8003fec:	4b31      	ldr	r3, [pc, #196]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	e00d      	b.n	800400e <HAL_RCC_ClockConfig+0x19e>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffe:	2302      	movs	r3, #2
 8004000:	623b      	str	r3, [r7, #32]
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	4b2a      	ldr	r3, [pc, #168]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	2202      	movs	r2, #2
 8004010:	61ba      	str	r2, [r7, #24]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	fa92 f2a2 	rbit	r2, r2
 8004018:	617a      	str	r2, [r7, #20]
  return result;
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	fab2 f282 	clz	r2, r2
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	f042 0220 	orr.w	r2, r2, #32
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	f002 021f 	and.w	r2, r2, #31
 800402c:	2101      	movs	r1, #1
 800402e:	fa01 f202 	lsl.w	r2, r1, r2
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e07a      	b.n	8004132 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403c:	4b1d      	ldr	r3, [pc, #116]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f023 0203 	bic.w	r2, r3, #3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	491a      	ldr	r1, [pc, #104]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800404e:	f7fd fe79 	bl	8001d44 <HAL_GetTick>
 8004052:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004054:	e00a      	b.n	800406c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004056:	f7fd fe75 	bl	8001d44 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e062      	b.n	8004132 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406c:	4b11      	ldr	r3, [pc, #68]	@ (80040b4 <HAL_RCC_ClockConfig+0x244>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 020c 	and.w	r2, r3, #12
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	429a      	cmp	r2, r3
 800407c:	d1eb      	bne.n	8004056 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800407e:	4b0c      	ldr	r3, [pc, #48]	@ (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d215      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408c:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <HAL_RCC_ClockConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 0207 	bic.w	r2, r3, #7
 8004094:	4906      	ldr	r1, [pc, #24]	@ (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409c:	4b04      	ldr	r3, [pc, #16]	@ (80040b0 <HAL_RCC_ClockConfig+0x240>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d006      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e041      	b.n	8004132 <HAL_RCC_ClockConfig+0x2c2>
 80040ae:	bf00      	nop
 80040b0:	40022000 	.word	0x40022000
 80040b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c4:	4b1d      	ldr	r3, [pc, #116]	@ (800413c <HAL_RCC_ClockConfig+0x2cc>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	491a      	ldr	r1, [pc, #104]	@ (800413c <HAL_RCC_ClockConfig+0x2cc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e2:	4b16      	ldr	r3, [pc, #88]	@ (800413c <HAL_RCC_ClockConfig+0x2cc>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4912      	ldr	r1, [pc, #72]	@ (800413c <HAL_RCC_ClockConfig+0x2cc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040f6:	f000 f829 	bl	800414c <HAL_RCC_GetSysClockFreq>
 80040fa:	4601      	mov	r1, r0
 80040fc:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <HAL_RCC_ClockConfig+0x2cc>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004104:	22f0      	movs	r2, #240	@ 0xf0
 8004106:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	fa92 f2a2 	rbit	r2, r2
 800410e:	60fa      	str	r2, [r7, #12]
  return result;
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	fab2 f282 	clz	r2, r2
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	40d3      	lsrs	r3, r2
 800411a:	4a09      	ldr	r2, [pc, #36]	@ (8004140 <HAL_RCC_ClockConfig+0x2d0>)
 800411c:	5cd3      	ldrb	r3, [r2, r3]
 800411e:	fa21 f303 	lsr.w	r3, r1, r3
 8004122:	4a08      	ldr	r2, [pc, #32]	@ (8004144 <HAL_RCC_ClockConfig+0x2d4>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004126:	4b08      	ldr	r3, [pc, #32]	@ (8004148 <HAL_RCC_ClockConfig+0x2d8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd fdc6 	bl	8001cbc <HAL_InitTick>
  
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3778      	adds	r7, #120	@ 0x78
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	08006a28 	.word	0x08006a28
 8004144:	20000000 	.word	0x20000000
 8004148:	20000004 	.word	0x20000004

0800414c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004166:	4b1e      	ldr	r3, [pc, #120]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b04      	cmp	r3, #4
 8004174:	d002      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x30>
 8004176:	2b08      	cmp	r3, #8
 8004178:	d003      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x36>
 800417a:	e026      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800417c:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800417e:	613b      	str	r3, [r7, #16]
      break;
 8004180:	e026      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	0c9b      	lsrs	r3, r3, #18
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	4a17      	ldr	r2, [pc, #92]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004190:	4b13      	ldr	r3, [pc, #76]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	4a14      	ldr	r2, [pc, #80]	@ (80041ec <HAL_RCC_GetSysClockFreq+0xa0>)
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041a8:	4a0e      	ldr	r2, [pc, #56]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	e004      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a0c      	ldr	r2, [pc, #48]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	613b      	str	r3, [r7, #16]
      break;
 80041c8:	e002      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041ca:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80041cc:	613b      	str	r3, [r7, #16]
      break;
 80041ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d0:	693b      	ldr	r3, [r7, #16]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	007a1200 	.word	0x007a1200
 80041e8:	08006a40 	.word	0x08006a40
 80041ec:	08006a50 	.word	0x08006a50
 80041f0:	003d0900 	.word	0x003d0900

080041f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f8:	4b03      	ldr	r3, [pc, #12]	@ (8004208 <HAL_RCC_GetHCLKFreq+0x14>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000000 	.word	0x20000000

0800420c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004212:	f7ff ffef 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004216:	4601      	mov	r1, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004220:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004224:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	fa92 f2a2 	rbit	r2, r2
 800422c:	603a      	str	r2, [r7, #0]
  return result;
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	fab2 f282 	clz	r2, r2
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	40d3      	lsrs	r3, r2
 8004238:	4a04      	ldr	r2, [pc, #16]	@ (800424c <HAL_RCC_GetPCLK1Freq+0x40>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	08006a38 	.word	0x08006a38

08004250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004256:	f7ff ffcd 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 800425a:	4601      	mov	r1, r0
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004264:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004268:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	fa92 f2a2 	rbit	r2, r2
 8004270:	603a      	str	r2, [r7, #0]
  return result;
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	fab2 f282 	clz	r2, r2
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	40d3      	lsrs	r3, r2
 800427c:	4a04      	ldr	r2, [pc, #16]	@ (8004290 <HAL_RCC_GetPCLK2Freq+0x40>)
 800427e:	5cd3      	ldrb	r3, [r2, r3]
 8004280:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000
 8004290:	08006a38 	.word	0x08006a38

08004294 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b092      	sub	sp, #72	@ 0x48
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80d2 	beq.w	800445c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b8:	4b4d      	ldr	r3, [pc, #308]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10e      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c4:	4b4a      	ldr	r3, [pc, #296]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	4a49      	ldr	r2, [pc, #292]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ce:	61d3      	str	r3, [r2, #28]
 80042d0:	4b47      	ldr	r3, [pc, #284]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e2:	4b44      	ldr	r3, [pc, #272]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d118      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ee:	4b41      	ldr	r3, [pc, #260]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a40      	ldr	r2, [pc, #256]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fa:	f7fd fd23 	bl	8001d44 <HAL_GetTick>
 80042fe:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004300:	e008      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004302:	f7fd fd1f 	bl	8001d44 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b64      	cmp	r3, #100	@ 0x64
 800430e:	d901      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e12b      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004314:	4b37      	ldr	r3, [pc, #220]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004320:	4b33      	ldr	r3, [pc, #204]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004328:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800432a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8082 	beq.w	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800433c:	429a      	cmp	r2, r3
 800433e:	d07a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004340:	4b2b      	ldr	r3, [pc, #172]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004348:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800434a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800434e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800435a:	fab3 f383 	clz	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	461a      	mov	r2, r3
 800436a:	2301      	movs	r3, #1
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004372:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004376:	fa93 f3a3 	rbit	r3, r3
 800437a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800437c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	4b1c      	ldr	r3, [pc, #112]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	461a      	mov	r2, r3
 800438e:	2300      	movs	r3, #0
 8004390:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004392:	4a17      	ldr	r2, [pc, #92]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004396:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d049      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fd fccf 	bl	8001d44 <HAL_GetTick>
 80043a6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a8:	e00a      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043aa:	f7fd fccb 	bl	8001d44 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0d5      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80043c0:	2302      	movs	r3, #2
 80043c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80043cc:	2302      	movs	r3, #2
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	61fb      	str	r3, [r7, #28]
  return result;
 80043d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d108      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80043ea:	4b01      	ldr	r3, [pc, #4]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	e00d      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x178>
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40007000 	.word	0x40007000
 80043f8:	10908100 	.word	0x10908100
 80043fc:	2302      	movs	r3, #2
 80043fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	fa93 f3a3 	rbit	r3, r3
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	4b5a      	ldr	r3, [pc, #360]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	2202      	movs	r2, #2
 800440e:	613a      	str	r2, [r7, #16]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	fa92 f2a2 	rbit	r2, r2
 8004416:	60fa      	str	r2, [r7, #12]
  return result;
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	fab2 f282 	clz	r2, r2
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	f002 021f 	and.w	r2, r2, #31
 800442a:	2101      	movs	r1, #1
 800442c:	fa01 f202 	lsl.w	r2, r1, r2
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0b9      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004436:	4b4f      	ldr	r3, [pc, #316]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	494c      	ldr	r1, [pc, #304]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004444:	4313      	orrs	r3, r2
 8004446:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004448:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004450:	4b48      	ldr	r3, [pc, #288]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	4a47      	ldr	r2, [pc, #284]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800445a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004468:	4b42      	ldr	r3, [pc, #264]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	f023 0203 	bic.w	r2, r3, #3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	493f      	ldr	r1, [pc, #252]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004476:	4313      	orrs	r3, r2
 8004478:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004486:	4b3b      	ldr	r3, [pc, #236]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4938      	ldr	r1, [pc, #224]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004494:	4313      	orrs	r3, r2
 8004496:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044a4:	4b33      	ldr	r3, [pc, #204]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	4930      	ldr	r1, [pc, #192]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	f023 0210 	bic.w	r2, r3, #16
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4929      	ldr	r1, [pc, #164]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80044e0:	4b24      	ldr	r3, [pc, #144]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	4921      	ldr	r1, [pc, #132]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	f023 0220 	bic.w	r2, r3, #32
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	491a      	ldr	r1, [pc, #104]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800450c:	4313      	orrs	r3, r2
 800450e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800451c:	4b15      	ldr	r3, [pc, #84]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4912      	ldr	r1, [pc, #72]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800452a:	4313      	orrs	r3, r2
 800452c:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004536:	2b00      	cmp	r3, #0
 8004538:	d008      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800453a:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	490b      	ldr	r1, [pc, #44]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004558:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	4903      	ldr	r1, [pc, #12]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004566:	4313      	orrs	r3, r2
 8004568:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3748      	adds	r7, #72	@ 0x48
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000

08004578 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check SDADC handle */
  if(hsdadc == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e07f      	b.n	800468a <HAL_SDADC_Init+0x112>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));

  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fd fa0b 	bl	80019e4 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80045dc:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004604:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8004618:	4b1e      	ldr	r3, [pc, #120]	@ (8004694 <HAL_SDADC_Init+0x11c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	429a      	cmp	r2, r3
 8004626:	d00f      	beq.n	8004648 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8004628:	4b1a      	ldr	r3, [pc, #104]	@ (8004694 <HAL_SDADC_Init+0x11c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a19      	ldr	r2, [pc, #100]	@ (8004694 <HAL_SDADC_Init+0x11c>)
 800462e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004632:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8004634:	4b17      	ldr	r3, [pc, #92]	@ (8004694 <HAL_SDADC_Init+0x11c>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	4915      	ldr	r1, [pc, #84]	@ (8004694 <HAL_SDADC_Init+0x11c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]

    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8004642:	2002      	movs	r0, #2
 8004644:	f7fd fb8a 	bl	8001d5c <HAL_Delay>
  }

  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  tickstart = HAL_GetTick();
 8004658:	f7fd fb74 	bl	8001d44 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 800465e:	e008      	b.n	8004672 <HAL_SDADC_Init+0xfa>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8004660:	f7fd fb70 	bl	8001d44 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2bc8      	cmp	r3, #200	@ 0xc8
 800466c:	d901      	bls.n	8004672 <HAL_SDADC_Init+0xfa>
    {
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e00b      	b.n	800468a <HAL_SDADC_Init+0x112>
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ef      	bne.n	8004660 <HAL_SDADC_Init+0xe8>
    }
  }

  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return HAL status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40016000 	.word	0x40016000

08004698 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d002      	beq.n	80046b8 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
 80046b6:	e025      	b.n	8004704 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f9df 	bl	8004a7c <SDADC_EnterInitMode>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	22ff      	movs	r2, #255	@ 0xff
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	75fb      	strb	r3, [r7, #23]
 80046d0:	e018      	b.n	8004704 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80046dc:	4413      	add	r3, r2
 80046de:	3320      	adds	r3, #32
 80046e0:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80046ea:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 80046f0:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80046f8:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 80046fa:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80046fc:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f9df 	bl	8004ac2 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8004704:	7dfb      	ldrb	r3, [r7, #23]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004726:	2b01      	cmp	r3, #1
 8004728:	d002      	beq.n	8004730 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
 800472e:	e037      	b.n	80047a0 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f9a3 	bl	8004a7c <SDADC_EnterInitMode>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d006      	beq.n	800474a <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	22ff      	movs	r2, #255	@ 0xff
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	75fb      	strb	r3, [r7, #23]
 8004748:	e02a      	b.n	80047a0 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4a17      	ldr	r2, [pc, #92]	@ (80047ac <HAL_SDADC_AssociateChannelConfig+0x9c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01f      	beq.n	8004792 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2203      	movs	r2, #3
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43da      	mvns	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	400a      	ands	r2, r1
 8004774:	641a      	str	r2, [r3, #64]	@ 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	409a      	lsls	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004790:	e003      	b.n	800479a <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f991 	bl	8004ac2 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 80047a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	00080100 	.word	0x00080100

080047b0 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d027      	beq.n	800481a <HAL_SDADC_InjectedConfigChannel+0x6a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d0:	2bff      	cmp	r3, #255	@ 0xff
 80047d2:	d022      	beq.n	800481a <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	b292      	uxth	r2, r2
 80047dc:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d108      	bne.n	80047f6 <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0220 	orr.w	r2, r2, #32
 80047f2:	605a      	str	r2, [r3, #4]
 80047f4:	e007      	b.n	8004806 <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0220 	bic.w	r2, r2, #32
 8004804:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 800480c:	68b8      	ldr	r0, [r7, #8]
 800480e:	f000 f96a 	bl	8004ae6 <SDADC_GetInjChannelsNbr>
 8004812:	4602      	mov	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	621a      	str	r2, [r3, #32]
 8004818:	e001      	b.n	800481e <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800481e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a12      	ldr	r2, [pc, #72]	@ (8004884 <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d105      	bne.n	800484c <HAL_SDADC_SelectInjectedTrigger+0x24>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d102      	bne.n	800484c <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
 800484a:	e014      	b.n	8004876 <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004852:	2b01      	cmp	r3, #1
 8004854:	d009      	beq.n	800486a <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800485c:	2b02      	cmp	r3, #2
 800485e:	d004      	beq.n	800486a <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004866:	2b03      	cmp	r3, #3
 8004868:	d103      	bne.n	8004872 <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004870:	e001      	b.n	8004876 <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40016000 	.word	0x40016000

08004888 <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d120      	bne.n	80048e2 <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f8eb 	bl	8004a7c <SDADC_EnterInitMode>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	22ff      	movs	r2, #255	@ 0xff
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	73fb      	strb	r3, [r7, #15]
 80048b8:	e015      	b.n	80048e6 <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048c8:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6859      	ldr	r1, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8f1 	bl	8004ac2 <SDADC_ExitInitMode>
 80048e0:	e001      	b.n	80048e6 <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_SDADC_InjectedStart>:
  *         or if regular conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedStart(SDADC_HandleTypeDef *hsdadc)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d004      	beq.n	800490c <HAL_SDADC_InjectedStart+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_REG))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004908:	2b03      	cmp	r3, #3
 800490a:	d105      	bne.n	8004918 <HAL_SDADC_InjectedStart+0x28>
  {
    /* Start injected conversion */
    status = SDADC_InjConvStart(hsdadc);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f90e 	bl	8004b2e <SDADC_InjConvStart>
 8004912:	4603      	mov	r3, r0
 8004914:	73fb      	strb	r3, [r7, #15]
 8004916:	e001      	b.n	800491c <HAL_SDADC_InjectedStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_SDADC_PollForInjectedConversion>:
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForInjectedConversion(SDADC_HandleTypeDef* hsdadc,
                                                      uint32_t Timeout)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004936:	2b04      	cmp	r3, #4
 8004938:	d006      	beq.n	8004948 <HAL_SDADC_PollForInjectedConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8004940:	2b05      	cmp	r3, #5
 8004942:	d001      	beq.n	8004948 <HAL_SDADC_PollForInjectedConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e057      	b.n	80049f8 <HAL_SDADC_PollForInjectedConversion+0xd2>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004948:	f7fd f9fc 	bl	8001d44 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]

    /* Wait JEOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_JEOCF) != SDADC_ISR_JEOCF)
 800494e:	e010      	b.n	8004972 <HAL_SDADC_PollForInjectedConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d00c      	beq.n	8004972 <HAL_SDADC_PollForInjectedConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8004958:	f7fd f9f4 	bl	8001d44 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d302      	bcc.n	800496e <HAL_SDADC_PollForInjectedConversion+0x48>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_SDADC_PollForInjectedConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e042      	b.n	80049f8 <HAL_SDADC_PollForInjectedConversion+0xd2>
    while((hsdadc->Instance->ISR & SDADC_ISR_JEOCF) != SDADC_ISR_JEOCF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b02      	cmp	r3, #2
 800497e:	d1e7      	bne.n	8004950 <HAL_SDADC_PollForInjectedConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d10d      	bne.n	80049aa <HAL_SDADC_PollForInjectedConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2202      	movs	r2, #2
 8004992:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f867 	bl	8004a68 <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRJOVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0204 	orr.w	r2, r2, #4
 80049a8:	60da      	str	r2, [r3, #12]
    }
    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	1e5a      	subs	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if(hsdadc->InjConvRemaining == 0UL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <HAL_SDADC_PollForInjectedConversion+0x9e>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Update SDADC state only if not continuous conversion, SW trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d114      	bne.n	80049f6 <HAL_SDADC_PollForInjectedConversion+0xd0>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d110      	bne.n	80049f6 <HAL_SDADC_PollForInjectedConversion+0xd0>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80049dc:	429a      	cmp	r2, r3
 80049de:	d10a      	bne.n	80049f6 <HAL_SDADC_PollForInjectedConversion+0xd0>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d101      	bne.n	80049ee <HAL_SDADC_PollForInjectedConversion+0xc8>
 80049ea:	2201      	movs	r2, #1
 80049ec:	e000      	b.n	80049f0 <HAL_SDADC_PollForInjectedConversion+0xca>
 80049ee:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Return function status */
    return HAL_OK;
 80049f6:	2300      	movs	r3, #0
  }
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_SDADC_InjectedStop>:
  * @note   This function should be called only if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedStop(SDADC_HandleTypeDef *hsdadc)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d007      	beq.n	8004a22 <HAL_SDADC_InjectedStop+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8004a18:	2b05      	cmp	r3, #5
 8004a1a:	d002      	beq.n	8004a22 <HAL_SDADC_InjectedStop+0x22>
  {
    /* Return error status */
    status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
 8004a20:	e004      	b.n	8004a2c <HAL_SDADC_InjectedStop+0x2c>
  }
  else
  {
    /* Stop injected conversion */
    status = SDADC_InjConvStop(hsdadc);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8d3 	bl	8004bce <SDADC_InjConvStop>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_SDADC_InjectedGetValue>:
  * @param  hsdadc SDADC handle.
  * @param  Channel Corresponding channel of injected conversion.
  * @retval Injected conversion value
  */
uint32_t HAL_SDADC_InjectedGetValue(SDADC_HandleTypeDef *hsdadc, uint32_t* Channel)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(Channel != ((void*) 0));

  /* Read SDADC_JDATAR register and extract channel and conversion value */
  value = hsdadc->Instance->JDATAR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a46:	60fb      	str	r3, [r7, #12]
  *Channel = ((value & SDADC_JDATAR_JDATACH) >> SDADC_JDATAR_CH_OFFSET);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	0e1b      	lsrs	r3, r3, #24
 8004a4c:	f003 020f 	and.w	r2, r3, #15
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	601a      	str	r2, [r3, #0]
  value &= SDADC_JDATAR_JDATA;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Return injected conversion value */
  return value;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004a92:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8004a94:	f7fd f956 	bl	8001d44 <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8004a9a:	e008      	b.n	8004aae <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8004a9c:	f7fd f952 	bl	8001d44 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2bc8      	cmp	r3, #200	@ 0xc8
 8004aa8:	d901      	bls.n	8004aae <SDADC_EnterInitMode+0x32>
    {
      return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e005      	b.n	8004aba <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	daf1      	bge.n	8004a9c <SDADC_EnterInitMode+0x20>
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004ad8:	601a      	str	r2, [r3, #0]
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b087      	sub	sp, #28
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e00d      	b.n	8004b1a <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d9ee      	bls.n	8004afe <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 8004b20:	697b      	ldr	r3, [r7, #20]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <SDADC_InjConvStart>:
  * @brief  This function allows to really start injected conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_InjConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]

  /* Initialize number of injected conversions remaining */
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1a      	ldr	r2, [r3, #32]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check injected trigger */
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <SDADC_InjConvStart+0x2e>
  {
    /* Set JSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JSWSTART;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b58:	605a      	str	r2, [r3, #4]
 8004b5a:	e025      	b.n	8004ba8 <SDADC_InjConvStart+0x7a>
  }
  else /* external or synchronous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff8d 	bl	8004a7c <SDADC_EnterInitMode>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d006      	beq.n	8004b76 <SDADC_InjConvStart+0x48>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	22ff      	movs	r2, #255	@ 0xff
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	73fb      	strb	r3, [r7, #15]
 8004b74:	e018      	b.n	8004ba8 <SDADC_InjConvStart+0x7a>
    }
    else
    {
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d108      	bne.n	8004b90 <SDADC_InjConvStart+0x62>
      {
        /* Set JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e008      	b.n	8004ba2 <SDADC_InjConvStart+0x74>
      }
      else /* external trigger */
      {
        /* Set JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff ff8d 	bl	8004ac2 <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <SDADC_InjConvStart+0x96>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                    HAL_SDADC_STATE_INJ : HAL_SDADC_STATE_REG_INJ;
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <SDADC_InjConvStart+0x8e>
 8004bb8:	2204      	movs	r2, #4
 8004bba:	e000      	b.n	8004bbe <SDADC_InjConvStart+0x90>
 8004bbc:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  /* Return function status */
  return status;
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <SDADC_InjConvStop>:
  * @brief  This function allows to really stop injected conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_InjConvStop(SDADC_HandleTypeDef* hsdadc)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;

  /* Check continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d10c      	bne.n	8004bf8 <SDADC_InjConvStop+0x2a>
  {
    /* Clear JEOCF by reading SDADC_JDATAR register */
    dummy_read_for_register_reset =  hsdadc->Instance->JDATAR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be4:	60bb      	str	r3, [r7, #8]
    UNUSED(dummy_read_for_register_reset);
 8004be6:	68bb      	ldr	r3, [r7, #8]

    /* Clear JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0220 	bic.w	r2, r2, #32
 8004bf6:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of injected conversion */
  tickstart = HAL_GetTick();
 8004bf8:	f7fd f8a4 	bl	8001d44 <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_JCIP) != 0UL)
 8004bfe:	e00c      	b.n	8004c1a <SDADC_InjConvStop+0x4c>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8004c00:	f7fd f8a0 	bl	8001d44 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c0c:	d905      	bls.n	8004c1a <SDADC_InjConvStop+0x4c>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	22ff      	movs	r2, #255	@ 0xff
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e053      	b.n	8004cc2 <SDADC_InjConvStop+0xf4>
  while((hsdadc->Instance->ISR & SDADC_ISR_JCIP) != 0UL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1eb      	bne.n	8004c00 <SDADC_InjConvStop+0x32>
    }
  }
  /* Check if trigger is not software */
  if(hsdadc->InjectedTrigger != SDADC_SOFTWARE_TRIGGER)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d023      	beq.n	8004c78 <SDADC_InjConvStop+0xaa>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff ff23 	bl	8004a7c <SDADC_EnterInitMode>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <SDADC_InjConvStop+0x7a>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	22ff      	movs	r2, #255	@ 0xff
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e03c      	b.n	8004cc2 <SDADC_InjConvStop+0xf4>
    }
    else
    {
      /* Check if trigger is synchronous */
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d108      	bne.n	8004c62 <SDADC_InjConvStop+0x94>
      {
        /* Clear JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	e007      	b.n	8004c72 <SDADC_InjConvStop+0xa4>
      }
      else /* external trigger */
      {
        /* Clear JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTEN);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8004c70:	605a      	str	r2, [r3, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff ff25 	bl	8004ac2 <SDADC_ExitInitMode>
    }
  }
  /* Check if continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d107      	bne.n	8004c90 <SDADC_InjConvStop+0xc2>
  {
    /* Restore JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0220 	orr.w	r2, r2, #32
 8004c8e:	605a      	str	r2, [r3, #4]
  }
  /* Clear JEOCF by reading SDADC_JDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->JDATAR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c96:	60bb      	str	r3, [r7, #8]
  UNUSED(dummy_read_for_register_reset);
 8004c98:	68bb      	ldr	r3, [r7, #8]

  /* Set CLRJOVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0204 	orr.w	r2, r2, #4
 8004ca8:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d101      	bne.n	8004cb8 <SDADC_InjConvStop+0xea>
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	e000      	b.n	8004cba <SDADC_InjConvStop+0xec>
 8004cb8:	2203      	movs	r2, #3
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e041      	b.n	8004d60 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fc feb7 	bl	8001a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f000 fa75 	bl	80051f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e049      	b.n	8004e14 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da0:	d01d      	beq.n	8004dde <HAL_TIM_Base_Start_IT+0x76>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e20 <HAL_TIM_Base_Start_IT+0xb8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d018      	beq.n	8004dde <HAL_TIM_Base_Start_IT+0x76>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e24 <HAL_TIM_Base_Start_IT+0xbc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <HAL_TIM_Base_Start_IT+0x76>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1b      	ldr	r2, [pc, #108]	@ (8004e28 <HAL_TIM_Base_Start_IT+0xc0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00e      	beq.n	8004dde <HAL_TIM_Base_Start_IT+0x76>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	@ (8004e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d009      	beq.n	8004dde <HAL_TIM_Base_Start_IT+0x76>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a18      	ldr	r2, [pc, #96]	@ (8004e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d004      	beq.n	8004dde <HAL_TIM_Base_Start_IT+0x76>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	@ (8004e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d111      	bne.n	8004e02 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b06      	cmp	r3, #6
 8004dee:	d010      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e00:	e007      	b.n	8004e12 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0201 	orr.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800
 8004e28:	40000c00 	.word	0x40000c00
 8004e2c:	40001800 	.word	0x40001800
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40015c00 	.word	0x40015c00

08004e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d020      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01b      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0202 	mvn.w	r2, #2
 8004e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f999 	bl	80051ba <HAL_TIM_IC_CaptureCallback>
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f98b 	bl	80051a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f99c 	bl	80051ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d020      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01b      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0204 	mvn.w	r2, #4
 8004eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f973 	bl	80051ba <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e005      	b.n	8004ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f965 	bl	80051a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f976 	bl	80051ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d020      	beq.n	8004f34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01b      	beq.n	8004f34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0208 	mvn.w	r2, #8
 8004f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2204      	movs	r2, #4
 8004f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f94d 	bl	80051ba <HAL_TIM_IC_CaptureCallback>
 8004f20:	e005      	b.n	8004f2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f93f 	bl	80051a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f950 	bl	80051ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d020      	beq.n	8004f80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01b      	beq.n	8004f80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0210 	mvn.w	r2, #16
 8004f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2208      	movs	r2, #8
 8004f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f927 	bl	80051ba <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f919 	bl	80051a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f92a 	bl	80051ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00c      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0201 	mvn.w	r2, #1
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc f98e 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fad6 	bl	8005574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00c      	beq.n	8004fec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8fb 	bl	80051e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0220 	mvn.w	r2, #32
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 faa8 	bl	8005560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005010:	bf00      	nop
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_TIM_ConfigClockSource+0x1c>
 8005030:	2302      	movs	r3, #2
 8005032:	e0b4      	b.n	800519e <HAL_TIM_ConfigClockSource+0x186>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800505a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800506c:	d03e      	beq.n	80050ec <HAL_TIM_ConfigClockSource+0xd4>
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005072:	f200 8087 	bhi.w	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800507a:	f000 8086 	beq.w	800518a <HAL_TIM_ConfigClockSource+0x172>
 800507e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005082:	d87f      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b70      	cmp	r3, #112	@ 0x70
 8005086:	d01a      	beq.n	80050be <HAL_TIM_ConfigClockSource+0xa6>
 8005088:	2b70      	cmp	r3, #112	@ 0x70
 800508a:	d87b      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b60      	cmp	r3, #96	@ 0x60
 800508e:	d050      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x11a>
 8005090:	2b60      	cmp	r3, #96	@ 0x60
 8005092:	d877      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b50      	cmp	r3, #80	@ 0x50
 8005096:	d03c      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0xfa>
 8005098:	2b50      	cmp	r3, #80	@ 0x50
 800509a:	d873      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b40      	cmp	r3, #64	@ 0x40
 800509e:	d058      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x13a>
 80050a0:	2b40      	cmp	r3, #64	@ 0x40
 80050a2:	d86f      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b30      	cmp	r3, #48	@ 0x30
 80050a6:	d064      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050a8:	2b30      	cmp	r3, #48	@ 0x30
 80050aa:	d86b      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d060      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d867      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d05c      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d05a      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050bc:	e062      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ce:	f000 f9b3 	bl	8005438 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	609a      	str	r2, [r3, #8]
      break;
 80050ea:	e04f      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050fc:	f000 f99c 	bl	8005438 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800510e:	609a      	str	r2, [r3, #8]
      break;
 8005110:	e03c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511e:	461a      	mov	r2, r3
 8005120:	f000 f910 	bl	8005344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2150      	movs	r1, #80	@ 0x50
 800512a:	4618      	mov	r0, r3
 800512c:	f000 f969 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005130:	e02c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800513e:	461a      	mov	r2, r3
 8005140:	f000 f92f 	bl	80053a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2160      	movs	r1, #96	@ 0x60
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f959 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005150:	e01c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800515e:	461a      	mov	r2, r3
 8005160:	f000 f8f0 	bl	8005344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2140      	movs	r1, #64	@ 0x40
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f949 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005170:	e00c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f000 f940 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005182:	e003      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
      break;
 8005188:	e000      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800518a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520e:	d00f      	beq.n	8005230 <TIM_Base_SetConfig+0x38>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a42      	ldr	r2, [pc, #264]	@ (800531c <TIM_Base_SetConfig+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00b      	beq.n	8005230 <TIM_Base_SetConfig+0x38>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a41      	ldr	r2, [pc, #260]	@ (8005320 <TIM_Base_SetConfig+0x128>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_Base_SetConfig+0x38>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a40      	ldr	r2, [pc, #256]	@ (8005324 <TIM_Base_SetConfig+0x12c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_Base_SetConfig+0x38>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a3f      	ldr	r2, [pc, #252]	@ (8005328 <TIM_Base_SetConfig+0x130>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d108      	bne.n	8005242 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005248:	d027      	beq.n	800529a <TIM_Base_SetConfig+0xa2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a33      	ldr	r2, [pc, #204]	@ (800531c <TIM_Base_SetConfig+0x124>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d023      	beq.n	800529a <TIM_Base_SetConfig+0xa2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a32      	ldr	r2, [pc, #200]	@ (8005320 <TIM_Base_SetConfig+0x128>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01f      	beq.n	800529a <TIM_Base_SetConfig+0xa2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a31      	ldr	r2, [pc, #196]	@ (8005324 <TIM_Base_SetConfig+0x12c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01b      	beq.n	800529a <TIM_Base_SetConfig+0xa2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a31      	ldr	r2, [pc, #196]	@ (800532c <TIM_Base_SetConfig+0x134>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d017      	beq.n	800529a <TIM_Base_SetConfig+0xa2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a30      	ldr	r2, [pc, #192]	@ (8005330 <TIM_Base_SetConfig+0x138>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <TIM_Base_SetConfig+0xa2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2f      	ldr	r2, [pc, #188]	@ (8005334 <TIM_Base_SetConfig+0x13c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00f      	beq.n	800529a <TIM_Base_SetConfig+0xa2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2e      	ldr	r2, [pc, #184]	@ (8005338 <TIM_Base_SetConfig+0x140>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00b      	beq.n	800529a <TIM_Base_SetConfig+0xa2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a2d      	ldr	r2, [pc, #180]	@ (800533c <TIM_Base_SetConfig+0x144>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d007      	beq.n	800529a <TIM_Base_SetConfig+0xa2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a2c      	ldr	r2, [pc, #176]	@ (8005340 <TIM_Base_SetConfig+0x148>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d003      	beq.n	800529a <TIM_Base_SetConfig+0xa2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a24      	ldr	r2, [pc, #144]	@ (8005328 <TIM_Base_SetConfig+0x130>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d108      	bne.n	80052ac <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <TIM_Base_SetConfig+0x140>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d007      	beq.n	80052e8 <TIM_Base_SetConfig+0xf0>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a18      	ldr	r2, [pc, #96]	@ (800533c <TIM_Base_SetConfig+0x144>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0xf0>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a17      	ldr	r2, [pc, #92]	@ (8005340 <TIM_Base_SetConfig+0x148>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d103      	bne.n	80052f0 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d105      	bne.n	800530e <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	611a      	str	r2, [r3, #16]
  }
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40015c00 	.word	0x40015c00
 800532c:	40001800 	.word	0x40001800
 8005330:	40001c00 	.word	0x40001c00
 8005334:	40002000 	.word	0x40002000
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800536e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 030a 	bic.w	r3, r3, #10
 8005380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b087      	sub	sp, #28
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f023 0210 	bic.w	r2, r3, #16
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	031b      	lsls	r3, r3, #12
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	f043 0307 	orr.w	r3, r3, #7
 8005424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	609a      	str	r2, [r3, #8]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	021a      	lsls	r2, r3, #8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	431a      	orrs	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4313      	orrs	r3, r2
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	609a      	str	r2, [r3, #8]
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800548c:	2302      	movs	r3, #2
 800548e:	e055      	b.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d2:	d01d      	beq.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d018      	beq.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1a      	ldr	r2, [pc, #104]	@ (800554c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a18      	ldr	r2, [pc, #96]	@ (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00e      	beq.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a17      	ldr	r2, [pc, #92]	@ (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d009      	beq.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d004      	beq.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a14      	ldr	r2, [pc, #80]	@ (800555c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d10c      	bne.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	4313      	orrs	r3, r2
 8005520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40000400 	.word	0x40000400
 800554c:	40000800 	.word	0x40000800
 8005550:	40000c00 	.word	0x40000c00
 8005554:	40001800 	.word	0x40001800
 8005558:	40014000 	.word	0x40014000
 800555c:	40015c00 	.word	0x40015c00

08005560 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e040      	b.n	800561c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc fa9a 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2224      	movs	r2, #36	@ 0x24
 80055b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fcec 	bl	8005fac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb6f 	bl	8005cb8 <UART_SetConfig>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e01b      	b.n	800561c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fd6b 	bl	80060f0 <UART_CheckIdleState>
 800561a:	4603      	mov	r3, r0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	@ 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	4613      	mov	r3, r2
 8005630:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005638:	2b20      	cmp	r3, #32
 800563a:	d132      	bne.n	80056a2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_UART_Receive_IT+0x24>
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e02b      	b.n	80056a4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d018      	beq.n	8005692 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	613b      	str	r3, [r7, #16]
   return(result);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	623b      	str	r3, [r7, #32]
 8005680:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	69f9      	ldr	r1, [r7, #28]
 8005684:	6a3a      	ldr	r2, [r7, #32]
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	61bb      	str	r3, [r7, #24]
   return(result);
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e6      	bne.n	8005660 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	461a      	mov	r2, r3
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fe3f 	bl	800631c <UART_Start_Receive_IT>
 800569e:	4603      	mov	r3, r0
 80056a0:	e000      	b.n	80056a4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80056a2:	2302      	movs	r3, #2
  }
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3728      	adds	r7, #40	@ 0x28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b0ba      	sub	sp, #232	@ 0xe8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80056d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80056da:	4013      	ands	r3, r2
 80056dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80056e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d115      	bne.n	8005714 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00f      	beq.n	8005714 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d009      	beq.n	8005714 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 82ab 	beq.w	8005c60 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3
      }
      return;
 8005712:	e2a5      	b.n	8005c60 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8117 	beq.w	800594c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800571e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800572a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800572e:	4b85      	ldr	r3, [pc, #532]	@ (8005944 <HAL_UART_IRQHandler+0x298>)
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 810a 	beq.w	800594c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d011      	beq.n	8005768 <HAL_UART_IRQHandler+0xbc>
 8005744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00b      	beq.n	8005768 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d011      	beq.n	8005798 <HAL_UART_IRQHandler+0xec>
 8005774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2202      	movs	r2, #2
 8005786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800578e:	f043 0204 	orr.w	r2, r3, #4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d011      	beq.n	80057c8 <HAL_UART_IRQHandler+0x11c>
 80057a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2204      	movs	r2, #4
 80057b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057be:	f043 0202 	orr.w	r2, r3, #2
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d017      	beq.n	8005804 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d105      	bne.n	80057ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2208      	movs	r2, #8
 80057f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057fa:	f043 0208 	orr.w	r2, r3, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800580c:	2b00      	cmp	r3, #0
 800580e:	d012      	beq.n	8005836 <HAL_UART_IRQHandler+0x18a>
 8005810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005814:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8211 	beq.w	8005c64 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00d      	beq.n	800586a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005870:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587e:	2b40      	cmp	r3, #64	@ 0x40
 8005880:	d005      	beq.n	800588e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005886:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800588a:	2b00      	cmp	r3, #0
 800588c:	d04f      	beq.n	800592e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fdf8 	bl	8006484 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589e:	2b40      	cmp	r3, #64	@ 0x40
 80058a0:	d141      	bne.n	8005926 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3308      	adds	r3, #8
 80058a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1d9      	bne.n	80058a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d013      	beq.n	800591e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058fa:	4a13      	ldr	r2, [pc, #76]	@ (8005948 <HAL_UART_IRQHandler+0x29c>)
 80058fc:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd f89c 	bl	8002a40 <HAL_DMA_Abort_IT>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d017      	beq.n	800593e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005918:	4610      	mov	r0, r2
 800591a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591c:	e00f      	b.n	800593e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f9b4 	bl	8005c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	e00b      	b.n	800593e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f9b0 	bl	8005c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592c:	e007      	b.n	800593e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f9ac 	bl	8005c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800593c:	e192      	b.n	8005c64 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593e:	bf00      	nop
    return;
 8005940:	e190      	b.n	8005c64 <HAL_UART_IRQHandler+0x5b8>
 8005942:	bf00      	nop
 8005944:	04000120 	.word	0x04000120
 8005948:	0800654d 	.word	0x0800654d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005950:	2b01      	cmp	r3, #1
 8005952:	f040 814b 	bne.w	8005bec <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 8144 	beq.w	8005bec <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 813d 	beq.w	8005bec <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2210      	movs	r2, #16
 8005978:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005984:	2b40      	cmp	r3, #64	@ 0x40
 8005986:	f040 80b5 	bne.w	8005af4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005996:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8164 	beq.w	8005c68 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059aa:	429a      	cmp	r2, r3
 80059ac:	f080 815c 	bcs.w	8005c68 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	f000 8086 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059f4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1da      	bne.n	80059c6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a34:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a38:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e1      	bne.n	8005a10 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e3      	bne.n	8005a4c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa2:	f023 0310 	bic.w	r3, r3, #16
 8005aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ab6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005aba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e4      	bne.n	8005a92 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fc ff79 	bl	80029c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f8d7 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005af2:	e0b9      	b.n	8005c68 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80ab 	beq.w	8005c6c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005b16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80a6 	beq.w	8005c6c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b44:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e4      	bne.n	8005b20 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	623b      	str	r3, [r7, #32]
   return(result);
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3308      	adds	r3, #8
 8005b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e3      	bne.n	8005b56 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0310 	bic.w	r3, r3, #16
 8005bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	69b9      	ldr	r1, [r7, #24]
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e4      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f85b 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bea:	e03f      	b.n	8005c6c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00e      	beq.n	8005c16 <HAL_UART_IRQHandler+0x56a>
 8005bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fe84 	bl	800691c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c14:	e02d      	b.n	8005c72 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00e      	beq.n	8005c40 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d008      	beq.n	8005c40 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01c      	beq.n	8005c70 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	4798      	blx	r3
    }
    return;
 8005c3e:	e017      	b.n	8005c70 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d012      	beq.n	8005c72 <HAL_UART_IRQHandler+0x5c6>
 8005c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00c      	beq.n	8005c72 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fc8d 	bl	8006578 <UART_EndTransmit_IT>
    return;
 8005c5e:	e008      	b.n	8005c72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005c60:	bf00      	nop
 8005c62:	e006      	b.n	8005c72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005c64:	bf00      	nop
 8005c66:	e004      	b.n	8005c72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005c68:	bf00      	nop
 8005c6a:	e002      	b.n	8005c72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005c6c:	bf00      	nop
 8005c6e:	e000      	b.n	8005c72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005c70:	bf00      	nop
  }

}
 8005c72:	37e8      	adds	r7, #232	@ 0xe8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005ce6:	f023 030c 	bic.w	r3, r3, #12
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	6979      	ldr	r1, [r7, #20]
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a99      	ldr	r2, [pc, #612]	@ (8005f98 <UART_SetConfig+0x2e0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d120      	bne.n	8005d7a <UART_SetConfig+0xc2>
 8005d38:	4b98      	ldr	r3, [pc, #608]	@ (8005f9c <UART_SetConfig+0x2e4>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d817      	bhi.n	8005d74 <UART_SetConfig+0xbc>
 8005d44:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <UART_SetConfig+0x94>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d69 	.word	0x08005d69
 8005d54:	08005d6f 	.word	0x08005d6f
 8005d58:	08005d63 	.word	0x08005d63
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e061      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005d62:	2302      	movs	r3, #2
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	e05e      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	e05b      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005d6e:	2308      	movs	r3, #8
 8005d70:	77fb      	strb	r3, [r7, #31]
 8005d72:	e058      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005d74:	2310      	movs	r3, #16
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e055      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a88      	ldr	r2, [pc, #544]	@ (8005fa0 <UART_SetConfig+0x2e8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d124      	bne.n	8005dce <UART_SetConfig+0x116>
 8005d84:	4b85      	ldr	r3, [pc, #532]	@ (8005f9c <UART_SetConfig+0x2e4>)
 8005d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d90:	d011      	beq.n	8005db6 <UART_SetConfig+0xfe>
 8005d92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d96:	d817      	bhi.n	8005dc8 <UART_SetConfig+0x110>
 8005d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d9c:	d011      	beq.n	8005dc2 <UART_SetConfig+0x10a>
 8005d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005da2:	d811      	bhi.n	8005dc8 <UART_SetConfig+0x110>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <UART_SetConfig+0xf8>
 8005da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dac:	d006      	beq.n	8005dbc <UART_SetConfig+0x104>
 8005dae:	e00b      	b.n	8005dc8 <UART_SetConfig+0x110>
 8005db0:	2300      	movs	r3, #0
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e037      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005db6:	2302      	movs	r3, #2
 8005db8:	77fb      	strb	r3, [r7, #31]
 8005dba:	e034      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e031      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	77fb      	strb	r3, [r7, #31]
 8005dc6:	e02e      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e02b      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a74      	ldr	r2, [pc, #464]	@ (8005fa4 <UART_SetConfig+0x2ec>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d124      	bne.n	8005e22 <UART_SetConfig+0x16a>
 8005dd8:	4b70      	ldr	r3, [pc, #448]	@ (8005f9c <UART_SetConfig+0x2e4>)
 8005dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ddc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005de0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005de4:	d011      	beq.n	8005e0a <UART_SetConfig+0x152>
 8005de6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005dea:	d817      	bhi.n	8005e1c <UART_SetConfig+0x164>
 8005dec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005df0:	d011      	beq.n	8005e16 <UART_SetConfig+0x15e>
 8005df2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005df6:	d811      	bhi.n	8005e1c <UART_SetConfig+0x164>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <UART_SetConfig+0x14c>
 8005dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e00:	d006      	beq.n	8005e10 <UART_SetConfig+0x158>
 8005e02:	e00b      	b.n	8005e1c <UART_SetConfig+0x164>
 8005e04:	2300      	movs	r3, #0
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e00d      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e00a      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005e10:	2304      	movs	r3, #4
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e007      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005e16:	2308      	movs	r3, #8
 8005e18:	77fb      	strb	r3, [r7, #31]
 8005e1a:	e004      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	77fb      	strb	r3, [r7, #31]
 8005e20:	e001      	b.n	8005e26 <UART_SetConfig+0x16e>
 8005e22:	2310      	movs	r3, #16
 8005e24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e2e:	d15a      	bne.n	8005ee6 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8005e30:	7ffb      	ldrb	r3, [r7, #31]
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d827      	bhi.n	8005e86 <UART_SetConfig+0x1ce>
 8005e36:	a201      	add	r2, pc, #4	@ (adr r2, 8005e3c <UART_SetConfig+0x184>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e69 	.word	0x08005e69
 8005e44:	08005e71 	.word	0x08005e71
 8005e48:	08005e87 	.word	0x08005e87
 8005e4c:	08005e77 	.word	0x08005e77
 8005e50:	08005e87 	.word	0x08005e87
 8005e54:	08005e87 	.word	0x08005e87
 8005e58:	08005e87 	.word	0x08005e87
 8005e5c:	08005e7f 	.word	0x08005e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e60:	f7fe f9d4 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 8005e64:	61b8      	str	r0, [r7, #24]
        break;
 8005e66:	e013      	b.n	8005e90 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e68:	f7fe f9f2 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 8005e6c:	61b8      	str	r0, [r7, #24]
        break;
 8005e6e:	e00f      	b.n	8005e90 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b4d      	ldr	r3, [pc, #308]	@ (8005fa8 <UART_SetConfig+0x2f0>)
 8005e72:	61bb      	str	r3, [r7, #24]
        break;
 8005e74:	e00c      	b.n	8005e90 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fe f969 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8005e7a:	61b8      	str	r0, [r7, #24]
        break;
 8005e7c:	e008      	b.n	8005e90 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e82:	61bb      	str	r3, [r7, #24]
        break;
 8005e84:	e004      	b.n	8005e90 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	77bb      	strb	r3, [r7, #30]
        break;
 8005e8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d074      	beq.n	8005f80 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	005a      	lsls	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	441a      	add	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b0f      	cmp	r3, #15
 8005eb0:	d916      	bls.n	8005ee0 <UART_SetConfig+0x228>
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb8:	d212      	bcs.n	8005ee0 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f023 030f 	bic.w	r3, r3, #15
 8005ec2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	89fb      	ldrh	r3, [r7, #14]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	89fa      	ldrh	r2, [r7, #14]
 8005edc:	60da      	str	r2, [r3, #12]
 8005ede:	e04f      	b.n	8005f80 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	77bb      	strb	r3, [r7, #30]
 8005ee4:	e04c      	b.n	8005f80 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ee6:	7ffb      	ldrb	r3, [r7, #31]
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d828      	bhi.n	8005f3e <UART_SetConfig+0x286>
 8005eec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <UART_SetConfig+0x23c>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	08005f3f 	.word	0x08005f3f
 8005f04:	08005f2f 	.word	0x08005f2f
 8005f08:	08005f3f 	.word	0x08005f3f
 8005f0c:	08005f3f 	.word	0x08005f3f
 8005f10:	08005f3f 	.word	0x08005f3f
 8005f14:	08005f37 	.word	0x08005f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fe f978 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 8005f1c:	61b8      	str	r0, [r7, #24]
        break;
 8005f1e:	e013      	b.n	8005f48 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7fe f996 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 8005f24:	61b8      	str	r0, [r7, #24]
        break;
 8005f26:	e00f      	b.n	8005f48 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b1f      	ldr	r3, [pc, #124]	@ (8005fa8 <UART_SetConfig+0x2f0>)
 8005f2a:	61bb      	str	r3, [r7, #24]
        break;
 8005f2c:	e00c      	b.n	8005f48 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fe f90d 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8005f32:	61b8      	str	r0, [r7, #24]
        break;
 8005f34:	e008      	b.n	8005f48 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f3a:	61bb      	str	r3, [r7, #24]
        break;
 8005f3c:	e004      	b.n	8005f48 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	77bb      	strb	r3, [r7, #30]
        break;
 8005f46:	bf00      	nop
    }

    if (pclk != 0U)
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d018      	beq.n	8005f80 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	085a      	lsrs	r2, r3, #1
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	441a      	add	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b0f      	cmp	r3, #15
 8005f66:	d909      	bls.n	8005f7c <UART_SetConfig+0x2c4>
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f6e:	d205      	bcs.n	8005f7c <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	e001      	b.n	8005f80 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005f8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40013800 	.word	0x40013800
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40004400 	.word	0x40004400
 8005fa4:	40004800 	.word	0x40004800
 8005fa8:	007a1200 	.word	0x007a1200

08005fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01a      	beq.n	80060c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060aa:	d10a      	bne.n	80060c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b098      	sub	sp, #96	@ 0x60
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006100:	f7fb fe20 	bl	8001d44 <HAL_GetTick>
 8006104:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b08      	cmp	r3, #8
 8006112:	d12e      	bne.n	8006172 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006114:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800611c:	2200      	movs	r2, #0
 800611e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f88c 	bl	8006240 <UART_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d021      	beq.n	8006172 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800613c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006142:	653b      	str	r3, [r7, #80]	@ 0x50
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800614c:	647b      	str	r3, [r7, #68]	@ 0x44
 800614e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800615a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e6      	bne.n	800612e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e062      	b.n	8006238 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b04      	cmp	r3, #4
 800617e:	d149      	bne.n	8006214 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006180:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006188:	2200      	movs	r2, #0
 800618a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f856 	bl	8006240 <UART_WaitOnFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d03c      	beq.n	8006214 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	623b      	str	r3, [r7, #32]
   return(result);
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e6      	bne.n	800619a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3308      	adds	r3, #8
 80061d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	60fb      	str	r3, [r7, #12]
   return(result);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3308      	adds	r3, #8
 80061ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061ec:	61fa      	str	r2, [r7, #28]
 80061ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	69b9      	ldr	r1, [r7, #24]
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	617b      	str	r3, [r7, #20]
   return(result);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e5      	bne.n	80061cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e011      	b.n	8006238 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3758      	adds	r7, #88	@ 0x58
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006250:	e04f      	b.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d04b      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625a:	f7fb fd73 	bl	8001d44 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	429a      	cmp	r2, r3
 8006268:	d302      	bcc.n	8006270 <UART_WaitOnFlagUntilTimeout+0x30>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e04e      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d037      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b80      	cmp	r3, #128	@ 0x80
 8006286:	d034      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b40      	cmp	r3, #64	@ 0x40
 800628c:	d031      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d110      	bne.n	80062be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2208      	movs	r2, #8
 80062a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f8ed 	bl	8006484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2208      	movs	r2, #8
 80062ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e029      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062cc:	d111      	bne.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f8d3 	bl	8006484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e00f      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4013      	ands	r3, r2
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	bf0c      	ite	eq
 8006302:	2301      	moveq	r3, #1
 8006304:	2300      	movne	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	429a      	cmp	r2, r3
 800630e:	d0a0      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800631c:	b480      	push	{r7}
 800631e:	b097      	sub	sp, #92	@ 0x5c
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	4613      	mov	r3, r2
 8006328:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	88fa      	ldrh	r2, [r7, #6]
 800633c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800634e:	d10e      	bne.n	800636e <UART_Start_Receive_IT+0x52>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <UART_Start_Receive_IT+0x48>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800635e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006362:	e01a      	b.n	800639a <UART_Start_Receive_IT+0x7e>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	22ff      	movs	r2, #255	@ 0xff
 8006368:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800636c:	e015      	b.n	800639a <UART_Start_Receive_IT+0x7e>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10d      	bne.n	8006392 <UART_Start_Receive_IT+0x76>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <UART_Start_Receive_IT+0x6c>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	22ff      	movs	r2, #255	@ 0xff
 8006382:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006386:	e008      	b.n	800639a <UART_Start_Receive_IT+0x7e>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	227f      	movs	r2, #127	@ 0x7f
 800638c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006390:	e003      	b.n	800639a <UART_Start_Receive_IT+0x7e>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2222      	movs	r2, #34	@ 0x22
 80063a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3308      	adds	r3, #8
 80063b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3308      	adds	r3, #8
 80063c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063ca:	64ba      	str	r2, [r7, #72]	@ 0x48
 80063cc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80063d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e5      	bne.n	80063aa <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e6:	d107      	bne.n	80063f8 <UART_Start_Receive_IT+0xdc>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a22      	ldr	r2, [pc, #136]	@ (800647c <UART_Start_Receive_IT+0x160>)
 80063f4:	669a      	str	r2, [r3, #104]	@ 0x68
 80063f6:	e002      	b.n	80063fe <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4a21      	ldr	r2, [pc, #132]	@ (8006480 <UART_Start_Receive_IT+0x164>)
 80063fc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d019      	beq.n	800643a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006416:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800641a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006424:	637b      	str	r3, [r7, #52]	@ 0x34
 8006426:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800642a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_Start_Receive_IT+0xea>
 8006438:	e018      	b.n	800646c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	613b      	str	r3, [r7, #16]
   return(result);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f043 0320 	orr.w	r3, r3, #32
 800644e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006458:	623b      	str	r3, [r7, #32]
 800645a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	69f9      	ldr	r1, [r7, #28]
 800645e:	6a3a      	ldr	r2, [r7, #32]
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	61bb      	str	r3, [r7, #24]
   return(result);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e6      	bne.n	800643a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	375c      	adds	r7, #92	@ 0x5c
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	08006775 	.word	0x08006775
 8006480:	080065cd 	.word	0x080065cd

08006484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b095      	sub	sp, #84	@ 0x54
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e6      	bne.n	800648c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f023 0301 	bic.w	r3, r3, #1
 80064d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3308      	adds	r3, #8
 80064dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e5      	bne.n	80064be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d118      	bne.n	800652c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	60bb      	str	r3, [r7, #8]
   return(result);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f023 0310 	bic.w	r3, r3, #16
 800650e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6979      	ldr	r1, [r7, #20]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	613b      	str	r3, [r7, #16]
   return(result);
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e6      	bne.n	80064fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006540:	bf00      	nop
 8006542:	3754      	adds	r7, #84	@ 0x54
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f7ff fb8e 	bl	8005c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006570:	bf00      	nop
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	60bb      	str	r3, [r7, #8]
   return(result);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6979      	ldr	r1, [r7, #20]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	613b      	str	r3, [r7, #16]
   return(result);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e6      	bne.n	8006580 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff fb5a 	bl	8005c78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065c4:	bf00      	nop
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b09c      	sub	sp, #112	@ 0x70
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065e4:	2b22      	cmp	r3, #34	@ 0x22
 80065e6:	f040 80b9 	bne.w	800675c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80065f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065f8:	b2d9      	uxtb	r1, r3
 80065fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006604:	400a      	ands	r2, r1
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 809c 	bne.w	800676c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006652:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006654:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006658:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e6      	bne.n	8006634 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	667b      	str	r3, [r7, #100]	@ 0x64
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006686:	647a      	str	r2, [r7, #68]	@ 0x44
 8006688:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800668c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d018      	beq.n	80066ee <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	623b      	str	r3, [r7, #32]
   return(result);
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066da:	633b      	str	r3, [r7, #48]	@ 0x30
 80066dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e6      	bne.n	80066bc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d12e      	bne.n	8006754 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	60fb      	str	r3, [r7, #12]
   return(result);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f023 0310 	bic.w	r3, r3, #16
 8006710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	69b9      	ldr	r1, [r7, #24]
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	617b      	str	r3, [r7, #20]
   return(result);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e6      	bne.n	80066fc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	2b10      	cmp	r3, #16
 800673a:	d103      	bne.n	8006744 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2210      	movs	r2, #16
 8006742:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff faa7 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006752:	e00b      	b.n	800676c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7fa fecb 	bl	80014f0 <HAL_UART_RxCpltCallback>
}
 800675a:	e007      	b.n	800676c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0208 	orr.w	r2, r2, #8
 800676a:	619a      	str	r2, [r3, #24]
}
 800676c:	bf00      	nop
 800676e:	3770      	adds	r7, #112	@ 0x70
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b09c      	sub	sp, #112	@ 0x70
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006782:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800678c:	2b22      	cmp	r3, #34	@ 0x22
 800678e:	f040 80b9 	bne.w	8006904 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006798:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80067a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80067a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067aa:	4013      	ands	r3, r2
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b6:	1c9a      	adds	r2, r3, #2
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f040 809c 	bne.w	8006914 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80067ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80067fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006800:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e6      	bne.n	80067dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	f023 0301 	bic.w	r3, r3, #1
 8006824:	663b      	str	r3, [r7, #96]	@ 0x60
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3308      	adds	r3, #8
 800682c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800682e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006830:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e5      	bne.n	800680e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d018      	beq.n	8006896 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	61fb      	str	r3, [r7, #28]
   return(result);
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006878:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006884:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e6      	bne.n	8006864 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800689a:	2b01      	cmp	r3, #1
 800689c:	d12e      	bne.n	80068fc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f023 0310 	bic.w	r3, r3, #16
 80068b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6979      	ldr	r1, [r7, #20]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	613b      	str	r3, [r7, #16]
   return(result);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e6      	bne.n	80068a4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	2b10      	cmp	r3, #16
 80068e2:	d103      	bne.n	80068ec <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2210      	movs	r2, #16
 80068ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff f9d3 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068fa:	e00b      	b.n	8006914 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7fa fdf7 	bl	80014f0 <HAL_UART_RxCpltCallback>
}
 8006902:	e007      	b.n	8006914 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0208 	orr.w	r2, r2, #8
 8006912:	619a      	str	r2, [r3, #24]
}
 8006914:	bf00      	nop
 8006916:	3770      	adds	r7, #112	@ 0x70
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <memset>:
 8006930:	4402      	add	r2, r0
 8006932:	4603      	mov	r3, r0
 8006934:	4293      	cmp	r3, r2
 8006936:	d100      	bne.n	800693a <memset+0xa>
 8006938:	4770      	bx	lr
 800693a:	f803 1b01 	strb.w	r1, [r3], #1
 800693e:	e7f9      	b.n	8006934 <memset+0x4>

08006940 <__libc_init_array>:
 8006940:	b570      	push	{r4, r5, r6, lr}
 8006942:	4d0d      	ldr	r5, [pc, #52]	@ (8006978 <__libc_init_array+0x38>)
 8006944:	4c0d      	ldr	r4, [pc, #52]	@ (800697c <__libc_init_array+0x3c>)
 8006946:	1b64      	subs	r4, r4, r5
 8006948:	10a4      	asrs	r4, r4, #2
 800694a:	2600      	movs	r6, #0
 800694c:	42a6      	cmp	r6, r4
 800694e:	d109      	bne.n	8006964 <__libc_init_array+0x24>
 8006950:	4d0b      	ldr	r5, [pc, #44]	@ (8006980 <__libc_init_array+0x40>)
 8006952:	4c0c      	ldr	r4, [pc, #48]	@ (8006984 <__libc_init_array+0x44>)
 8006954:	f000 f818 	bl	8006988 <_init>
 8006958:	1b64      	subs	r4, r4, r5
 800695a:	10a4      	asrs	r4, r4, #2
 800695c:	2600      	movs	r6, #0
 800695e:	42a6      	cmp	r6, r4
 8006960:	d105      	bne.n	800696e <__libc_init_array+0x2e>
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	f855 3b04 	ldr.w	r3, [r5], #4
 8006968:	4798      	blx	r3
 800696a:	3601      	adds	r6, #1
 800696c:	e7ee      	b.n	800694c <__libc_init_array+0xc>
 800696e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006972:	4798      	blx	r3
 8006974:	3601      	adds	r6, #1
 8006976:	e7f2      	b.n	800695e <__libc_init_array+0x1e>
 8006978:	08006a68 	.word	0x08006a68
 800697c:	08006a68 	.word	0x08006a68
 8006980:	08006a68 	.word	0x08006a68
 8006984:	08006a6c 	.word	0x08006a6c

08006988 <_init>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	bf00      	nop
 800698c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698e:	bc08      	pop	{r3}
 8006990:	469e      	mov	lr, r3
 8006992:	4770      	bx	lr

08006994 <_fini>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr
