
VDA_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f20  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080070a8  080070a8  000080a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007168  08007168  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007168  08007168  00008168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007170  08007170  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007170  08007170  00008170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007174  08007174  00008174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007178  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000010  08007188  00009010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08007188  0000929c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152c3  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a5  00000000  00000000  0001e303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  000214a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e97  00000000  00000000  00022760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccf5  00000000  00000000  000235f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172b2  00000000  00000000  000402ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab177  00000000  00000000  0005759e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa8  00000000  00000000  00102758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00107700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007090 	.word	0x08007090

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007090 	.word	0x08007090

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	@ 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <__gedf2>:
 8000978:	f04f 3cff 	mov.w	ip, #4294967295
 800097c:	e006      	b.n	800098c <__cmpdf2+0x4>
 800097e:	bf00      	nop

08000980 <__ledf2>:
 8000980:	f04f 0c01 	mov.w	ip, #1
 8000984:	e002      	b.n	800098c <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__cmpdf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	bf18      	it	ne
 800099e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a2:	d01b      	beq.n	80009dc <__cmpdf2+0x54>
 80009a4:	b001      	add	sp, #4
 80009a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009aa:	bf0c      	ite	eq
 80009ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b0:	ea91 0f03 	teqne	r1, r3
 80009b4:	bf02      	ittt	eq
 80009b6:	ea90 0f02 	teqeq	r0, r2
 80009ba:	2000      	moveq	r0, #0
 80009bc:	4770      	bxeq	lr
 80009be:	f110 0f00 	cmn.w	r0, #0
 80009c2:	ea91 0f03 	teq	r1, r3
 80009c6:	bf58      	it	pl
 80009c8:	4299      	cmppl	r1, r3
 80009ca:	bf08      	it	eq
 80009cc:	4290      	cmpeq	r0, r2
 80009ce:	bf2c      	ite	cs
 80009d0:	17d8      	asrcs	r0, r3, #31
 80009d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d6:	f040 0001 	orr.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	d102      	bne.n	80009ec <__cmpdf2+0x64>
 80009e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ea:	d107      	bne.n	80009fc <__cmpdf2+0x74>
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d1d6      	bne.n	80009a4 <__cmpdf2+0x1c>
 80009f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fa:	d0d3      	beq.n	80009a4 <__cmpdf2+0x1c>
 80009fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_cdrcmple>:
 8000a04:	4684      	mov	ip, r0
 8000a06:	4610      	mov	r0, r2
 8000a08:	4662      	mov	r2, ip
 8000a0a:	468c      	mov	ip, r1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4663      	mov	r3, ip
 8000a10:	e000      	b.n	8000a14 <__aeabi_cdcmpeq>
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdcmpeq>:
 8000a14:	b501      	push	{r0, lr}
 8000a16:	f7ff ffb7 	bl	8000988 <__cmpdf2>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	bf48      	it	mi
 8000a1e:	f110 0f00 	cmnmi.w	r0, #0
 8000a22:	bd01      	pop	{r0, pc}

08000a24 <__aeabi_dcmpeq>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff fff4 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2001      	moveq	r0, #1
 8000a30:	2000      	movne	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmplt>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffea 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a40:	bf34      	ite	cc
 8000a42:	2001      	movcc	r0, #1
 8000a44:	2000      	movcs	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmple>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffe0 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpge>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffce 	bl	8000a04 <__aeabi_cdrcmple>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpgt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffc4 	bl	8000a04 <__aeabi_cdrcmple>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <PIDController_Init>:
 *      Author: leank
 */
#include "PID.h"


void PIDController_Init(PIDController *pid){
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	// Hacemos cero las variables

	pid->integrador=0.0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
	pid->errorprev=0.0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->derivador=0.0;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f04f 0200 	mov.w	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->medicionPrev=0.0;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f04f 0200 	mov.w	r2, #0
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->out=0;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f04f 0200 	mov.w	r2, #0
 8000b96:	631a      	str	r2, [r3, #48]	@ 0x30

}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement){
 8000ba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	ed87 0a02 	vstr	s0, [r7, #8]
 8000bb2:	edc7 0a01 	vstr	s1, [r7, #4]

	// Señal de error

	float error1;
	error1= setpoint - measurement;
 8000bb6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc2:	edc7 7a05 	vstr	s15, [r7, #20]


	// Termino proporcional
	float proportional = pid->Kp*error1;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	edd3 7a00 	vldr	s15, [r3]
 8000bcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd4:	edc7 7a04 	vstr	s15, [r7, #16]


	// Termino integral
	pid-> integrador= pid->integrador + 0.5*(pid->Ki)*(pid->T)*(error1+pid->errorprev);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fc61 	bl	80004a4 <__aeabi_f2d>
 8000be2:	4604      	mov	r4, r0
 8000be4:	460d      	mov	r5, r1
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fc5a 	bl	80004a4 <__aeabi_f2d>
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	4b53      	ldr	r3, [pc, #332]	@ (8000d44 <PIDController_Update+0x1a0>)
 8000bf6:	f7ff fcad 	bl	8000554 <__aeabi_dmul>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4690      	mov	r8, r2
 8000c00:	4699      	mov	r9, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fc4c 	bl	80004a4 <__aeabi_f2d>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	460b      	mov	r3, r1
 8000c10:	4640      	mov	r0, r8
 8000c12:	4649      	mov	r1, r9
 8000c14:	f7ff fc9e 	bl	8000554 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4690      	mov	r8, r2
 8000c1e:	4699      	mov	r9, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000c26:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c2e:	ee17 0a90 	vmov	r0, s15
 8000c32:	f7ff fc37 	bl	80004a4 <__aeabi_f2d>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	4649      	mov	r1, r9
 8000c3e:	f7ff fc89 	bl	8000554 <__aeabi_dmul>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	4620      	mov	r0, r4
 8000c48:	4629      	mov	r1, r5
 8000c4a:	f7ff facd 	bl	80001e8 <__adddf3>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4610      	mov	r0, r2
 8000c54:	4619      	mov	r1, r3
 8000c56:	f7ff ff37 	bl	8000ac8 <__aeabi_d2f>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	621a      	str	r2, [r3, #32]

	// Antiwindup integrador

	if((pid->integrador) > (pid->limMaxInt)){
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	ed93 7a08 	vldr	s14, [r3, #32]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c74:	dd04      	ble.n	8000c80 <PIDController_Update+0xdc>
		pid->integrador = pid->limMaxInt;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	699a      	ldr	r2, [r3, #24]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	621a      	str	r2, [r3, #32]
 8000c7e:	e00e      	b.n	8000c9e <PIDController_Update+0xfa>
	}else if((pid->integrador) < (pid->limMinInt)){
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	ed93 7a08 	vldr	s14, [r3, #32]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c94:	d503      	bpl.n	8000c9e <PIDController_Update+0xfa>
		pid->integrador = pid->limMinInt;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	621a      	str	r2, [r3, #32]
	pid->derivador = -(2.0 * pid->Kd * (measurement - pid->medicionPrev)
                        + (2.0f * pid->tau - pid->T) * pid->derivador)
                        / (2.0f * pid->tau + pid->T);
	 */

	pid->derivador = (pid->Kd)*(error1-pid->errorprev)/pid->T;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000caa:	edd7 6a05 	vldr	s13, [r7, #20]
 8000cae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000cb2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	ed93 7a07 	vldr	s14, [r3, #28]
 8000cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    // Calculo la salida PID y la limito

    pid->out = pid->integrador + pid->derivador + proportional;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    if(pid->out > pid->limMax){
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf8:	dd04      	ble.n	8000d04 <PIDController_Update+0x160>
    	pid->out = pid->limMax;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	691a      	ldr	r2, [r3, #16]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d02:	e00e      	b.n	8000d22 <PIDController_Update+0x17e>
    }else if(pid->out < pid->limMin){
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d18:	d503      	bpl.n	8000d22 <PIDController_Update+0x17e>
    	pid->out = pid->limMin;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Guardo el error y la medicion para el proximo calculo

    pid->errorprev = error1;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->medicionPrev = measurement;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Devuelvo la salida del controlador

    return pid->out;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	ee07 3a90 	vmov	s15, r3

}
 8000d36:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000d42:	bf00      	nop
 8000d44:	3fe00000 	.word	0x3fe00000

08000d48 <AGC_Init>:
static uint16_t buffer[AGC_BUFFER_SIZE];
static uint8_t head = 0;
static uint8_t count = 0;
static uint16_t max_value = 0;        // Máximo actualizado dinámicamente

void AGC_Init(void) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < AGC_BUFFER_SIZE; i++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	e007      	b.n	8000d64 <AGC_Init+0x1c>
        buffer[i] = 0;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <AGC_Init+0x40>)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < AGC_BUFFER_SIZE; i++) {
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	3301      	adds	r3, #1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2b1f      	cmp	r3, #31
 8000d68:	d9f4      	bls.n	8000d54 <AGC_Init+0xc>
    }
    head = 0;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <AGC_Init+0x44>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
    count = 0;
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <AGC_Init+0x48>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
    max_value = 0;
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <AGC_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	801a      	strh	r2, [r3, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	2000002c 	.word	0x2000002c
 8000d8c:	2000006c 	.word	0x2000006c
 8000d90:	2000006d 	.word	0x2000006d
 8000d94:	2000006e 	.word	0x2000006e

08000d98 <AGC_AddSample>:

void AGC_AddSample(uint16_t sample) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
    // Guardar el valor antiguo antes de sobrescribirlo
    uint8_t next_pos = (head + 1) % AGC_BUFFER_SIZE;
 8000da2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <AGC_AddSample+0xb4>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	425a      	negs	r2, r3
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	f002 021f 	and.w	r2, r2, #31
 8000db2:	bf58      	it	pl
 8000db4:	4253      	negpl	r3, r2
 8000db6:	73bb      	strb	r3, [r7, #14]
    uint16_t old_sample = buffer[next_pos];
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	4a25      	ldr	r2, [pc, #148]	@ (8000e50 <AGC_AddSample+0xb8>)
 8000dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc0:	81bb      	strh	r3, [r7, #12]

    // Agregar la nueva muestra
    head = next_pos;
 8000dc2:	4a22      	ldr	r2, [pc, #136]	@ (8000e4c <AGC_AddSample+0xb4>)
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	7013      	strb	r3, [r2, #0]
    buffer[head] = sample;
 8000dc8:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <AGC_AddSample+0xb4>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4a20      	ldr	r2, [pc, #128]	@ (8000e50 <AGC_AddSample+0xb8>)
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

    // Actualizar contador si aún no está lleno el buffer
    if (count < AGC_BUFFER_SIZE) {
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <AGC_AddSample+0xbc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b1f      	cmp	r3, #31
 8000ddc:	d805      	bhi.n	8000dea <AGC_AddSample+0x52>
        count++;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <AGC_AddSample+0xbc>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <AGC_AddSample+0xbc>)
 8000de8:	701a      	strb	r2, [r3, #0]
    }

    // Actualizar el máximo si la nueva muestra es mayor
    if (sample > max_value) {
 8000dea:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <AGC_AddSample+0xc0>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	88fa      	ldrh	r2, [r7, #6]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d903      	bls.n	8000dfc <AGC_AddSample+0x64>
        max_value = sample;
 8000df4:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <AGC_AddSample+0xc0>)
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	8013      	strh	r3, [r2, #0]
                max_value = buffer[i];
            }
        }
    }
    // En otro caso, el máximo sigue siendo el mismo
}
 8000dfa:	e020      	b.n	8000e3e <AGC_AddSample+0xa6>
    else if (old_sample == max_value) {
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <AGC_AddSample+0xc0>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	89ba      	ldrh	r2, [r7, #12]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d11b      	bne.n	8000e3e <AGC_AddSample+0xa6>
        max_value = 0; // Asumiendo valores de ADC siempre positivos
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <AGC_AddSample+0xc0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 0; i < count; i++) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e010      	b.n	8000e34 <AGC_AddSample+0x9c>
            if (buffer[i] > max_value) {
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	@ (8000e50 <AGC_AddSample+0xb8>)
 8000e16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <AGC_AddSample+0xc0>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d905      	bls.n	8000e2e <AGC_AddSample+0x96>
                max_value = buffer[i];
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <AGC_AddSample+0xb8>)
 8000e26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <AGC_AddSample+0xc0>)
 8000e2c:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 0; i < count; i++) {
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	3301      	adds	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <AGC_AddSample+0xbc>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3e9      	bcc.n	8000e12 <AGC_AddSample+0x7a>
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000006c 	.word	0x2000006c
 8000e50:	2000002c 	.word	0x2000002c
 8000e54:	2000006d 	.word	0x2000006d
 8000e58:	2000006e 	.word	0x2000006e

08000e5c <AGC_GetMax>:

uint16_t AGC_GetMax(void) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
    return max_value;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <AGC_GetMax+0x14>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000006e 	.word	0x2000006e

08000e74 <FiltroMediaMovil_Init>:
 */

#include "filters.h"

// Inicializa un filtro de media móvil con tamaño de ventana específico
void FiltroMediaMovil_Init(FiltroMediaMovil *filtro, uint8_t tamanoVentana) {
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
    // Verificar que el tamaño de ventana no exceda el máximo
    if (tamanoVentana > WINDOW_SIZE_MAX) {
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	2b1e      	cmp	r3, #30
 8000e84:	d901      	bls.n	8000e8a <FiltroMediaMovil_Init+0x16>
        tamanoVentana = WINDOW_SIZE_MAX;
 8000e86:	231e      	movs	r3, #30
 8000e88:	70fb      	strb	r3, [r7, #3]
    }

    // No permitir un tamaño de ventana de 0
    if (tamanoVentana == 0) {
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <FiltroMediaMovil_Init+0x20>
        tamanoVentana = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	70fb      	strb	r3, [r7, #3]
    }

    for (int i = 0; i < WINDOW_SIZE_MAX; i++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	e007      	b.n	8000eaa <FiltroMediaMovil_Init+0x36>
        filtro->ventana[i] = 0;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < WINDOW_SIZE_MAX; i++) {
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b1d      	cmp	r3, #29
 8000eae:	ddf4      	ble.n	8000e9a <FiltroMediaMovil_Init+0x26>
    }

    filtro->indice = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    filtro->sumaVentana = 0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	641a      	str	r2, [r3, #64]	@ 0x40
    filtro->tamanoVentana = tamanoVentana;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	78fa      	ldrb	r2, [r7, #3]
 8000ec2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <FiltroMediaMovil_Update>:

// Aplica el filtro de media móvil a una nueva muestra
uint32_t FiltroMediaMovil_Update(FiltroMediaMovil *filtro, uint16_t nuevaMuestra) {
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	807b      	strh	r3, [r7, #2]
    filtro->sumaVentana = filtro->sumaVentana - filtro->ventana[filtro->indice] + nuevaMuestra;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	f892 203c 	ldrb.w	r2, [r2, #60]	@ 0x3c
 8000ee8:	4611      	mov	r1, r2
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000ef0:	1a9a      	subs	r2, r3, r2
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	441a      	add	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	641a      	str	r2, [r3, #64]	@ 0x40
    filtro->ventana[filtro->indice] = nuevaMuestra;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f00:	4619      	mov	r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	887a      	ldrh	r2, [r7, #2]
 8000f06:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    filtro->indice = (filtro->indice + 1) % filtro->tamanoVentana; // Usar el tamaño de ventana específico del filtro
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f10:	3301      	adds	r3, #1
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8000f18:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f1c:	fb01 f202 	mul.w	r2, r1, r2
 8000f20:	1a9b      	subs	r3, r3, r2
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return (uint32_t)(filtro->sumaVentana / filtro->tamanoVentana);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8000f34:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <iir_filter>:
double x_notch[FILTER_ORDER + 1] = {0};
double y_notch[FILTER_ORDER + 1] = {0};


uint16_t iir_filter(uint16_t input, const double *num, const double *den,
                         int num_order, int den_order, double *x, double *y) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	@ 0x38
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	4603      	mov	r3, r0
 8000f56:	81fb      	strh	r3, [r7, #14]
    // Convertir entrada de uint16_t a double para cálculos internos
    double input_double = (double)input;
 8000f58:	89fb      	ldrh	r3, [r7, #14]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa80 	bl	8000460 <__aeabi_ui2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Desplazar valores anteriores de x
    for (uint8_t i = num_order; i > 0; i--) {
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000f6e:	e015      	b.n	8000f9c <iir_filter+0x54>
        x[i] = x[i-1];
 8000f70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f74:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000f7e:	4413      	add	r3, r2
 8000f80:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000f84:	00d2      	lsls	r2, r2, #3
 8000f86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000f88:	4411      	add	r1, r2
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint8_t i = num_order; i > 0; i--) {
 8000f92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000f9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1e5      	bne.n	8000f70 <iir_filter+0x28>
    }
    x[0] = input_double;
 8000fa4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000fa6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000faa:	e9c1 2300 	strd	r2, r3, [r1]

    // Calcular salida usando coeficientes del numerador
    double output = 0.0;
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (uint8_t i = 0; i <= num_order; i++) {
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000fc0:	e01e      	b.n	8001000 <iir_filter+0xb8>
        output += num[i] * x[i];
 8000fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	4413      	add	r3, r2
 8000fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000fd8:	4413      	add	r3, r2
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fab9 	bl	8000554 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000fea:	f7ff f8fd 	bl	80001e8 <__adddf3>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (uint8_t i = 0; i <= num_order; i++) {
 8000ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	dadb      	bge.n	8000fc2 <iir_filter+0x7a>
    }

    // Aplicar coeficientes del denominador
    for (int i = 1; i <= den_order; i++) {
 800100a:	2301      	movs	r3, #1
 800100c:	623b      	str	r3, [r7, #32]
 800100e:	e02c      	b.n	800106a <iir_filter+0x122>
        if(den[i] != 0.0){
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	f7ff fcfe 	bl	8000a24 <__aeabi_dcmpeq>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d11a      	bne.n	8001064 <iir_filter+0x11c>
            output -= den[i] * y[i - 1];
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001040:	3b01      	subs	r3, #1
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001046:	4413      	add	r3, r2
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fa82 	bl	8000554 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001058:	f7ff f8c4 	bl	80001e4 <__aeabi_dsub>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (int i = 1; i <= den_order; i++) {
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	3301      	adds	r3, #1
 8001068:	623b      	str	r3, [r7, #32]
 800106a:	6a3a      	ldr	r2, [r7, #32]
 800106c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800106e:	429a      	cmp	r2, r3
 8001070:	ddce      	ble.n	8001010 <iir_filter+0xc8>
        }
    }

    // Normalizar por den[0]
    output /= den[0];
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800107c:	f7ff fb94 	bl	80007a8 <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Desplazar valores anteriores de y
    for (uint8_t i = den_order; i > 0; i--) {
 8001088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800108a:	77fb      	strb	r3, [r7, #31]
 800108c:	e011      	b.n	80010b2 <iir_filter+0x16a>
        y[i] = y[i-1];
 800108e:	7ffb      	ldrb	r3, [r7, #31]
 8001090:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001094:	3b01      	subs	r3, #1
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800109a:	4413      	add	r3, r2
 800109c:	7ffa      	ldrb	r2, [r7, #31]
 800109e:	00d2      	lsls	r2, r2, #3
 80010a0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80010a2:	4411      	add	r1, r2
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint8_t i = den_order; i > 0; i--) {
 80010ac:	7ffb      	ldrb	r3, [r7, #31]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	77fb      	strb	r3, [r7, #31]
 80010b2:	7ffb      	ldrb	r3, [r7, #31]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1ea      	bne.n	800108e <iir_filter+0x146>
    }
    y[0] = output;
 80010b8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80010ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80010be:	e9c1 2300 	strd	r2, r3, [r1]

    // Convertir salida a uint16_t con saturación
    if (output < 0) {
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80010ce:	f7ff fcb3 	bl	8000a38 <__aeabi_dcmplt>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <iir_filter+0x194>
        return 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	e012      	b.n	8001102 <iir_filter+0x1ba>
    } else if (output > 65535) {
 80010dc:	a30c      	add	r3, pc, #48	@ (adr r3, 8001110 <iir_filter+0x1c8>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80010e6:	f7ff fcc5 	bl	8000a74 <__aeabi_dcmpgt>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <iir_filter+0x1ae>
        return 65535;
 80010f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f4:	e005      	b.n	8001102 <iir_filter+0x1ba>
    } else {
        return (uint16_t)output;
 80010f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80010fa:	f7ff fcc5 	bl	8000a88 <__aeabi_d2uiz>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29b      	uxth	r3, r3
    }
}
 8001102:	4618      	mov	r0, r3
 8001104:	3738      	adds	r7, #56	@ 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	f3af 8000 	nop.w
 8001110:	00000000 	.word	0x00000000
 8001114:	40efffe0 	.word	0x40efffe0

08001118 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800111c:	f3bf 8f4f 	dsb	sy
}
 8001120:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <__NVIC_SystemReset+0x24>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800112a:	4904      	ldr	r1, [pc, #16]	@ (800113c <__NVIC_SystemReset+0x24>)
 800112c:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <__NVIC_SystemReset+0x28>)
 800112e:	4313      	orrs	r3, r2
 8001130:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001132:	f3bf 8f4f 	dsb	sy
}
 8001136:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <__NVIC_SystemReset+0x20>
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	05fa0004 	.word	0x05fa0004

08001144 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b0b6      	sub	sp, #216	@ 0xd8
 8001148:	af04      	add	r7, sp, #16

	/* USER CODE BEGIN 1 */

	FiltroMediaMovil filtro_potentiometer;
	FiltroMediaMovil filtro_out_PID;
	FiltroMediaMovil_Init(&filtro_potentiometer, 30);	// Filtro con ventana de tamaño 30
 800114a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800114e:	211e      	movs	r1, #30
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fe8f 	bl	8000e74 <FiltroMediaMovil_Init>
	FiltroMediaMovil_Init(&filtro_out_PID, 3);       // Filtro con ventana de tamaño 3
 8001156:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800115a:	2103      	movs	r1, #3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe89 	bl	8000e74 <FiltroMediaMovil_Init>

	/* Inicializo el Controlador PID*/
	PIDController pid = { PID_KP, PID_KI, PID_KD,
 8001162:	463b      	mov	r3, r7
 8001164:	2234      	movs	r2, #52	@ 0x34
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f005 ff65 	bl	8007038 <memset>
 800116e:	4b9d      	ldr	r3, [pc, #628]	@ (80013e4 <main+0x2a0>)
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	4b9d      	ldr	r3, [pc, #628]	@ (80013e8 <main+0x2a4>)
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b9d      	ldr	r3, [pc, #628]	@ (80013ec <main+0x2a8>)
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b9d      	ldr	r3, [pc, #628]	@ (80013f0 <main+0x2ac>)
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	4b9d      	ldr	r3, [pc, #628]	@ (80013f4 <main+0x2b0>)
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	4b9d      	ldr	r3, [pc, #628]	@ (80013f8 <main+0x2b4>)
 8001184:	61fb      	str	r3, [r7, #28]
	PID_LIM_MIN, PID_LIM_MAX,
	PID_LIM_MIN_INT, PID_LIM_MAX_INT,
	T_MUESTREO * 0.001 };
	PIDController_Init(&pid);
 8001186:	463b      	mov	r3, r7
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fced 	bl	8000b68 <PIDController_Init>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800118e:	f001 f879 	bl	8002284 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001192:	f000 f95d 	bl	8001450 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001196:	f000 fb5b 	bl	8001850 <MX_GPIO_Init>
	MX_SDADC1_Init();
 800119a:	f000 fa25 	bl	80015e8 <MX_SDADC1_Init>
	MX_USART1_UART_Init();
 800119e:	f000 fb27 	bl	80017f0 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80011a2:	f000 fa8b 	bl	80016bc <MX_TIM2_Init>
	MX_ADC1_Init();
 80011a6:	f000 f9b7 	bl	8001518 <MX_ADC1_Init>
	MX_DAC2_Init();
 80011aa:	f000 f9f3 	bl	8001594 <MX_DAC2_Init>
	MX_TIM19_Init();
 80011ae:	f000 fad1 	bl	8001754 <MX_TIM19_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80011b2:	4892      	ldr	r0, [pc, #584]	@ (80013fc <main+0x2b8>)
 80011b4:	f004 f8d2 	bl	800535c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim19);
 80011b8:	4891      	ldr	r0, [pc, #580]	@ (8001400 <main+0x2bc>)
 80011ba:	f004 f8cf 	bl	800535c <HAL_TIM_Base_Start_IT>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80011be:	2100      	movs	r1, #0
 80011c0:	4890      	ldr	r0, [pc, #576]	@ (8001404 <main+0x2c0>)
 80011c2:	f001 fe61 	bl	8002e88 <HAL_DAC_Start>
	SerialHandler_Init(&huart1);
 80011c6:	4890      	ldr	r0, [pc, #576]	@ (8001408 <main+0x2c4>)
 80011c8:	f000 fc54 	bl	8001a74 <SerialHandler_Init>
	HAL_GPIO_WritePin(POWER_LED_GPIO_Port, POWER_LED_Pin, 1);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2180      	movs	r1, #128	@ 0x80
 80011d0:	488e      	ldr	r0, [pc, #568]	@ (800140c <main+0x2c8>)
 80011d2:	f002 f8e7 	bl	80033a4 <HAL_GPIO_WritePin>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (flag_new_sample == 1) {
 80011d6:	4b8e      	ldr	r3, [pc, #568]	@ (8001410 <main+0x2cc>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	f040 80dd 	bne.w	800139a <main+0x256>
			if (current_state == STATE_MANUAL_OPERATION|| current_state == STATE_ACQUIRING_MANUAL) {
 80011e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001414 <main+0x2d0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d003      	beq.n	80011f0 <main+0xac>
 80011e8:	4b8a      	ldr	r3, [pc, #552]	@ (8001414 <main+0x2d0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d142      	bne.n	8001276 <main+0x132>
				HAL_ADC_Start(&hadc1);
 80011f0:	4889      	ldr	r0, [pc, #548]	@ (8001418 <main+0x2d4>)
 80011f2:	f001 f9a9 	bl	8002548 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 10);
 80011f6:	210a      	movs	r1, #10
 80011f8:	4887      	ldr	r0, [pc, #540]	@ (8001418 <main+0x2d4>)
 80011fa:	f001 fa3b 	bl	8002674 <HAL_ADC_PollForConversion>
				gain = HAL_ADC_GetValue(&hadc1);
 80011fe:	4886      	ldr	r0, [pc, #536]	@ (8001418 <main+0x2d4>)
 8001200:	f001 fb50 	bl	80028a4 <HAL_ADC_GetValue>
 8001204:	4603      	mov	r3, r0
 8001206:	4a85      	ldr	r2, [pc, #532]	@ (800141c <main+0x2d8>)
 8001208:	6013      	str	r3, [r2, #0]
				filtered_gain = (uint16_t)FiltroMediaMovil_Update(&filtro_potentiometer, gain);
 800120a:	4b84      	ldr	r3, [pc, #528]	@ (800141c <main+0x2d8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	b29a      	uxth	r2, r3
 8001210:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fe5b 	bl	8000ed2 <FiltroMediaMovil_Update>
 800121c:	4603      	mov	r3, r0
 800121e:	b29b      	uxth	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	4b7f      	ldr	r3, [pc, #508]	@ (8001420 <main+0x2dc>)
 8001224:	601a      	str	r2, [r3, #0]
				HAL_ADC_Stop(&hadc1);
 8001226:	487c      	ldr	r0, [pc, #496]	@ (8001418 <main+0x2d4>)
 8001228:	f001 f9f8 	bl	800261c <HAL_ADC_Stop>
				HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800122c:	4b7c      	ldr	r3, [pc, #496]	@ (8001420 <main+0x2dc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	4873      	ldr	r0, [pc, #460]	@ (8001404 <main+0x2c0>)
 8001236:	f001 fe02 	bl	8002e3e <HAL_DAC_SetValue>
						filtered_gain);
				lectura_vda = Read_ADC(&hsdadc1);
 800123a:	487a      	ldr	r0, [pc, #488]	@ (8001424 <main+0x2e0>)
 800123c:	f000 fb96 	bl	800196c <Read_ADC>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b78      	ldr	r3, [pc, #480]	@ (8001428 <main+0x2e4>)
 8001246:	801a      	strh	r2, [r3, #0]
				filtered_vda = iir_filter(lectura_vda, num_notch, den_notch,
 8001248:	4b77      	ldr	r3, [pc, #476]	@ (8001428 <main+0x2e4>)
 800124a:	8818      	ldrh	r0, [r3, #0]
 800124c:	4b77      	ldr	r3, [pc, #476]	@ (800142c <main+0x2e8>)
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	4b77      	ldr	r3, [pc, #476]	@ (8001430 <main+0x2ec>)
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	2304      	movs	r3, #4
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2304      	movs	r3, #4
 800125a:	4a76      	ldr	r2, [pc, #472]	@ (8001434 <main+0x2f0>)
 800125c:	4976      	ldr	r1, [pc, #472]	@ (8001438 <main+0x2f4>)
 800125e:	f7ff fe73 	bl	8000f48 <iir_filter>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	4b75      	ldr	r3, [pc, #468]	@ (800143c <main+0x2f8>)
 8001268:	801a      	strh	r2, [r3, #0]
						FILTER_ORDER, FILTER_ORDER, x_notch, y_notch);
				SerialHandler_SendData(filtered_vda);
 800126a:	4b74      	ldr	r3, [pc, #464]	@ (800143c <main+0x2f8>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fc16 	bl	8001aa0 <SerialHandler_SendData>
 8001274:	e08e      	b.n	8001394 <main+0x250>

			}else if (current_state == STATE_AUTOMATIC_OPERATION) {
 8001276:	4b67      	ldr	r3, [pc, #412]	@ (8001414 <main+0x2d0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d162      	bne.n	8001344 <main+0x200>

				lectura_vda = Read_ADC(&hsdadc1);
 800127e:	4869      	ldr	r0, [pc, #420]	@ (8001424 <main+0x2e0>)
 8001280:	f000 fb74 	bl	800196c <Read_ADC>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b67      	ldr	r3, [pc, #412]	@ (8001428 <main+0x2e4>)
 800128a:	801a      	strh	r2, [r3, #0]
				filtered_vda = iir_filter(lectura_vda, num_notch, den_notch, FILTER_ORDER, FILTER_ORDER, x_notch, y_notch);
 800128c:	4b66      	ldr	r3, [pc, #408]	@ (8001428 <main+0x2e4>)
 800128e:	8818      	ldrh	r0, [r3, #0]
 8001290:	4b66      	ldr	r3, [pc, #408]	@ (800142c <main+0x2e8>)
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	4b66      	ldr	r3, [pc, #408]	@ (8001430 <main+0x2ec>)
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	2304      	movs	r3, #4
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2304      	movs	r3, #4
 800129e:	4a65      	ldr	r2, [pc, #404]	@ (8001434 <main+0x2f0>)
 80012a0:	4965      	ldr	r1, [pc, #404]	@ (8001438 <main+0x2f4>)
 80012a2:	f7ff fe51 	bl	8000f48 <iir_filter>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b64      	ldr	r3, [pc, #400]	@ (800143c <main+0x2f8>)
 80012ac:	801a      	strh	r2, [r3, #0]

				// Decimacion para el AGC 180Hz -> 36Hz
				static uint8_t counter = 0;
				counter++;
 80012ae:	4b64      	ldr	r3, [pc, #400]	@ (8001440 <main+0x2fc>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b62      	ldr	r3, [pc, #392]	@ (8001440 <main+0x2fc>)
 80012b8:	701a      	strb	r2, [r3, #0]
				if (counter >= 5) {
 80012ba:	4b61      	ldr	r3, [pc, #388]	@ (8001440 <main+0x2fc>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d907      	bls.n	80012d2 <main+0x18e>
					AGC_AddSample(filtered_vda);
 80012c2:	4b5e      	ldr	r3, [pc, #376]	@ (800143c <main+0x2f8>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fd66 	bl	8000d98 <AGC_AddSample>
					counter = 0;
 80012cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001440 <main+0x2fc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
				}

				uint16_t signal_amplitude;
				signal_amplitude = AGC_GetMax();
 80012d2:	f7ff fdc3 	bl	8000e5c <AGC_GetMax>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
				outPID = (uint16_t)(PIDController_Update(&pid, setpoint, (float)signal_amplitude));
 80012dc:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <main+0x300>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 80012e6:	ee07 3a10 	vmov	s14, r3
 80012ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80012ee:	463b      	mov	r3, r7
 80012f0:	eef0 0a47 	vmov.f32	s1, s14
 80012f4:	eeb0 0a67 	vmov.f32	s0, s15
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fc53 	bl	8000ba4 <PIDController_Update>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
 8001302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001306:	ee17 3a90 	vmov	r3, s15
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b4e      	ldr	r3, [pc, #312]	@ (8001448 <main+0x304>)
 800130e:	801a      	strh	r2, [r3, #0]
				gain =  (uint16_t)FiltroMediaMovil_Update(&filtro_out_PID, outPID);
 8001310:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <main+0x304>)
 8001312:	881a      	ldrh	r2, [r3, #0]
 8001314:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fdd9 	bl	8000ed2 <FiltroMediaMovil_Update>
 8001320:	4603      	mov	r3, r0
 8001322:	b29b      	uxth	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <main+0x2d8>)
 8001328:	601a      	str	r2, [r3, #0]
				HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, gain);
 800132a:	4b3c      	ldr	r3, [pc, #240]	@ (800141c <main+0x2d8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	4834      	ldr	r0, [pc, #208]	@ (8001404 <main+0x2c0>)
 8001334:	f001 fd83 	bl	8002e3e <HAL_DAC_SetValue>
				SerialHandler_SendData(filtered_vda);
 8001338:	4b40      	ldr	r3, [pc, #256]	@ (800143c <main+0x2f8>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fbaf 	bl	8001aa0 <SerialHandler_SendData>
 8001342:	e027      	b.n	8001394 <main+0x250>

			}else if (current_state == STATE_ACQUIRING_AUTO) {
 8001344:	4b33      	ldr	r3, [pc, #204]	@ (8001414 <main+0x2d0>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d123      	bne.n	8001394 <main+0x250>

				lectura_vda = Read_ADC(&hsdadc1);
 800134c:	4835      	ldr	r0, [pc, #212]	@ (8001424 <main+0x2e0>)
 800134e:	f000 fb0d 	bl	800196c <Read_ADC>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <main+0x2e4>)
 8001358:	801a      	strh	r2, [r3, #0]
				filtered_vda = iir_filter(lectura_vda, num_notch, den_notch, FILTER_ORDER, FILTER_ORDER, x_notch, y_notch);
 800135a:	4b33      	ldr	r3, [pc, #204]	@ (8001428 <main+0x2e4>)
 800135c:	8818      	ldrh	r0, [r3, #0]
 800135e:	4b33      	ldr	r3, [pc, #204]	@ (800142c <main+0x2e8>)
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	4b33      	ldr	r3, [pc, #204]	@ (8001430 <main+0x2ec>)
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	2304      	movs	r3, #4
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2304      	movs	r3, #4
 800136c:	4a31      	ldr	r2, [pc, #196]	@ (8001434 <main+0x2f0>)
 800136e:	4932      	ldr	r1, [pc, #200]	@ (8001438 <main+0x2f4>)
 8001370:	f7ff fdea 	bl	8000f48 <iir_filter>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b30      	ldr	r3, [pc, #192]	@ (800143c <main+0x2f8>)
 800137a:	801a      	strh	r2, [r3, #0]
				HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, gain);
 800137c:	4b27      	ldr	r3, [pc, #156]	@ (800141c <main+0x2d8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	481f      	ldr	r0, [pc, #124]	@ (8001404 <main+0x2c0>)
 8001386:	f001 fd5a 	bl	8002e3e <HAL_DAC_SetValue>
				SerialHandler_SendData(filtered_vda);
 800138a:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <main+0x2f8>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fb86 	bl	8001aa0 <SerialHandler_SendData>
			}

			flag_new_sample = 0;
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <main+0x2cc>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
		}

		if (programming_mode) {
 800139a:	4b2c      	ldr	r3, [pc, #176]	@ (800144c <main+0x308>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f43f af19 	beq.w	80011d6 <main+0x92>
			HAL_GPIO_WritePin(FF_D_GPIO_Port, FF_D_Pin, 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013aa:	4818      	ldr	r0, [pc, #96]	@ (800140c <main+0x2c8>)
 80013ac:	f001 fffa 	bl	80033a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FF_CLK_GPIO_Port, FF_CLK_Pin, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013b6:	4815      	ldr	r0, [pc, #84]	@ (800140c <main+0x2c8>)
 80013b8:	f001 fff4 	bl	80033a4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f000 ffc7 	bl	8002350 <HAL_Delay>
			HAL_GPIO_WritePin(FF_CLK_GPIO_Port, FF_CLK_Pin, 1);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c8:	4810      	ldr	r0, [pc, #64]	@ (800140c <main+0x2c8>)
 80013ca:	f001 ffeb 	bl	80033a4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f000 ffbe 	bl	8002350 <HAL_Delay>
			HAL_GPIO_WritePin(FF_CLK_GPIO_Port, FF_CLK_Pin, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013da:	480c      	ldr	r0, [pc, #48]	@ (800140c <main+0x2c8>)
 80013dc:	f001 ffe2 	bl	80033a4 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 80013e0:	f7ff fe9a 	bl	8001118 <__NVIC_SystemReset>
 80013e4:	3ca3d70a 	.word	0x3ca3d70a
 80013e8:	3c23d70a 	.word	0x3c23d70a
 80013ec:	457ff000 	.word	0x457ff000
 80013f0:	c3fa0000 	.word	0xc3fa0000
 80013f4:	451c4000 	.word	0x451c4000
 80013f8:	3bb606b8 	.word	0x3bb606b8
 80013fc:	20000148 	.word	0x20000148
 8001400:	20000194 	.word	0x20000194
 8001404:	200000f0 	.word	0x200000f0
 8001408:	200001e0 	.word	0x200001e0
 800140c:	48000400 	.word	0x48000400
 8001410:	2000026a 	.word	0x2000026a
 8001414:	20000295 	.word	0x20000295
 8001418:	200000c0 	.word	0x200000c0
 800141c:	2000026c 	.word	0x2000026c
 8001420:	20000270 	.word	0x20000270
 8001424:	20000104 	.word	0x20000104
 8001428:	20000274 	.word	0x20000274
 800142c:	20000098 	.word	0x20000098
 8001430:	20000070 	.word	0x20000070
 8001434:	08007108 	.word	0x08007108
 8001438:	080070e0 	.word	0x080070e0
 800143c:	20000276 	.word	0x20000276
 8001440:	2000027a 	.word	0x2000027a
 8001444:	20000000 	.word	0x20000000
 8001448:	20000278 	.word	0x20000278
 800144c:	20000268 	.word	0x20000268

08001450 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b09a      	sub	sp, #104	@ 0x68
 8001454:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001456:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800145a:	2228      	movs	r2, #40	@ 0x28
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f005 fdea 	bl	8007038 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001464:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001474:	463b      	mov	r3, r7
 8001476:	222c      	movs	r2, #44	@ 0x2c
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f005 fddc 	bl	8007038 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001488:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148e:	2301      	movs	r3, #1
 8001490:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2302      	movs	r3, #2
 8001494:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001496:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149a:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800149c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014a0:	667b      	str	r3, [r7, #100]	@ 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 ffce 	bl	8003448 <HAL_RCC_OscConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x66>
		Error_Handler();
 80014b2:	f000 fa7b 	bl	80019ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014b6:	230f      	movs	r3, #15
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ba:	2302      	movs	r3, #2
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014d0:	2102      	movs	r1, #2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 ffc6 	bl	8004464 <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x92>
		Error_Handler();
 80014de:	f000 fa65 	bl	80019ac <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80014e2:	f640 0381 	movw	r3, #2177	@ 0x881
 80014e6:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_ADC1 | RCC_PERIPHCLK_SDADC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV12;
 80014ec:	f04f 4328 	mov.w	r3, #2818572288	@ 0xa8000000
 80014f0:	623b      	str	r3, [r7, #32]
	PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80014f6:	463b      	mov	r3, r7
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 f9c5 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0xb8>
		Error_Handler();
 8001504:	f000 fa52 	bl	80019ac <Error_Handler>
	}
	HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8001508:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800150c:	f001 ff7c 	bl	8003408 <HAL_PWREx_EnableSDADC>
}
 8001510:	bf00      	nop
 8001512:	3768      	adds	r7, #104	@ 0x68
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_ADC1_Init+0x74>)
 800152a:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <MX_ADC1_Init+0x78>)
 800152c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <MX_ADC1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001534:	4b15      	ldr	r3, [pc, #84]	@ (800158c <MX_ADC1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_ADC1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <MX_ADC1_Init+0x74>)
 8001542:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001546:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <MX_ADC1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_ADC1_Init+0x74>)
 8001550:	2201      	movs	r2, #1
 8001552:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001554:	480d      	ldr	r0, [pc, #52]	@ (800158c <MX_ADC1_Init+0x74>)
 8001556:	f000 ff1f 	bl	8002398 <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001560:	f000 fa24 	bl	80019ac <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001564:	2308      	movs	r3, #8
 8001566:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001568:	2301      	movs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_ADC1_Init+0x74>)
 8001576:	f001 f9a3 	bl	80028c0 <HAL_ADC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001580:	f000 fa14 	bl	80019ac <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000c0 	.word	0x200000c0
 8001590:	40012400 	.word	0x40012400

08001594 <MX_DAC2_Init>:
/**
 * @brief DAC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC2_Init(void) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC2_Init 0 */

	/* USER CODE END DAC2_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]

	/* USER CODE END DAC2_Init 1 */

	/** DAC Initialization
	 */
	hdac2.Instance = DAC2;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <MX_DAC2_Init+0x4c>)
 80015a6:	4a0f      	ldr	r2, [pc, #60]	@ (80015e4 <MX_DAC2_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac2) != HAL_OK) {
 80015aa:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <MX_DAC2_Init+0x4c>)
 80015ac:	f001 fc25 	bl	8002dfa <HAL_DAC_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_DAC2_Init+0x26>
		Error_Handler();
 80015b6:	f000 f9f9 	bl	80019ac <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
	if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_DAC2_Init+0x4c>)
 80015ca:	f001 fca8 	bl	8002f1e <HAL_DAC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_DAC2_Init+0x44>
		Error_Handler();
 80015d4:	f000 f9ea 	bl	80019ac <Error_Handler>
	}
	/* USER CODE BEGIN DAC2_Init 2 */

	/* USER CODE END DAC2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000f0 	.word	0x200000f0
 80015e4:	40009800 	.word	0x40009800

080015e8 <MX_SDADC1_Init>:
/**
 * @brief SDADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDADC1_Init(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SDADC1_Init 0 */

	/* USER CODE END SDADC1_Init 0 */

	SDADC_ConfParamTypeDef ConfParamStruct = { 0 };
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
	/* USER CODE END SDADC1_Init 1 */

	/** Configure the SDADC low power mode, fast conversion mode,
	 slow clock mode and SDADC1 reference voltage
	 */
	hsdadc1.Instance = SDADC1;
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 80015fc:	4a2d      	ldr	r2, [pc, #180]	@ (80016b4 <MX_SDADC1_Init+0xcc>)
 80015fe:	601a      	str	r2, [r3, #0]
	hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
	hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8001606:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
	hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 800160c:	4b28      	ldr	r3, [pc, #160]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
	hsdadc1.Init.ReferenceVoltage = SDADC_VREF_VREFINT2;
 8001612:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 8001614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001618:	611a      	str	r2, [r3, #16]
	hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 800161a:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 800161c:	2200      	movs	r2, #0
 800161e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SDADC_Init(&hsdadc1) != HAL_OK) {
 8001620:	4823      	ldr	r0, [pc, #140]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 8001622:	f003 faa3 	bl	8004b6c <HAL_SDADC_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_SDADC1_Init+0x48>
		Error_Handler();
 800162c:	f000 f9be 	bl	80019ac <Error_Handler>
	}

	/** Configure the Injected Mode
	 */
	if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE)
 8001630:	2100      	movs	r1, #0
 8001632:	481f      	ldr	r0, [pc, #124]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 8001634:	f003 fc22 	bl	8004e7c <HAL_SDADC_SelectInjectedDelay>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_SDADC1_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 800163e:	f000 f9b5 	bl	80019ac <Error_Handler>
	}
	if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER)
 8001642:	2100      	movs	r1, #0
 8001644:	481a      	ldr	r0, [pc, #104]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 8001646:	f003 fbe9 	bl	8004e1c <HAL_SDADC_SelectInjectedTrigger>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_SDADC1_Init+0x6c>
			!= HAL_OK) {
		Error_Handler();
 8001650:	f000 f9ac 	bl	80019ac <Error_Handler>
	}
	if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_5,
 8001654:	2200      	movs	r2, #0
 8001656:	4918      	ldr	r1, [pc, #96]	@ (80016b8 <MX_SDADC1_Init+0xd0>)
 8001658:	4815      	ldr	r0, [pc, #84]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 800165a:	f003 fba3 	bl	8004da4 <HAL_SDADC_InjectedConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_SDADC1_Init+0x80>
			SDADC_CONTINUOUS_CONV_OFF) != HAL_OK) {
		Error_Handler();
 8001664:	f000 f9a2 	bl	80019ac <Error_Handler>
	}

	/** Set parameters for SDADC configuration 0 Register
	 */
	ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001668:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 800166c:	603b      	str	r3, [r7, #0]
	ConfParamStruct.Gain = SDADC_GAIN_1_2;
 800166e:	f44f 03e0 	mov.w	r3, #7340032	@ 0x700000
 8001672:	607b      	str	r3, [r7, #4]
	ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
	ConfParamStruct.Offset = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
	if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0,
 800167c:	463b      	mov	r3, r7
 800167e:	461a      	mov	r2, r3
 8001680:	2100      	movs	r1, #0
 8001682:	480b      	ldr	r0, [pc, #44]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 8001684:	f003 fb02 	bl	8004c8c <HAL_SDADC_PrepareChannelConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_SDADC1_Init+0xaa>
			&ConfParamStruct) != HAL_OK) {
		Error_Handler();
 800168e:	f000 f98d 	bl	80019ac <Error_Handler>
	}

	/** Configure the Injected Channel
	 */
	if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5,
 8001692:	2200      	movs	r2, #0
 8001694:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <MX_SDADC1_Init+0xd0>)
 8001696:	4806      	ldr	r0, [pc, #24]	@ (80016b0 <MX_SDADC1_Init+0xc8>)
 8001698:	f003 fb34 	bl	8004d04 <HAL_SDADC_AssociateChannelConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_SDADC1_Init+0xbe>
			SDADC_CONF_INDEX_0) != HAL_OK) {
		Error_Handler();
 80016a2:	f000 f983 	bl	80019ac <Error_Handler>
	}
	/* USER CODE BEGIN SDADC1_Init 2 */

	/* USER CODE END SDADC1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000104 	.word	0x20000104
 80016b4:	40016000 	.word	0x40016000
 80016b8:	00050020 	.word	0x00050020

080016bc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <MX_TIM2_Init+0x94>)
 80016da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016de:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <MX_TIM2_Init+0x94>)
 80016e2:	2207      	movs	r2, #7
 80016e4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <MX_TIM2_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 49999;
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <MX_TIM2_Init+0x94>)
 80016ee:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80016f2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <MX_TIM2_Init+0x94>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <MX_TIM2_Init+0x94>)
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001700:	4813      	ldr	r0, [pc, #76]	@ (8001750 <MX_TIM2_Init+0x94>)
 8001702:	f003 fddc 	bl	80052be <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0x54>
		Error_Handler();
 800170c:	f000 f94e 	bl	80019ac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001714:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <MX_TIM2_Init+0x94>)
 800171e:	f003 ff75 	bl	800560c <HAL_TIM_ConfigClockSource>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x70>
		Error_Handler();
 8001728:	f000 f940 	bl	80019ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_TIM2_Init+0x94>)
 800173a:	f004 f997 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001744:	f000 f932 	bl	80019ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000148 	.word	0x20000148

08001754 <MX_TIM19_Init>:
/**
 * @brief TIM19 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM19_Init(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM19_Init 0 */

	/* USER CODE END TIM19_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM19_Init 1 */

	/* USER CODE END TIM19_Init 1 */
	htim19.Instance = TIM19;
 8001770:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <MX_TIM19_Init+0x94>)
 8001772:	4a1e      	ldr	r2, [pc, #120]	@ (80017ec <MX_TIM19_Init+0x98>)
 8001774:	601a      	str	r2, [r3, #0]
	htim19.Init.Prescaler = 7200 - 1;
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <MX_TIM19_Init+0x94>)
 8001778:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800177c:	605a      	str	r2, [r3, #4]
	htim19.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <MX_TIM19_Init+0x94>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
	htim19.Init.Period = 10000 - 1;
 8001784:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <MX_TIM19_Init+0x94>)
 8001786:	f242 720f 	movw	r2, #9999	@ 0x270f
 800178a:	60da      	str	r2, [r3, #12]
	htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <MX_TIM19_Init+0x94>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
	htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <MX_TIM19_Init+0x94>)
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim19) != HAL_OK) {
 8001798:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <MX_TIM19_Init+0x94>)
 800179a:	f003 fd90 	bl	80052be <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM19_Init+0x54>
		Error_Handler();
 80017a4:	f000 f902 	bl	80019ac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ac:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim19, &sClockSourceConfig) != HAL_OK) {
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <MX_TIM19_Init+0x94>)
 80017b6:	f003 ff29 	bl	800560c <HAL_TIM_ConfigClockSource>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM19_Init+0x70>
		Error_Handler();
 80017c0:	f000 f8f4 	bl	80019ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_TIM19_Init+0x94>)
 80017d2:	f004 f94b 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM19_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80017dc:	f000 f8e6 	bl	80019ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM19_Init 2 */

	/* USER CODE END TIM19_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000194 	.word	0x20000194
 80017ec:	40015c00 	.word	0x40015c00

080017f0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 80017f6:	4a15      	ldr	r2, [pc, #84]	@ (800184c <MX_USART1_UART_Init+0x5c>)
 80017f8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 80017fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001800:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <MX_USART1_UART_Init+0x58>)
 8001834:	f004 f9a2 	bl	8005b7c <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800183e:	f000 f8b5 	bl	80019ac <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200001e0 	.word	0x200001e0
 800184c:	40013800 	.word	0x40013800

08001850 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <MX_GPIO_Init+0xc4>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	4a2a      	ldr	r2, [pc, #168]	@ (8001914 <MX_GPIO_Init+0xc4>)
 800186c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001870:	6153      	str	r3, [r2, #20]
 8001872:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <MX_GPIO_Init+0xc4>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800187e:	4b25      	ldr	r3, [pc, #148]	@ (8001914 <MX_GPIO_Init+0xc4>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a24      	ldr	r2, [pc, #144]	@ (8001914 <MX_GPIO_Init+0xc4>)
 8001884:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001888:	6153      	str	r3, [r2, #20]
 800188a:	4b22      	ldr	r3, [pc, #136]	@ (8001914 <MX_GPIO_Init+0xc4>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b1f      	ldr	r3, [pc, #124]	@ (8001914 <MX_GPIO_Init+0xc4>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4a1e      	ldr	r2, [pc, #120]	@ (8001914 <MX_GPIO_Init+0xc4>)
 800189c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a0:	6153      	str	r3, [r2, #20]
 80018a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <MX_GPIO_Init+0xc4>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <MX_GPIO_Init+0xc4>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	4a18      	ldr	r2, [pc, #96]	@ (8001914 <MX_GPIO_Init+0xc4>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b8:	6153      	str	r3, [r2, #20]
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <MX_GPIO_Init+0xc4>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80018cc:	4812      	ldr	r0, [pc, #72]	@ (8001918 <MX_GPIO_Init+0xc8>)
 80018ce:	f001 fd69 	bl	80033a4 <HAL_GPIO_WritePin>
			ACQ_LED_Pin | POWER_LED_Pin | FF_D_Pin | FF_CLK_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
	GPIO_InitStruct.Pin = SW1_Pin | SW2_Pin | SW3_Pin;
 80018d2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80018d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	480d      	ldr	r0, [pc, #52]	@ (800191c <MX_GPIO_Init+0xcc>)
 80018e8:	f001 fbe2 	bl	80030b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ACQ_LED_Pin POWER_LED_Pin FF_D_Pin FF_CLK_Pin */
	GPIO_InitStruct.Pin = ACQ_LED_Pin | POWER_LED_Pin | FF_D_Pin | FF_CLK_Pin;
 80018ec:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80018f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4804      	ldr	r0, [pc, #16]	@ (8001918 <MX_GPIO_Init+0xc8>)
 8001906:	f001 fbd3 	bl	80030b0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	@ 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	48000400 	.word	0x48000400
 800191c:	48000800 	.word	0x48000800

08001920 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001930:	d103      	bne.n	800193a <HAL_TIM_PeriodElapsedCallback+0x1a>
		flag_new_sample = 1;
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin);
		}

	}

}
 8001938:	e00c      	b.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x34>
	} else if (htim->Instance == TIM19) {
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d107      	bne.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x34>
		if (blink_ACQ_LED == 1) {
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d103      	bne.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x34>
			HAL_GPIO_TogglePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin);
 800194c:	2140      	movs	r1, #64	@ 0x40
 800194e:	4806      	ldr	r0, [pc, #24]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001950:	f001 fd40 	bl	80033d4 <HAL_GPIO_TogglePin>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000026a 	.word	0x2000026a
 8001960:	40015c00 	.word	0x40015c00
 8001964:	20000269 	.word	0x20000269
 8001968:	48000400 	.word	0x48000400

0800196c <Read_ADC>:

uint16_t Read_ADC(SDADC_HandleTypeDef *hsdadc) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	int16_t adcVal;
	uint32_t channel;
	uint16_t vin;

	// Inicia la conversión inyectada
	HAL_SDADC_InjectedStart(hsdadc);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f003 fab5 	bl	8004ee4 <HAL_SDADC_InjectedStart>

	// Espera a que la conversión se complete
	HAL_SDADC_PollForInjectedConversion(hsdadc, HAL_MAX_DELAY);
 800197a:	f04f 31ff 	mov.w	r1, #4294967295
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f003 facb 	bl	8004f1a <HAL_SDADC_PollForInjectedConversion>

	// Obtiene el valor del ADC
	adcVal = HAL_SDADC_InjectedGetValue(hsdadc, &channel);
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4619      	mov	r1, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f003 fb4d 	bl	800502a <HAL_SDADC_InjectedGetValue>
 8001990:	4603      	mov	r3, r0
 8001992:	81fb      	strh	r3, [r7, #14]

	// Detiene la conversión
	HAL_SDADC_InjectedStop(hsdadc);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f003 fb2d 	bl	8004ff4 <HAL_SDADC_InjectedStop>

	// Calcula el voltaje en base al valor del ADC
	vin = (adcVal + 32768);
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80019a0:	81bb      	strh	r3, [r7, #12]

	return vin; // Retorna el valor en voltios
 80019a2:	89bb      	ldrh	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <Error_Handler+0x8>

080019b8 <process_command>:
static UART_HandleTypeDef *uart_handle;
static volatile uint8_t received_byte;
static volatile char rx_buffer[BUFFER_SIZE];
static volatile uint8_t rx_index = 0;

static void process_command(const char *command) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    if (strcmp(command, "ASTOPZ") == 0) {
 80019c0:	4925      	ldr	r1, [pc, #148]	@ (8001a58 <process_command+0xa0>)
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe fc00 	bl	80001c8 <strcmp>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d104      	bne.n	80019d8 <process_command+0x20>
        state_machine(EVENT_STOP, &current_state);
 80019ce:	4923      	ldr	r1, [pc, #140]	@ (8001a5c <process_command+0xa4>)
 80019d0:	2002      	movs	r0, #2
 80019d2:	f000 f8d5 	bl	8001b80 <state_machine>
    } else if (strcmp(command, "AACQZ") == 0) {
    	state_machine(EVENT_ACQ, &current_state);
    }else if (strcmp(command, "ARESETZ") == 0) {
        	state_machine(EVENT_RESTART, &current_state);
        }
}
 80019d6:	e03a      	b.n	8001a4e <process_command+0x96>
    } else if (strcmp(command, "ASTARTZ") == 0) {
 80019d8:	4921      	ldr	r1, [pc, #132]	@ (8001a60 <process_command+0xa8>)
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fbf4 	bl	80001c8 <strcmp>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d104      	bne.n	80019f0 <process_command+0x38>
    	state_machine(EVENT_START, &current_state);
 80019e6:	491d      	ldr	r1, [pc, #116]	@ (8001a5c <process_command+0xa4>)
 80019e8:	2001      	movs	r0, #1
 80019ea:	f000 f8c9 	bl	8001b80 <state_machine>
}
 80019ee:	e02e      	b.n	8001a4e <process_command+0x96>
    } else if (strcmp(command, "AAGCONZ") == 0) {
 80019f0:	491c      	ldr	r1, [pc, #112]	@ (8001a64 <process_command+0xac>)
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7fe fbe8 	bl	80001c8 <strcmp>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d104      	bne.n	8001a08 <process_command+0x50>
    	state_machine(EVENT_AGC_ON, &current_state);
 80019fe:	4917      	ldr	r1, [pc, #92]	@ (8001a5c <process_command+0xa4>)
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f8bd 	bl	8001b80 <state_machine>
}
 8001a06:	e022      	b.n	8001a4e <process_command+0x96>
    } else if (strcmp(command, "AAGCOFFZ") == 0) {
 8001a08:	4917      	ldr	r1, [pc, #92]	@ (8001a68 <process_command+0xb0>)
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe fbdc 	bl	80001c8 <strcmp>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d104      	bne.n	8001a20 <process_command+0x68>
    	state_machine(EVENT_AGC_OFF, &current_state);
 8001a16:	4911      	ldr	r1, [pc, #68]	@ (8001a5c <process_command+0xa4>)
 8001a18:	2004      	movs	r0, #4
 8001a1a:	f000 f8b1 	bl	8001b80 <state_machine>
}
 8001a1e:	e016      	b.n	8001a4e <process_command+0x96>
    } else if (strcmp(command, "AACQZ") == 0) {
 8001a20:	4912      	ldr	r1, [pc, #72]	@ (8001a6c <process_command+0xb4>)
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7fe fbd0 	bl	80001c8 <strcmp>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <process_command+0x80>
    	state_machine(EVENT_ACQ, &current_state);
 8001a2e:	490b      	ldr	r1, [pc, #44]	@ (8001a5c <process_command+0xa4>)
 8001a30:	2005      	movs	r0, #5
 8001a32:	f000 f8a5 	bl	8001b80 <state_machine>
}
 8001a36:	e00a      	b.n	8001a4e <process_command+0x96>
    }else if (strcmp(command, "ARESETZ") == 0) {
 8001a38:	490d      	ldr	r1, [pc, #52]	@ (8001a70 <process_command+0xb8>)
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe fbc4 	bl	80001c8 <strcmp>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <process_command+0x96>
        	state_machine(EVENT_RESTART, &current_state);
 8001a46:	4905      	ldr	r1, [pc, #20]	@ (8001a5c <process_command+0xa4>)
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f000 f899 	bl	8001b80 <state_machine>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	080070a8 	.word	0x080070a8
 8001a5c:	20000295 	.word	0x20000295
 8001a60:	080070b0 	.word	0x080070b0
 8001a64:	080070b8 	.word	0x080070b8
 8001a68:	080070c0 	.word	0x080070c0
 8001a6c:	080070cc 	.word	0x080070cc
 8001a70:	080070d4 	.word	0x080070d4

08001a74 <SerialHandler_Init>:

void SerialHandler_Init(UART_HandleTypeDef *huart) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    uart_handle = huart;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	@ (8001a98 <SerialHandler_Init+0x24>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(uart_handle, &received_byte, 1);  // Habilita la recepción por interrupción
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <SerialHandler_Init+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	4904      	ldr	r1, [pc, #16]	@ (8001a9c <SerialHandler_Init+0x28>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 f94d 	bl	8005d2a <HAL_UART_Receive_IT>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000027c 	.word	0x2000027c
 8001a9c:	20000280 	.word	0x20000280

08001aa0 <SerialHandler_SendData>:

void SerialHandler_SendData(uint16_t data) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
    uint8_t frame[4];
    frame[0] = 'A'; // Inicio de trama
 8001aaa:	2341      	movs	r3, #65	@ 0x41
 8001aac:	733b      	strb	r3, [r7, #12]
    frame[1] = (uint8_t)(data & 0xFF); // Byte menos significativo
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	737b      	strb	r3, [r7, #13]
    frame[2] = (uint8_t)((data >> 8) & 0xFF); // Byte más significativo
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	73bb      	strb	r3, [r7, #14]
    frame[3] = 'Z'; // Fin de trama
 8001abe:	235a      	movs	r3, #90	@ 0x5a
 8001ac0:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(uart_handle, frame, sizeof(frame), HAL_MAX_DELAY);
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <SerialHandler_SendData+0x3c>)
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	f107 010c 	add.w	r1, r7, #12
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	2204      	movs	r2, #4
 8001ad0:	f004 f8a2 	bl	8005c18 <HAL_UART_Transmit>
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	2000027c 	.word	0x2000027c

08001ae0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    if (huart == uart_handle) {
 8001ae8:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <HAL_UART_RxCpltCallback+0x8c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d138      	bne.n	8001b64 <HAL_UART_RxCpltCallback+0x84>
        if (received_byte == 0x7F) {
 8001af2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <HAL_UART_RxCpltCallback+0x90>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001afa:	d103      	bne.n	8001b04 <HAL_UART_RxCpltCallback+0x24>
            programming_mode = 1;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <HAL_UART_RxCpltCallback+0x94>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e028      	b.n	8001b56 <HAL_UART_RxCpltCallback+0x76>
        } else if (received_byte == '\n') {
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <HAL_UART_RxCpltCallback+0x90>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b0a      	cmp	r3, #10
 8001b0c:	d10d      	bne.n	8001b2a <HAL_UART_RxCpltCallback+0x4a>
            rx_buffer[rx_index] = '\0'; // Termina la cadena
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <HAL_UART_RxCpltCallback+0x98>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_UART_RxCpltCallback+0x9c>)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]
            process_command((const char *)rx_buffer);
 8001b1c:	4817      	ldr	r0, [pc, #92]	@ (8001b7c <HAL_UART_RxCpltCallback+0x9c>)
 8001b1e:	f7ff ff4b 	bl	80019b8 <process_command>
            rx_index = 0; // Reinicia el índice
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <HAL_UART_RxCpltCallback+0x98>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e015      	b.n	8001b56 <HAL_UART_RxCpltCallback+0x76>
        } else if (rx_index < BUFFER_SIZE - 1) {
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <HAL_UART_RxCpltCallback+0x98>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b0e      	cmp	r3, #14
 8001b32:	d80d      	bhi.n	8001b50 <HAL_UART_RxCpltCallback+0x70>
            rx_buffer[rx_index++] = received_byte;
 8001b34:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_UART_RxCpltCallback+0x98>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	b2d1      	uxtb	r1, r2
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <HAL_UART_RxCpltCallback+0x98>)
 8001b40:	7011      	strb	r1, [r2, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_UART_RxCpltCallback+0x90>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2d9      	uxtb	r1, r3
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <HAL_UART_RxCpltCallback+0x9c>)
 8001b4c:	5499      	strb	r1, [r3, r2]
 8001b4e:	e002      	b.n	8001b56 <HAL_UART_RxCpltCallback+0x76>
        } else {
            rx_index = 0; // Resetea en caso de desbordamiento
 8001b50:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_UART_RxCpltCallback+0x98>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(uart_handle, (uint8_t *)&received_byte, 1);
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_UART_RxCpltCallback+0x8c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4904      	ldr	r1, [pc, #16]	@ (8001b70 <HAL_UART_RxCpltCallback+0x90>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 f8e3 	bl	8005d2a <HAL_UART_Receive_IT>
    }
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000027c 	.word	0x2000027c
 8001b70:	20000280 	.word	0x20000280
 8001b74:	20000268 	.word	0x20000268
 8001b78:	20000294 	.word	0x20000294
 8001b7c:	20000284 	.word	0x20000284

08001b80 <state_machine>:
#include "agc.h"
#include "filters.h"

state_type current_state = STATE_STANDBY_MANUAL;

int8_t state_machine(event_type event, state_type* state) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]

	int8_t ret = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]

	 switch (*state) {
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	f200 8166 	bhi.w	8001e66 <state_machine+0x2e6>
 8001b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba0 <state_machine+0x20>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001bb9 	.word	0x08001bb9
 8001ba4:	08001c21 	.word	0x08001c21
 8001ba8:	08001c87 	.word	0x08001c87
 8001bac:	08001d0f 	.word	0x08001d0f
 8001bb0:	08001df7 	.word	0x08001df7
 8001bb4:	08001d89 	.word	0x08001d89
	        case STATE_STANDBY_MANUAL:
	            switch (event) {
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	f200 8155 	bhi.w	8001e6a <state_machine+0x2ea>
 8001bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc8 <state_machine+0x48>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001be1 	.word	0x08001be1
 8001bcc:	08001bf9 	.word	0x08001bf9
 8001bd0:	08001c07 	.word	0x08001c07
 8001bd4:	08001c0d 	.word	0x08001c0d
 8001bd8:	08001c13 	.word	0x08001c13
 8001bdc:	08001c19 	.word	0x08001c19
	            	case EVENT_RESTART:
	            		*state = STATE_STANDBY_MANUAL;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2140      	movs	r1, #64	@ 0x40
 8001bea:	48a8      	ldr	r0, [pc, #672]	@ (8001e8c <state_machine+0x30c>)
 8001bec:	f001 fbda 	bl	80033a4 <HAL_GPIO_WritePin>
	                    blink_ACQ_LED = 0;
 8001bf0:	4ba7      	ldr	r3, [pc, #668]	@ (8001e90 <state_machine+0x310>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
	            		break;
 8001bf6:	e012      	b.n	8001c1e <state_machine+0x9e>
	                case EVENT_START:
	                    *state = STATE_MANUAL_OPERATION;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	701a      	strb	r2, [r3, #0]
	                    blink_ACQ_LED = 1;
 8001bfe:	4ba4      	ldr	r3, [pc, #656]	@ (8001e90 <state_machine+0x310>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
	                    break;
 8001c04:	e00b      	b.n	8001c1e <state_machine+0x9e>
	                case EVENT_STOP:
	                	ret = -1;
 8001c06:	23ff      	movs	r3, #255	@ 0xff
 8001c08:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001c0a:	e008      	b.n	8001c1e <state_machine+0x9e>
	                case EVENT_AGC_ON:
	                	ret = -1;
 8001c0c:	23ff      	movs	r3, #255	@ 0xff
 8001c0e:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001c10:	e005      	b.n	8001c1e <state_machine+0x9e>
	                case EVENT_AGC_OFF:
	                	ret = -1;
 8001c12:	23ff      	movs	r3, #255	@ 0xff
 8001c14:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001c16:	e002      	b.n	8001c1e <state_machine+0x9e>
	                case EVENT_ACQ:
	                	ret = -1;
 8001c18:	23ff      	movs	r3, #255	@ 0xff
 8001c1a:	73fb      	strb	r3, [r7, #15]
	                    break;
 8001c1c:	bf00      	nop
	            }
	            break;
 8001c1e:	e124      	b.n	8001e6a <state_machine+0x2ea>

		        case STATE_STANDBY_AUTO:
		            switch (event) {
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	f200 8123 	bhi.w	8001e6e <state_machine+0x2ee>
 8001c28:	a201      	add	r2, pc, #4	@ (adr r2, 8001c30 <state_machine+0xb0>)
 8001c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2e:	bf00      	nop
 8001c30:	08001c49 	.word	0x08001c49
 8001c34:	08001c5f 	.word	0x08001c5f
 8001c38:	08001c6d 	.word	0x08001c6d
 8001c3c:	08001c73 	.word	0x08001c73
 8001c40:	08001c79 	.word	0x08001c79
 8001c44:	08001c7f 	.word	0x08001c7f
						case EVENT_RESTART:
							*state = STATE_STANDBY_MANUAL;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
		                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2140      	movs	r1, #64	@ 0x40
 8001c52:	488e      	ldr	r0, [pc, #568]	@ (8001e8c <state_machine+0x30c>)
 8001c54:	f001 fba6 	bl	80033a4 <HAL_GPIO_WritePin>
		                    blink_ACQ_LED = 0;
 8001c58:	4b8d      	ldr	r3, [pc, #564]	@ (8001e90 <state_machine+0x310>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
		                case EVENT_START:
		                    *state = STATE_AUTOMATIC_OPERATION;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2203      	movs	r2, #3
 8001c62:	701a      	strb	r2, [r3, #0]
		                    blink_ACQ_LED = 1;
 8001c64:	4b8a      	ldr	r3, [pc, #552]	@ (8001e90 <state_machine+0x310>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
		                    break;
 8001c6a:	e00b      	b.n	8001c84 <state_machine+0x104>
		                case EVENT_STOP:
		                	ret = -1;
 8001c6c:	23ff      	movs	r3, #255	@ 0xff
 8001c6e:	73fb      	strb	r3, [r7, #15]
		                	break;
 8001c70:	e008      	b.n	8001c84 <state_machine+0x104>
		                case EVENT_AGC_ON:
		                	ret = -1;
 8001c72:	23ff      	movs	r3, #255	@ 0xff
 8001c74:	73fb      	strb	r3, [r7, #15]
		                	break;
 8001c76:	e005      	b.n	8001c84 <state_machine+0x104>
		                case EVENT_AGC_OFF:
		                	ret = -1;
 8001c78:	23ff      	movs	r3, #255	@ 0xff
 8001c7a:	73fb      	strb	r3, [r7, #15]
		                	break;
 8001c7c:	e002      	b.n	8001c84 <state_machine+0x104>
		                case EVENT_ACQ:
		                	ret = -1;
 8001c7e:	23ff      	movs	r3, #255	@ 0xff
 8001c80:	73fb      	strb	r3, [r7, #15]
		                    break;
 8001c82:	bf00      	nop
		            }
		            break;
 8001c84:	e0f3      	b.n	8001e6e <state_machine+0x2ee>

	        case STATE_MANUAL_OPERATION:
	            switch (event) {
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	f200 80f2 	bhi.w	8001e72 <state_machine+0x2f2>
 8001c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c94 <state_machine+0x114>)
 8001c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c94:	08001cad 	.word	0x08001cad
 8001c98:	08001d07 	.word	0x08001d07
 8001c9c:	08001cc5 	.word	0x08001cc5
 8001ca0:	08001cdd 	.word	0x08001cdd
 8001ca4:	08001ce9 	.word	0x08001ce9
 8001ca8:	08001cef 	.word	0x08001cef
	            	case EVENT_RESTART:
	            	    *state = STATE_STANDBY_MANUAL;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2140      	movs	r1, #64	@ 0x40
 8001cb6:	4875      	ldr	r0, [pc, #468]	@ (8001e8c <state_machine+0x30c>)
 8001cb8:	f001 fb74 	bl	80033a4 <HAL_GPIO_WritePin>
	                    blink_ACQ_LED = 0;
 8001cbc:	4b74      	ldr	r3, [pc, #464]	@ (8001e90 <state_machine+0x310>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
	            	    break;
 8001cc2:	e023      	b.n	8001d0c <state_machine+0x18c>
	                case EVENT_STOP:
	                    *state = STATE_STANDBY_MANUAL;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2140      	movs	r1, #64	@ 0x40
 8001cce:	486f      	ldr	r0, [pc, #444]	@ (8001e8c <state_machine+0x30c>)
 8001cd0:	f001 fb68 	bl	80033a4 <HAL_GPIO_WritePin>
	                    blink_ACQ_LED = 0;
 8001cd4:	4b6e      	ldr	r3, [pc, #440]	@ (8001e90 <state_machine+0x310>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
	                    break;
 8001cda:	e017      	b.n	8001d0c <state_machine+0x18c>
	                case EVENT_AGC_ON:
	                    *state = STATE_AUTOMATIC_OPERATION;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2203      	movs	r2, #3
 8001ce0:	701a      	strb	r2, [r3, #0]
	                    AGC_Init();
 8001ce2:	f7ff f831 	bl	8000d48 <AGC_Init>
	                    break;
 8001ce6:	e011      	b.n	8001d0c <state_machine+0x18c>
	                case EVENT_AGC_OFF:
	                	ret = -1;
 8001ce8:	23ff      	movs	r3, #255	@ 0xff
 8001cea:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001cec:	e00e      	b.n	8001d0c <state_machine+0x18c>
	                case EVENT_ACQ:
	                    *state = STATE_ACQUIRING_MANUAL;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	701a      	strb	r2, [r3, #0]
	                    blink_ACQ_LED = 0;
 8001cf4:	4b66      	ldr	r3, [pc, #408]	@ (8001e90 <state_machine+0x310>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 1);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2140      	movs	r1, #64	@ 0x40
 8001cfe:	4863      	ldr	r0, [pc, #396]	@ (8001e8c <state_machine+0x30c>)
 8001d00:	f001 fb50 	bl	80033a4 <HAL_GPIO_WritePin>
	                    break;
 8001d04:	e002      	b.n	8001d0c <state_machine+0x18c>
	                case EVENT_START:
	                	ret = -1;
 8001d06:	23ff      	movs	r3, #255	@ 0xff
 8001d08:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001d0a:	bf00      	nop
	            }
	            break;
 8001d0c:	e0b1      	b.n	8001e72 <state_machine+0x2f2>

	        case STATE_AUTOMATIC_OPERATION:
	            switch (event) {
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	f200 80b0 	bhi.w	8001e76 <state_machine+0x2f6>
 8001d16:	a201      	add	r2, pc, #4	@ (adr r2, 8001d1c <state_machine+0x19c>)
 8001d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1c:	08001d35 	.word	0x08001d35
 8001d20:	08001d73 	.word	0x08001d73
 8001d24:	08001d4d 	.word	0x08001d4d
 8001d28:	08001d79 	.word	0x08001d79
 8001d2c:	08001d7f 	.word	0x08001d7f
 8001d30:	08001d5b 	.word	0x08001d5b
					case EVENT_RESTART:
						*state = STATE_STANDBY_MANUAL;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2140      	movs	r1, #64	@ 0x40
 8001d3e:	4853      	ldr	r0, [pc, #332]	@ (8001e8c <state_machine+0x30c>)
 8001d40:	f001 fb30 	bl	80033a4 <HAL_GPIO_WritePin>
	                    blink_ACQ_LED = 0;
 8001d44:	4b52      	ldr	r3, [pc, #328]	@ (8001e90 <state_machine+0x310>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
						break;
 8001d4a:	e01c      	b.n	8001d86 <state_machine+0x206>
	                case EVENT_STOP:
	                    *state = STATE_STANDBY_AUTO;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
	                    blink_ACQ_LED = 0;
 8001d52:	4b4f      	ldr	r3, [pc, #316]	@ (8001e90 <state_machine+0x310>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
	                    break;
 8001d58:	e015      	b.n	8001d86 <state_machine+0x206>
	                case EVENT_ACQ:
	                    *state = STATE_ACQUIRING_AUTO;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	701a      	strb	r2, [r3, #0]
	                    blink_ACQ_LED = 0;
 8001d60:	4b4b      	ldr	r3, [pc, #300]	@ (8001e90 <state_machine+0x310>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 1);
 8001d66:	2201      	movs	r2, #1
 8001d68:	2140      	movs	r1, #64	@ 0x40
 8001d6a:	4848      	ldr	r0, [pc, #288]	@ (8001e8c <state_machine+0x30c>)
 8001d6c:	f001 fb1a 	bl	80033a4 <HAL_GPIO_WritePin>
	                    break;
 8001d70:	e009      	b.n	8001d86 <state_machine+0x206>
	                case EVENT_START:
	                	ret = -1;
 8001d72:	23ff      	movs	r3, #255	@ 0xff
 8001d74:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001d76:	e006      	b.n	8001d86 <state_machine+0x206>
	                case EVENT_AGC_ON:
	                	ret = -1;
 8001d78:	23ff      	movs	r3, #255	@ 0xff
 8001d7a:	73fb      	strb	r3, [r7, #15]
	                    break;
 8001d7c:	e003      	b.n	8001d86 <state_machine+0x206>
	                case EVENT_AGC_OFF:
	                	*state = STATE_MANUAL_OPERATION;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2202      	movs	r2, #2
 8001d82:	701a      	strb	r2, [r3, #0]
	                	break;
 8001d84:	bf00      	nop
	            }
	            break;
 8001d86:	e076      	b.n	8001e76 <state_machine+0x2f6>

	        case STATE_ACQUIRING_MANUAL:
	            switch (event) {
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d875      	bhi.n	8001e7a <state_machine+0x2fa>
 8001d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d94 <state_machine+0x214>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001dad 	.word	0x08001dad
 8001d98:	08001ddd 	.word	0x08001ddd
 8001d9c:	08001dc5 	.word	0x08001dc5
 8001da0:	08001de3 	.word	0x08001de3
 8001da4:	08001de9 	.word	0x08001de9
 8001da8:	08001def 	.word	0x08001def
					case EVENT_RESTART:
						*state = STATE_STANDBY_MANUAL;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2140      	movs	r1, #64	@ 0x40
 8001db6:	4835      	ldr	r0, [pc, #212]	@ (8001e8c <state_machine+0x30c>)
 8001db8:	f001 faf4 	bl	80033a4 <HAL_GPIO_WritePin>
	                    blink_ACQ_LED = 0;
 8001dbc:	4b34      	ldr	r3, [pc, #208]	@ (8001e90 <state_machine+0x310>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
						break;
 8001dc2:	e017      	b.n	8001df4 <state_machine+0x274>
	                case EVENT_STOP:
	                    *state = STATE_MANUAL_OPERATION;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	701a      	strb	r2, [r3, #0]
	                    blink_ACQ_LED = 1;
 8001dca:	4b31      	ldr	r3, [pc, #196]	@ (8001e90 <state_machine+0x310>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
	                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2140      	movs	r1, #64	@ 0x40
 8001dd4:	482d      	ldr	r0, [pc, #180]	@ (8001e8c <state_machine+0x30c>)
 8001dd6:	f001 fae5 	bl	80033a4 <HAL_GPIO_WritePin>
	                    break;
 8001dda:	e00b      	b.n	8001df4 <state_machine+0x274>
	                case EVENT_START:
	                	ret = -1;
 8001ddc:	23ff      	movs	r3, #255	@ 0xff
 8001dde:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001de0:	e008      	b.n	8001df4 <state_machine+0x274>
	                case EVENT_AGC_ON:
	                	ret = -1;
 8001de2:	23ff      	movs	r3, #255	@ 0xff
 8001de4:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001de6:	e005      	b.n	8001df4 <state_machine+0x274>
	                case EVENT_AGC_OFF:
	                	ret = -1;
 8001de8:	23ff      	movs	r3, #255	@ 0xff
 8001dea:	73fb      	strb	r3, [r7, #15]
	                	break;
 8001dec:	e002      	b.n	8001df4 <state_machine+0x274>
	                case EVENT_ACQ:
	                	ret = -1;
 8001dee:	23ff      	movs	r3, #255	@ 0xff
 8001df0:	73fb      	strb	r3, [r7, #15]
	                    break;
 8001df2:	bf00      	nop
	            }
	            break;
 8001df4:	e041      	b.n	8001e7a <state_machine+0x2fa>

		        case STATE_ACQUIRING_AUTO:
		            switch (event) {
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d840      	bhi.n	8001e7e <state_machine+0x2fe>
 8001dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8001e04 <state_machine+0x284>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e1d 	.word	0x08001e1d
 8001e08:	08001e4d 	.word	0x08001e4d
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	08001e53 	.word	0x08001e53
 8001e14:	08001e59 	.word	0x08001e59
 8001e18:	08001e5f 	.word	0x08001e5f
						case EVENT_RESTART:
							*state = STATE_STANDBY_MANUAL;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
		                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2140      	movs	r1, #64	@ 0x40
 8001e26:	4819      	ldr	r0, [pc, #100]	@ (8001e8c <state_machine+0x30c>)
 8001e28:	f001 fabc 	bl	80033a4 <HAL_GPIO_WritePin>
		                    blink_ACQ_LED = 0;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <state_machine+0x310>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
							break;
 8001e32:	e017      	b.n	8001e64 <state_machine+0x2e4>
		                case EVENT_STOP:
		                    *state = STATE_AUTOMATIC_OPERATION;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2203      	movs	r2, #3
 8001e38:	701a      	strb	r2, [r3, #0]
		                    blink_ACQ_LED = 1;
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <state_machine+0x310>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
		                    HAL_GPIO_WritePin(ACQ_LED_GPIO_Port, ACQ_LED_Pin, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2140      	movs	r1, #64	@ 0x40
 8001e44:	4811      	ldr	r0, [pc, #68]	@ (8001e8c <state_machine+0x30c>)
 8001e46:	f001 faad 	bl	80033a4 <HAL_GPIO_WritePin>
		                    break;
 8001e4a:	e00b      	b.n	8001e64 <state_machine+0x2e4>
		                case EVENT_START:
		                	ret = -1;
 8001e4c:	23ff      	movs	r3, #255	@ 0xff
 8001e4e:	73fb      	strb	r3, [r7, #15]
		                	break;
 8001e50:	e008      	b.n	8001e64 <state_machine+0x2e4>
		                case EVENT_AGC_ON:
		                	ret = -1;
 8001e52:	23ff      	movs	r3, #255	@ 0xff
 8001e54:	73fb      	strb	r3, [r7, #15]
		                	break;
 8001e56:	e005      	b.n	8001e64 <state_machine+0x2e4>
		                case EVENT_AGC_OFF:
		                	ret = -1;
 8001e58:	23ff      	movs	r3, #255	@ 0xff
 8001e5a:	73fb      	strb	r3, [r7, #15]
		                	break;
 8001e5c:	e002      	b.n	8001e64 <state_machine+0x2e4>
		                case EVENT_ACQ:
		                	ret = -1;
 8001e5e:	23ff      	movs	r3, #255	@ 0xff
 8001e60:	73fb      	strb	r3, [r7, #15]
		                    break;
 8001e62:	bf00      	nop
		            }
		            break;
 8001e64:	e00b      	b.n	8001e7e <state_machine+0x2fe>



	        default:
	            // TODO: Manejo de estado desconocido (si es necesario)
	            break;
 8001e66:	bf00      	nop
 8001e68:	e00a      	b.n	8001e80 <state_machine+0x300>
	            break;
 8001e6a:	bf00      	nop
 8001e6c:	e008      	b.n	8001e80 <state_machine+0x300>
		            break;
 8001e6e:	bf00      	nop
 8001e70:	e006      	b.n	8001e80 <state_machine+0x300>
	            break;
 8001e72:	bf00      	nop
 8001e74:	e004      	b.n	8001e80 <state_machine+0x300>
	            break;
 8001e76:	bf00      	nop
 8001e78:	e002      	b.n	8001e80 <state_machine+0x300>
	            break;
 8001e7a:	bf00      	nop
 8001e7c:	e000      	b.n	8001e80 <state_machine+0x300>
		            break;
 8001e7e:	bf00      	nop
	    }
	 return ret;
 8001e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	20000269 	.word	0x20000269

08001e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <HAL_MspInit+0x44>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed8 <HAL_MspInit+0x44>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6193      	str	r3, [r2, #24]
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <HAL_MspInit+0x44>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_MspInit+0x44>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a08      	ldr	r2, [pc, #32]	@ (8001ed8 <HAL_MspInit+0x44>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_MspInit+0x44>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000

08001edc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a15      	ldr	r2, [pc, #84]	@ (8001f50 <HAL_ADC_MspInit+0x74>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d123      	bne.n	8001f46 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_ADC_MspInit+0x78>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4a14      	ldr	r2, [pc, #80]	@ (8001f54 <HAL_ADC_MspInit+0x78>)
 8001f04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f08:	6193      	str	r3, [r2, #24]
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_ADC_MspInit+0x78>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_ADC_MspInit+0x78>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <HAL_ADC_MspInit+0x78>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f20:	6153      	str	r3, [r2, #20]
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <HAL_ADC_MspInit+0x78>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f32:	2303      	movs	r3, #3
 8001f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <HAL_ADC_MspInit+0x7c>)
 8001f42:	f001 f8b5 	bl	80030b0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f46:	bf00      	nop
 8001f48:	3728      	adds	r7, #40	@ 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40012400 	.word	0x40012400
 8001f54:	40021000 	.word	0x40021000
 8001f58:	48000400 	.word	0x48000400

08001f5c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a15      	ldr	r2, [pc, #84]	@ (8001fd0 <HAL_DAC_MspInit+0x74>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d124      	bne.n	8001fc8 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC2_MspInit 0 */

    /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_DAC_MspInit+0x78>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	4a14      	ldr	r2, [pc, #80]	@ (8001fd4 <HAL_DAC_MspInit+0x78>)
 8001f84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f88:	61d3      	str	r3, [r2, #28]
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_DAC_MspInit+0x78>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_DAC_MspInit+0x78>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <HAL_DAC_MspInit+0x78>)
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa0:	6153      	str	r3, [r2, #20]
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <HAL_DAC_MspInit+0x78>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fae:	2340      	movs	r3, #64	@ 0x40
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc4:	f001 f874 	bl	80030b0 <HAL_GPIO_Init>

    /* USER CODE END DAC2_MspInit 1 */

  }

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	@ 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40009800 	.word	0x40009800
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <HAL_SDADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsdadc: SDADC handle pointer
  * @retval None
  */
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a15      	ldr	r2, [pc, #84]	@ (800204c <HAL_SDADC_MspInit+0x74>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d123      	bne.n	8002042 <HAL_SDADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN SDADC1_MspInit 0 */

    /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <HAL_SDADC_MspInit+0x78>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	4a14      	ldr	r2, [pc, #80]	@ (8002050 <HAL_SDADC_MspInit+0x78>)
 8002000:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002004:	6193      	str	r3, [r2, #24]
 8002006:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_SDADC_MspInit+0x78>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b0f      	ldr	r3, [pc, #60]	@ (8002050 <HAL_SDADC_MspInit+0x78>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	4a0e      	ldr	r2, [pc, #56]	@ (8002050 <HAL_SDADC_MspInit+0x78>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800201c:	6153      	str	r3, [r2, #20]
 800201e:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <HAL_SDADC_MspInit+0x78>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /**SDADC1 GPIO Configuration
    PB1     ------> SDADC1_AIN5P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800202a:	2302      	movs	r3, #2
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202e:	2303      	movs	r3, #3
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	@ (8002054 <HAL_SDADC_MspInit+0x7c>)
 800203e:	f001 f837 	bl	80030b0 <HAL_GPIO_Init>

    /* USER CODE END SDADC1_MspInit 1 */

  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	@ 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40016000 	.word	0x40016000
 8002050:	40021000 	.word	0x40021000
 8002054:	48000400 	.word	0x48000400

08002058 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002068:	d114      	bne.n	8002094 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a18      	ldr	r2, [pc, #96]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	61d3      	str	r3, [r2, #28]
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	201c      	movs	r0, #28
 8002088:	f000 fe81 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800208c:	201c      	movs	r0, #28
 800208e:	f000 fe9a 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM19_MspInit 1 */

    /* USER CODE END TIM19_MspInit 1 */
  }

}
 8002092:	e018      	b.n	80020c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM19)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0e      	ldr	r2, [pc, #56]	@ (80020d4 <HAL_TIM_Base_MspInit+0x7c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d113      	bne.n	80020c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM19_CLK_ENABLE();
 800209e:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4a0b      	ldr	r2, [pc, #44]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 80020a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020a8:	6193      	str	r3, [r2, #24]
 80020aa:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM19_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	204e      	movs	r0, #78	@ 0x4e
 80020bc:	f000 fe67 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM19_IRQn);
 80020c0:	204e      	movs	r0, #78	@ 0x4e
 80020c2:	f000 fe80 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40015c00 	.word	0x40015c00

080020d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	@ 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002168 <HAL_UART_MspInit+0x90>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d131      	bne.n	800215e <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020fa:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <HAL_UART_MspInit+0x94>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4a1b      	ldr	r2, [pc, #108]	@ (800216c <HAL_UART_MspInit+0x94>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002104:	6193      	str	r3, [r2, #24]
 8002106:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_UART_MspInit+0x94>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_UART_MspInit+0x94>)
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4a15      	ldr	r2, [pc, #84]	@ (800216c <HAL_UART_MspInit+0x94>)
 8002118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211c:	6153      	str	r3, [r2, #20]
 800211e:	4b13      	ldr	r3, [pc, #76]	@ (800216c <HAL_UART_MspInit+0x94>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800212a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800213c:	2307      	movs	r3, #7
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800214a:	f000 ffb1 	bl	80030b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2025      	movs	r0, #37	@ 0x25
 8002154:	f000 fe1b 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002158:	2025      	movs	r0, #37	@ 0x25
 800215a:	f000 fe34 	bl	8002dc6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800215e:	bf00      	nop
 8002160:	3728      	adds	r7, #40	@ 0x28
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40013800 	.word	0x40013800
 800216c:	40021000 	.word	0x40021000

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <NMI_Handler+0x4>

08002178 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <MemManage_Handler+0x4>

08002188 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <BusFault_Handler+0x4>

08002190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <UsageFault_Handler+0x4>

08002198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c6:	f000 f8a3 	bl	8002310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021d4:	4802      	ldr	r0, [pc, #8]	@ (80021e0 <TIM2_IRQHandler+0x10>)
 80021d6:	f003 f929 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000148 	.word	0x20000148

080021e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021e8:	4802      	ldr	r0, [pc, #8]	@ (80021f4 <USART1_IRQHandler+0x10>)
 80021ea:	f003 fde3 	bl	8005db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200001e0 	.word	0x200001e0

080021f8 <TIM19_IRQHandler>:

/**
  * @brief This function handles TIM19 global interrupt.
  */
void TIM19_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM19_IRQn 0 */

  /* USER CODE END TIM19_IRQn 0 */
  HAL_TIM_IRQHandler(&htim19);
 80021fc:	4802      	ldr	r0, [pc, #8]	@ (8002208 <TIM19_IRQHandler+0x10>)
 80021fe:	f003 f915 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM19_IRQn 1 */

  /* USER CODE END TIM19_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000194 	.word	0x20000194

0800220c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <SystemInit+0x20>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	4a05      	ldr	r2, [pc, #20]	@ (800222c <SystemInit+0x20>)
 8002218:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800221c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002268 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002234:	f7ff ffea 	bl	800220c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002238:	480c      	ldr	r0, [pc, #48]	@ (800226c <LoopForever+0x6>)
  ldr r1, =_edata
 800223a:	490d      	ldr	r1, [pc, #52]	@ (8002270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800223c:	4a0d      	ldr	r2, [pc, #52]	@ (8002274 <LoopForever+0xe>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002240:	e002      	b.n	8002248 <LoopCopyDataInit>

08002242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002246:	3304      	adds	r3, #4

08002248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800224c:	d3f9      	bcc.n	8002242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224e:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002250:	4c0a      	ldr	r4, [pc, #40]	@ (800227c <LoopForever+0x16>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002254:	e001      	b.n	800225a <LoopFillZerobss>

08002256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002258:	3204      	adds	r2, #4

0800225a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800225c:	d3fb      	bcc.n	8002256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800225e:	f004 fef3 	bl	8007048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002262:	f7fe ff6f 	bl	8001144 <main>

08002266 <LoopForever>:

LoopForever:
    b LoopForever
 8002266:	e7fe      	b.n	8002266 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002268:	20006000 	.word	0x20006000
  ldr r0, =_sdata
 800226c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002270:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002274:	08007178 	.word	0x08007178
  ldr r2, =_sbss
 8002278:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800227c:	2000029c 	.word	0x2000029c

08002280 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC1_IRQHandler>
	...

08002284 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <HAL_Init+0x28>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a07      	ldr	r2, [pc, #28]	@ (80022ac <HAL_Init+0x28>)
 800228e:	f043 0310 	orr.w	r3, r3, #16
 8002292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 fd6f 	bl	8002d78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229a:	200f      	movs	r0, #15
 800229c:	f000 f808 	bl	80022b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a0:	f7ff fdf8 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000

080022b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b8:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <HAL_InitTick+0x54>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <HAL_InitTick+0x58>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fd87 	bl	8002de2 <HAL_SYSTICK_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e00e      	b.n	80022fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d80a      	bhi.n	80022fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 fd4f 	bl	8002d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f0:	4a06      	ldr	r2, [pc, #24]	@ (800230c <HAL_InitTick+0x5c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000004 	.word	0x20000004
 8002308:	2000000c 	.word	0x2000000c
 800230c:	20000008 	.word	0x20000008

08002310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000000c 	.word	0x2000000c
 8002334:	20000298 	.word	0x20000298

08002338 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;  
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000298 	.word	0x20000298

08002350 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff ffee 	bl	8002338 <HAL_GetTick>
 800235c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002376:	bf00      	nop
 8002378:	f7ff ffde 	bl	8002338 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000000c 	.word	0x2000000c

08002398 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0be      	b.n	8002538 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fd80 	bl	8001edc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fbb9 	bl	8002b54 <ADC_ConversionStop_Disable>
 80023e2:	4603      	mov	r3, r0
 80023e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 8099 	bne.w	8002526 <HAL_ADC_Init+0x18e>
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 8095 	bne.w	8002526 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002404:	f023 0302 	bic.w	r3, r3, #2
 8002408:	f043 0202 	orr.w	r2, r3, #2
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002418:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	7b1b      	ldrb	r3, [r3, #12]
 800241e:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8002420:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4313      	orrs	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002430:	d003      	beq.n	800243a <HAL_ADC_Init+0xa2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d102      	bne.n	8002440 <HAL_ADC_Init+0xa8>
 800243a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800243e:	e000      	b.n	8002442 <HAL_ADC_Init+0xaa>
 8002440:	2300      	movs	r3, #0
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7d1b      	ldrb	r3, [r3, #20]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d119      	bne.n	8002484 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7b1b      	ldrb	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	3b01      	subs	r3, #1
 800245e:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	e00b      	b.n	8002484 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <HAL_ADC_Init+0x1a8>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024b4:	d003      	beq.n	80024be <HAL_ADC_Init+0x126>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d104      	bne.n	80024c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	051b      	lsls	r3, r3, #20
 80024c6:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	430a      	orrs	r2, r1
 80024da:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HAL_ADC_Init+0x1ac>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d10b      	bne.n	8002504 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002502:	e018      	b.n	8002536 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	f023 0312 	bic.w	r3, r3, #18
 800250c:	f043 0210 	orr.w	r2, r3, #16
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002524:	e007      	b.n	8002536 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002536:	7dfb      	ldrb	r3, [r7, #23]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	ffe1f7fd 	.word	0xffe1f7fd
 8002544:	ff1f0efe 	.word	0xff1f0efe

08002548 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_ADC_Start+0x1a>
 800255e:	2302      	movs	r3, #2
 8002560:	e058      	b.n	8002614 <HAL_ADC_Start+0xcc>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fa98 	bl	8002aa0 <ADC_Enable>
 8002570:	4603      	mov	r3, r0
 8002572:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d14b      	bne.n	8002612 <HAL_ADC_Start+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) */
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b8:	d106      	bne.n	80025c8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025be:	f023 0206 	bic.w	r2, r3, #6
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025c6:	e002      	b.n	80025ce <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0202 	mvn.w	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025ea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025ee:	d108      	bne.n	8002602 <HAL_ADC_Start+0xba>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	e007      	b.n	8002612 <HAL_ADC_Start+0xca>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002610:	609a      	str	r2, [r3, #8]
    }
  }

  /* Return function status */
  return tmp_hal_status;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Stop+0x1a>
 8002632:	2302      	movs	r3, #2
 8002634:	e01a      	b.n	800266c <HAL_ADC_Stop+0x50>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa88 	bl	8002b54 <ADC_ConversionStop_Disable>
 8002644:	4603      	mov	r3, r0
 8002646:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002652:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  
  /* Variables for polling in case of scan mode enabled */
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002694:	d10b      	bne.n	80026ae <HAL_ADC_PollForConversion+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0e9      	b.n	8002882 <HAL_ADC_PollForConversion+0x20e>
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026ae:	f7ff fe43 	bl	8002338 <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d131      	bne.n	8002726 <HAL_ADC_PollForConversion+0xb2>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d12a      	bne.n	8002726 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026d0:	e021      	b.n	8002716 <HAL_ADC_PollForConversion+0xa2>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d01d      	beq.n	8002716 <HAL_ADC_PollForConversion+0xa2>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <HAL_ADC_PollForConversion+0x7c>
 80026e0:	f7ff fe2a 	bl	8002338 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d212      	bcs.n	8002716 <HAL_ADC_PollForConversion+0xa2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <HAL_ADC_PollForConversion+0xa2>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	f043 0204 	orr.w	r2, r3, #4
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e0b5      	b.n	8002882 <HAL_ADC_PollForConversion+0x20e>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0d6      	beq.n	80026d2 <HAL_ADC_PollForConversion+0x5e>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002724:	e083      	b.n	800282e <HAL_ADC_PollForConversion+0x1ba>
  {
    /* Replace polling by wait for maximum conversion time */
    /* Calculation of CPU cycles corresponding to ADC conversion cycles.      */
    /* Retrieve ADC clock prescaler and ADC maximum conversion cycles on all  */
    /* channels.                                                              */
    Conversion_Timeout_CPU_cycles_max = ADC_CLOCK_PRESCALER_RANGE() ;
 8002726:	4b59      	ldr	r3, [pc, #356]	@ (800288c <HAL_ADC_PollForConversion+0x218>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_ADC_PollForConversion+0xd2>
 8002732:	4b56      	ldr	r3, [pc, #344]	@ (800288c <HAL_ADC_PollForConversion+0x218>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_PollForConversion+0xce>
 800273e:	2302      	movs	r3, #2
 8002740:	e00a      	b.n	8002758 <HAL_ADC_PollForConversion+0xe4>
 8002742:	2320      	movs	r3, #32
 8002744:	e008      	b.n	8002758 <HAL_ADC_PollForConversion+0xe4>
 8002746:	4b51      	ldr	r3, [pc, #324]	@ (800288c <HAL_ADC_PollForConversion+0x218>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_PollForConversion+0xe2>
 8002752:	2320      	movs	r3, #32
 8002754:	e000      	b.n	8002758 <HAL_ADC_PollForConversion+0xe4>
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	613b      	str	r3, [r7, #16]
    Conversion_Timeout_CPU_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	4b4b      	ldr	r3, [pc, #300]	@ (8002890 <HAL_ADC_PollForConversion+0x21c>)
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d118      	bne.n	800279a <HAL_ADC_PollForConversion+0x126>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4b49      	ldr	r3, [pc, #292]	@ (8002894 <HAL_ADC_PollForConversion+0x220>)
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d111      	bne.n	800279a <HAL_ADC_PollForConversion+0x126>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	4b46      	ldr	r3, [pc, #280]	@ (8002898 <HAL_ADC_PollForConversion+0x224>)
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d108      	bne.n	8002796 <HAL_ADC_PollForConversion+0x122>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	4b44      	ldr	r3, [pc, #272]	@ (800289c <HAL_ADC_PollForConversion+0x228>)
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_ADC_PollForConversion+0x122>
 8002792:	2314      	movs	r3, #20
 8002794:	e020      	b.n	80027d8 <HAL_ADC_PollForConversion+0x164>
 8002796:	2329      	movs	r3, #41	@ 0x29
 8002798:	e01e      	b.n	80027d8 <HAL_ADC_PollForConversion+0x164>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <HAL_ADC_PollForConversion+0x224>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d106      	bne.n	80027b6 <HAL_ADC_PollForConversion+0x142>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	4b3b      	ldr	r3, [pc, #236]	@ (800289c <HAL_ADC_PollForConversion+0x228>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <HAL_ADC_PollForConversion+0x15e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	4b38      	ldr	r3, [pc, #224]	@ (80028a0 <HAL_ADC_PollForConversion+0x22c>)
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d108      	bne.n	80027d6 <HAL_ADC_PollForConversion+0x162>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <HAL_ADC_PollForConversion+0x22c>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_PollForConversion+0x162>
 80027d2:	2354      	movs	r3, #84	@ 0x54
 80027d4:	e000      	b.n	80027d8 <HAL_ADC_PollForConversion+0x164>
 80027d6:	23fc      	movs	r3, #252	@ 0xfc
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	613b      	str	r3, [r7, #16]
    
    /* Poll with maximum conversion time */
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027e0:	e021      	b.n	8002826 <HAL_ADC_PollForConversion+0x1b2>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d01a      	beq.n	8002820 <HAL_ADC_PollForConversion+0x1ac>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_ADC_PollForConversion+0x18c>
 80027f0:	f7ff fda2 	bl	8002338 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d20f      	bcs.n	8002820 <HAL_ADC_PollForConversion+0x1ac>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d20b      	bcs.n	8002820 <HAL_ADC_PollForConversion+0x1ac>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	f043 0204 	orr.w	r2, r3, #4
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e030      	b.n	8002882 <HAL_ADC_PollForConversion+0x20e>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3301      	adds	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	429a      	cmp	r2, r3
 800282c:	d3d9      	bcc.n	80027e2 <HAL_ADC_PollForConversion+0x16e>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0212 	mvn.w	r2, #18
 8002836:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F37x devices, in case of sequencer enabled                 */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800284e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002852:	d115      	bne.n	8002880 <HAL_ADC_PollForConversion+0x20c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002858:	2b00      	cmp	r3, #0
 800285a:	d111      	bne.n	8002880 <HAL_ADC_PollForConversion+0x20c>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_ADC_PollForConversion+0x20c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	24924924 	.word	0x24924924
 8002894:	00924924 	.word	0x00924924
 8002898:	12492492 	.word	0x12492492
 800289c:	00492492 	.word	0x00492492
 80028a0:	00249249 	.word	0x00249249

080028a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x20>
 80028dc:	2302      	movs	r3, #2
 80028de:	e0d2      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x1c6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b06      	cmp	r3, #6
 80028ee:	d81c      	bhi.n	800292a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3b05      	subs	r3, #5
 8002902:	221f      	movs	r2, #31
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	4019      	ands	r1, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b05      	subs	r3, #5
 800291c:	fa00 f203 	lsl.w	r2, r0, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	635a      	str	r2, [r3, #52]	@ 0x34
 8002928:	e03c      	b.n	80029a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d81c      	bhi.n	800296c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b23      	subs	r3, #35	@ 0x23
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	4019      	ands	r1, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b23      	subs	r3, #35	@ 0x23
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	631a      	str	r2, [r3, #48]	@ 0x30
 800296a:	e01b      	b.n	80029a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	3b41      	subs	r3, #65	@ 0x41
 800297e:	221f      	movs	r2, #31
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	4019      	ands	r1, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	3b41      	subs	r3, #65	@ 0x41
 8002998:	fa00 f203 	lsl.w	r2, r0, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b0a      	cmp	r3, #10
 80029aa:	d91c      	bls.n	80029e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68d9      	ldr	r1, [r3, #12]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	3b1e      	subs	r3, #30
 80029be:	2207      	movs	r2, #7
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4019      	ands	r1, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6898      	ldr	r0, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	3b1e      	subs	r3, #30
 80029d8:	fa00 f203 	lsl.w	r2, r0, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	e019      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	2207      	movs	r2, #7
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	4019      	ands	r1, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6898      	ldr	r0, [r3, #8]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d003      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a26:	2b11      	cmp	r3, #17
 8002a28:	d11e      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002a38:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d11c      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a42:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <HAL_ADC_ConfigChannel+0x1d4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a14      	ldr	r2, [pc, #80]	@ (8002a98 <HAL_ADC_ConfigChannel+0x1d8>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	0c9a      	lsrs	r2, r3, #18
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8002a58:	e002      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f9      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a66:	e009      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b12      	cmp	r3, #18
 8002a6e:	d105      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 8002a70:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_ADC_ConfigChannel+0x1dc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <HAL_ADC_ConfigChannel+0x1dc>)
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a7a:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000004 	.word	0x20000004
 8002a98:	431bde83 	.word	0x431bde83
 8002a9c:	40010000 	.word	0x40010000

08002aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d040      	beq.n	8002b40 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ace:	4b1f      	ldr	r3, [pc, #124]	@ (8002b4c <ADC_Enable+0xac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b50 <ADC_Enable+0xb0>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002adc:	e002      	b.n	8002ae4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f9      	bne.n	8002ade <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aea:	f7ff fc25 	bl	8002338 <HAL_GetTick>
 8002aee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002af0:	e01f      	b.n	8002b32 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002af2:	f7ff fc21 	bl	8002338 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d918      	bls.n	8002b32 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d011      	beq.n	8002b32 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	f043 0210 	orr.w	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e007      	b.n	8002b42 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d1d8      	bne.n	8002af2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	431bde83 	.word	0x431bde83

08002b54 <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d12e      	bne.n	8002bcc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b7e:	f7ff fbdb 	bl	8002338 <HAL_GetTick>
 8002b82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b84:	e01b      	b.n	8002bbe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b86:	f7ff fbd7 	bl	8002338 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d914      	bls.n	8002bbe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10d      	bne.n	8002bbe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	f043 0210 	orr.w	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e007      	b.n	8002bce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d0dc      	beq.n	8002b86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <__NVIC_SetPriorityGrouping>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0a:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	60d3      	str	r3, [r2, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_GetPriorityGrouping>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <__NVIC_GetPriorityGrouping+0x18>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0307 	and.w	r3, r3, #7
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_EnableIRQ>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0b      	blt.n	8002c66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4907      	ldr	r1, [pc, #28]	@ (8002c74 <__NVIC_EnableIRQ+0x38>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <__NVIC_SetPriority>:
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db0a      	blt.n	8002ca2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	490c      	ldr	r1, [pc, #48]	@ (8002cc4 <__NVIC_SetPriority+0x4c>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ca0:	e00a      	b.n	8002cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4908      	ldr	r1, [pc, #32]	@ (8002cc8 <__NVIC_SetPriority+0x50>)
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	761a      	strb	r2, [r3, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <NVIC_EncodePriority>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	@ 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f1c3 0307 	rsb	r3, r3, #7
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf28      	it	cs
 8002cea:	2304      	movcs	r3, #4
 8002cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d902      	bls.n	8002cfc <NVIC_EncodePriority+0x30>
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3b03      	subs	r3, #3
 8002cfa:	e000      	b.n	8002cfe <NVIC_EncodePriority+0x32>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	401a      	ands	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	43d9      	mvns	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	4313      	orrs	r3, r2
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	@ 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d44:	d301      	bcc.n	8002d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d46:	2301      	movs	r3, #1
 8002d48:	e00f      	b.n	8002d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <SysTick_Config+0x40>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d52:	210f      	movs	r1, #15
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	f7ff ff8e 	bl	8002c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <SysTick_Config+0x40>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d62:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <SysTick_Config+0x40>)
 8002d64:	2207      	movs	r2, #7
 8002d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	e000e010 	.word	0xe000e010

08002d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff ff29 	bl	8002bd8 <__NVIC_SetPriorityGrouping>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da0:	f7ff ff3e 	bl	8002c20 <__NVIC_GetPriorityGrouping>
 8002da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	6978      	ldr	r0, [r7, #20]
 8002dac:	f7ff ff8e 	bl	8002ccc <NVIC_EncodePriority>
 8002db0:	4602      	mov	r2, r0
 8002db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff5d 	bl	8002c78 <__NVIC_SetPriority>
}
 8002dbe:	bf00      	nop
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff31 	bl	8002c3c <__NVIC_EnableIRQ>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ffa2 	bl	8002d34 <SysTick_Config>
 8002df0:	4603      	mov	r3, r0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e014      	b.n	8002e36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	791b      	ldrb	r3, [r3, #4]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d105      	bne.n	8002e22 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff f89d 	bl	8001f5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	3308      	adds	r3, #8
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e004      	b.n	8002e72 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3314      	adds	r3, #20
 8002e70:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	461a      	mov	r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	795b      	ldrb	r3, [r3, #5]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_DAC_Start+0x16>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e039      	b.n	8002f12 <HAL_DAC_Start+0x8a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002ece:	2b3c      	cmp	r3, #60	@ 0x3c
 8002ed0:	d118      	bne.n	8002f04 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	e00f      	b.n	8002f04 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002eee:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8002ef2:	d107      	bne.n	8002f04 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0202 	orr.w	r2, r2, #2
 8002f02:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b087      	sub	sp, #28
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	795b      	ldrb	r3, [r3, #5]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_DAC_ConfigChannel+0x20>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e036      	b.n	8002fac <HAL_DAC_ConfigChannel+0x8e>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2202      	movs	r2, #2
 8002f48:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002f52:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4013      	ands	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	22c0      	movs	r2, #192	@ 0xc0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43da      	mvns	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e02e      	b.n	8003028 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d008      	beq.n	8002fe6 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e020      	b.n	8003028 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 020e 	bic.w	r2, r2, #14
 8002ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f202 	lsl.w	r2, r1, r2
 8003014:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003046:	2b02      	cmp	r3, #2
 8003048:	d005      	beq.n	8003056 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2204      	movs	r2, #4
 800304e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	e027      	b.n	80030a6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 020e 	bic.w	r2, r2, #14
 8003064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307e:	2101      	movs	r1, #1
 8003080:	fa01 f202 	lsl.w	r2, r1, r2
 8003084:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
    }
  }
  return status;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030be:	e154      	b.n	800336a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8146 	beq.w	8003364 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d005      	beq.n	80030f0 <HAL_GPIO_Init+0x40>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d130      	bne.n	8003152 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003126:	2201      	movs	r2, #1
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 0201 	and.w	r2, r3, #1
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b03      	cmp	r3, #3
 800315c:	d017      	beq.n	800318e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	2203      	movs	r2, #3
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d123      	bne.n	80031e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	08da      	lsrs	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3208      	adds	r2, #8
 80031a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	220f      	movs	r2, #15
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	08da      	lsrs	r2, r3, #3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3208      	adds	r2, #8
 80031dc:	6939      	ldr	r1, [r7, #16]
 80031de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	2203      	movs	r2, #3
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0203 	and.w	r2, r3, #3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80a0 	beq.w	8003364 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003224:	4b58      	ldr	r3, [pc, #352]	@ (8003388 <HAL_GPIO_Init+0x2d8>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	4a57      	ldr	r2, [pc, #348]	@ (8003388 <HAL_GPIO_Init+0x2d8>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6193      	str	r3, [r2, #24]
 8003230:	4b55      	ldr	r3, [pc, #340]	@ (8003388 <HAL_GPIO_Init+0x2d8>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800323c:	4a53      	ldr	r2, [pc, #332]	@ (800338c <HAL_GPIO_Init+0x2dc>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003266:	d019      	beq.n	800329c <HAL_GPIO_Init+0x1ec>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a49      	ldr	r2, [pc, #292]	@ (8003390 <HAL_GPIO_Init+0x2e0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <HAL_GPIO_Init+0x1e8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a48      	ldr	r2, [pc, #288]	@ (8003394 <HAL_GPIO_Init+0x2e4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00d      	beq.n	8003294 <HAL_GPIO_Init+0x1e4>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a47      	ldr	r2, [pc, #284]	@ (8003398 <HAL_GPIO_Init+0x2e8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d007      	beq.n	8003290 <HAL_GPIO_Init+0x1e0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a46      	ldr	r2, [pc, #280]	@ (800339c <HAL_GPIO_Init+0x2ec>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_GPIO_Init+0x1dc>
 8003288:	2304      	movs	r3, #4
 800328a:	e008      	b.n	800329e <HAL_GPIO_Init+0x1ee>
 800328c:	2305      	movs	r3, #5
 800328e:	e006      	b.n	800329e <HAL_GPIO_Init+0x1ee>
 8003290:	2303      	movs	r3, #3
 8003292:	e004      	b.n	800329e <HAL_GPIO_Init+0x1ee>
 8003294:	2302      	movs	r3, #2
 8003296:	e002      	b.n	800329e <HAL_GPIO_Init+0x1ee>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_GPIO_Init+0x1ee>
 800329c:	2300      	movs	r3, #0
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	f002 0203 	and.w	r2, r2, #3
 80032a4:	0092      	lsls	r2, r2, #2
 80032a6:	4093      	lsls	r3, r2
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ae:	4937      	ldr	r1, [pc, #220]	@ (800338c <HAL_GPIO_Init+0x2dc>)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	3302      	adds	r3, #2
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032bc:	4b38      	ldr	r3, [pc, #224]	@ (80033a0 <HAL_GPIO_Init+0x2f0>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032e0:	4a2f      	ldr	r2, [pc, #188]	@ (80033a0 <HAL_GPIO_Init+0x2f0>)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e6:	4b2e      	ldr	r3, [pc, #184]	@ (80033a0 <HAL_GPIO_Init+0x2f0>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800330a:	4a25      	ldr	r2, [pc, #148]	@ (80033a0 <HAL_GPIO_Init+0x2f0>)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003310:	4b23      	ldr	r3, [pc, #140]	@ (80033a0 <HAL_GPIO_Init+0x2f0>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43db      	mvns	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003334:	4a1a      	ldr	r2, [pc, #104]	@ (80033a0 <HAL_GPIO_Init+0x2f0>)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800333a:	4b19      	ldr	r3, [pc, #100]	@ (80033a0 <HAL_GPIO_Init+0x2f0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	43db      	mvns	r3, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800335e:	4a10      	ldr	r2, [pc, #64]	@ (80033a0 <HAL_GPIO_Init+0x2f0>)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3301      	adds	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	f47f aea3 	bne.w	80030c0 <HAL_GPIO_Init+0x10>
  }
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40021000 	.word	0x40021000
 800338c:	40010000 	.word	0x40010000
 8003390:	48000400 	.word	0x48000400
 8003394:	48000800 	.word	0x48000800
 8003398:	48000c00 	.word	0x48000c00
 800339c:	48001000 	.word	0x48001000
 80033a0:	40010400 	.word	0x40010400

080033a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
 80033b0:	4613      	mov	r3, r2
 80033b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c0:	e002      	b.n	80033c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	041a      	lsls	r2, r3, #16
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	43d9      	mvns	r1, r3
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	400b      	ands	r3, r1
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003410:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <HAL_PWREx_EnableSDADC+0x38>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4a0a      	ldr	r2, [pc, #40]	@ (8003440 <HAL_PWREx_EnableSDADC+0x38>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341a:	61d3      	str	r3, [r2, #28]
 800341c:	4b08      	ldr	r3, [pc, #32]	@ (8003440 <HAL_PWREx_EnableSDADC+0x38>)
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8003428:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_PWREx_EnableSDADC+0x3c>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4905      	ldr	r1, [pc, #20]	@ (8003444 <HAL_PWREx_EnableSDADC+0x3c>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	40021000 	.word	0x40021000
 8003444:	40007000 	.word	0x40007000

08003448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800344e:	af00      	add	r7, sp, #0
 8003450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003458:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800345a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	f000 bff4 	b.w	8004456 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 816d 	beq.w	800375e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003484:	4bb4      	ldr	r3, [pc, #720]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b04      	cmp	r3, #4
 800348e:	d00c      	beq.n	80034aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003490:	4bb1      	ldr	r3, [pc, #708]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b08      	cmp	r3, #8
 800349a:	d157      	bne.n	800354c <HAL_RCC_OscConfig+0x104>
 800349c:	4bae      	ldr	r3, [pc, #696]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a8:	d150      	bne.n	800354c <HAL_RCC_OscConfig+0x104>
 80034aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034ae:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80034ca:	d802      	bhi.n	80034d2 <HAL_RCC_OscConfig+0x8a>
 80034cc:	4ba2      	ldr	r3, [pc, #648]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	e015      	b.n	80034fe <HAL_RCC_OscConfig+0xb6>
 80034d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034d6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80034e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034ea:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80034ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80034fa:	4b97      	ldr	r3, [pc, #604]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003502:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003506:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800350a:	fa92 f2a2 	rbit	r2, r2
 800350e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003512:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003516:	fab2 f282 	clz	r2, r2
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f042 0220 	orr.w	r2, r2, #32
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	f002 021f 	and.w	r2, r2, #31
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f202 	lsl.w	r2, r1, r2
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8114 	beq.w	800375c <HAL_RCC_OscConfig+0x314>
 8003534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003538:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f040 810b 	bne.w	800375c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f000 bf85 	b.w	8004456 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003550:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x124>
 800355e:	4b7e      	ldr	r3, [pc, #504]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a7d      	ldr	r2, [pc, #500]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e036      	b.n	80035da <HAL_RCC_OscConfig+0x192>
 800356c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003570:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10c      	bne.n	8003596 <HAL_RCC_OscConfig+0x14e>
 800357c:	4b76      	ldr	r3, [pc, #472]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a75      	ldr	r2, [pc, #468]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b73      	ldr	r3, [pc, #460]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a72      	ldr	r2, [pc, #456]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	e021      	b.n	80035da <HAL_RCC_OscConfig+0x192>
 8003596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a6:	d10c      	bne.n	80035c2 <HAL_RCC_OscConfig+0x17a>
 80035a8:	4b6b      	ldr	r3, [pc, #428]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80035ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b68      	ldr	r3, [pc, #416]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a67      	ldr	r2, [pc, #412]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80035ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	e00b      	b.n	80035da <HAL_RCC_OscConfig+0x192>
 80035c2:	4b65      	ldr	r3, [pc, #404]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a64      	ldr	r2, [pc, #400]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80035c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b62      	ldr	r3, [pc, #392]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a61      	ldr	r2, [pc, #388]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80035d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035d8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035da:	4b5f      	ldr	r3, [pc, #380]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035de:	f023 020f 	bic.w	r2, r3, #15
 80035e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	495a      	ldr	r1, [pc, #360]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d054      	beq.n	80036ae <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe fe98 	bl	8002338 <HAL_GetTick>
 8003608:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800360e:	f7fe fe93 	bl	8002338 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	@ 0x64
 800361c:	d902      	bls.n	8003624 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	f000 bf19 	b.w	8004456 <HAL_RCC_OscConfig+0x100e>
 8003624:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003628:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003638:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b3f      	cmp	r3, #63	@ 0x3f
 8003644:	d802      	bhi.n	800364c <HAL_RCC_OscConfig+0x204>
 8003646:	4b44      	ldr	r3, [pc, #272]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	e015      	b.n	8003678 <HAL_RCC_OscConfig+0x230>
 800364c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003650:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003660:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003664:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003668:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003674:	4b38      	ldr	r3, [pc, #224]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800367c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003680:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003684:	fa92 f2a2 	rbit	r2, r2
 8003688:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800368c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003690:	fab2 f282 	clz	r2, r2
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f042 0220 	orr.w	r2, r2, #32
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f002 021f 	and.w	r2, r2, #31
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0b0      	beq.n	800360e <HAL_RCC_OscConfig+0x1c6>
 80036ac:	e057      	b.n	800375e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fe fe43 	bl	8002338 <HAL_GetTick>
 80036b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fe fe3e 	bl	8002338 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b64      	cmp	r3, #100	@ 0x64
 80036c6:	d902      	bls.n	80036ce <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	f000 bec4 	b.w	8004456 <HAL_RCC_OscConfig+0x100e>
 80036ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036d2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80036e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80036ee:	d802      	bhi.n	80036f6 <HAL_RCC_OscConfig+0x2ae>
 80036f0:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	e015      	b.n	8003722 <HAL_RCC_OscConfig+0x2da>
 80036f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036fa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800370a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800370e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003712:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800371e:	4b0e      	ldr	r3, [pc, #56]	@ (8003758 <HAL_RCC_OscConfig+0x310>)
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003726:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800372a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800372e:	fa92 f2a2 	rbit	r2, r2
 8003732:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003736:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800373a:	fab2 f282 	clz	r2, r2
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f042 0220 	orr.w	r2, r2, #32
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	f002 021f 	and.w	r2, r2, #31
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f202 	lsl.w	r2, r1, r2
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1b0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x270>
 8003756:	e002      	b.n	800375e <HAL_RCC_OscConfig+0x316>
 8003758:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003762:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 816c 	beq.w	8003a4c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003774:	4bcc      	ldr	r3, [pc, #816]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003780:	4bc9      	ldr	r3, [pc, #804]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b08      	cmp	r3, #8
 800378a:	d16d      	bne.n	8003868 <HAL_RCC_OscConfig+0x420>
 800378c:	4bc6      	ldr	r3, [pc, #792]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d167      	bne.n	8003868 <HAL_RCC_OscConfig+0x420>
 8003798:	2302      	movs	r3, #2
 800379a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80037aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80037b6:	d802      	bhi.n	80037be <HAL_RCC_OscConfig+0x376>
 80037b8:	4bbb      	ldr	r3, [pc, #748]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e013      	b.n	80037e6 <HAL_RCC_OscConfig+0x39e>
 80037be:	2302      	movs	r3, #2
 80037c0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80037d0:	2302      	movs	r3, #2
 80037d2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80037d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80037e2:	4bb1      	ldr	r3, [pc, #708]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	2202      	movs	r2, #2
 80037e8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80037ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80037f0:	fa92 f2a2 	rbit	r2, r2
 80037f4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80037f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80037fc:	fab2 f282 	clz	r2, r2
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	f042 0220 	orr.w	r2, r2, #32
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f002 021f 	and.w	r2, r2, #31
 800380c:	2101      	movs	r1, #1
 800380e:	fa01 f202 	lsl.w	r2, r1, r2
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCC_OscConfig+0x3e6>
 8003818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d002      	beq.n	800382e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	f000 be14 	b.w	8004456 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b9e      	ldr	r3, [pc, #632]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	21f8      	movs	r1, #248	@ 0xf8
 8003844:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800384c:	fa91 f1a1 	rbit	r1, r1
 8003850:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003854:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003858:	fab1 f181 	clz	r1, r1
 800385c:	b2c9      	uxtb	r1, r1
 800385e:	408b      	lsls	r3, r1
 8003860:	4991      	ldr	r1, [pc, #580]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	e0f1      	b.n	8003a4c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8083 	beq.w	8003980 <HAL_RCC_OscConfig+0x538>
 800387a:	2301      	movs	r3, #1
 800387c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800388c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800389a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	461a      	mov	r2, r3
 80038a2:	2301      	movs	r3, #1
 80038a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fe fd47 	bl	8002338 <HAL_GetTick>
 80038aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b0:	f7fe fd42 	bl	8002338 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d902      	bls.n	80038c6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	f000 bdc8 	b.w	8004456 <HAL_RCC_OscConfig+0x100e>
 80038c6:	2302      	movs	r3, #2
 80038c8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80038d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80038e4:	d802      	bhi.n	80038ec <HAL_RCC_OscConfig+0x4a4>
 80038e6:	4b70      	ldr	r3, [pc, #448]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	e013      	b.n	8003914 <HAL_RCC_OscConfig+0x4cc>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80038fe:	2302      	movs	r3, #2
 8003900:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003904:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003910:	4b65      	ldr	r3, [pc, #404]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	2202      	movs	r2, #2
 8003916:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800391a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800391e:	fa92 f2a2 	rbit	r2, r2
 8003922:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003926:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0b4      	beq.n	80038b0 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	4b58      	ldr	r3, [pc, #352]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800394e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003952:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	21f8      	movs	r1, #248	@ 0xf8
 800395c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003964:	fa91 f1a1 	rbit	r1, r1
 8003968:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800396c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003970:	fab1 f181 	clz	r1, r1
 8003974:	b2c9      	uxtb	r1, r1
 8003976:	408b      	lsls	r3, r1
 8003978:	494b      	ldr	r1, [pc, #300]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]
 800397e:	e065      	b.n	8003a4c <HAL_RCC_OscConfig+0x604>
 8003980:	2301      	movs	r3, #1
 8003982:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003992:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	461a      	mov	r2, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fcc4 	bl	8002338 <HAL_GetTick>
 80039b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fe fcbf 	bl	8002338 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d902      	bls.n	80039cc <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	f000 bd45 	b.w	8004456 <HAL_RCC_OscConfig+0x100e>
 80039cc:	2302      	movs	r3, #2
 80039ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80039de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80039ea:	d802      	bhi.n	80039f2 <HAL_RCC_OscConfig+0x5aa>
 80039ec:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	e013      	b.n	8003a1a <HAL_RCC_OscConfig+0x5d2>
 80039f2:	2302      	movs	r3, #2
 80039f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003a04:	2302      	movs	r3, #2
 8003a06:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003a0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003a16:	4b24      	ldr	r3, [pc, #144]	@ (8003aa8 <HAL_RCC_OscConfig+0x660>)
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003a20:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003a24:	fa92 f2a2 	rbit	r2, r2
 8003a28:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003a2c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003a30:	fab2 f282 	clz	r2, r2
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	f042 0220 	orr.w	r2, r2, #32
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	f002 021f 	and.w	r2, r2, #31
 8003a40:	2101      	movs	r1, #1
 8003a42:	fa01 f202 	lsl.w	r2, r1, r2
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1b4      	bne.n	80039b6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8115 	beq.w	8003c8c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d07e      	beq.n	8003b70 <HAL_RCC_OscConfig+0x728>
 8003a72:	2301      	movs	r3, #1
 8003a74:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <HAL_RCC_OscConfig+0x664>)
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	461a      	mov	r2, r3
 8003a98:	2301      	movs	r3, #1
 8003a9a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9c:	f7fe fc4c 	bl	8002338 <HAL_GetTick>
 8003aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa4:	e00f      	b.n	8003ac6 <HAL_RCC_OscConfig+0x67e>
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7fe fc42 	bl	8002338 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d902      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	f000 bcc8 	b.w	8004456 <HAL_RCC_OscConfig+0x100e>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003ad0:	fa93 f3a3 	rbit	r3, r3
 8003ad4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003adc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	fa93 f2a3 	rbit	r2, r3
 8003af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b04:	2202      	movs	r2, #2
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	fa93 f2a3 	rbit	r2, r3
 8003b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003b1e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b20:	4bb0      	ldr	r3, [pc, #704]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003b22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	6019      	str	r1, [r3, #0]
 8003b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	fa93 f1a3 	rbit	r1, r3
 8003b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b42:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b46:	6019      	str	r1, [r3, #0]
  return result;
 8003b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	2101      	movs	r1, #1
 8003b64:	fa01 f303 	lsl.w	r3, r1, r3
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0a0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x668>
 8003b6e:	e08d      	b.n	8003c8c <HAL_RCC_OscConfig+0x844>
 8003b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b74:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b80:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	fa93 f2a3 	rbit	r2, r3
 8003b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003b92:	601a      	str	r2, [r3, #0]
  return result;
 8003b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b98:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003b9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b90      	ldr	r3, [pc, #576]	@ (8003de8 <HAL_RCC_OscConfig+0x9a0>)
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	461a      	mov	r2, r3
 8003bae:	2300      	movs	r3, #0
 8003bb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fbc1 	bl	8002338 <HAL_GetTick>
 8003bb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe fbbc 	bl	8002338 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d902      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	f000 bc42 	b.w	8004456 <HAL_RCC_OscConfig+0x100e>
 8003bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003bda:	2202      	movs	r2, #2
 8003bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003bfe:	2202      	movs	r2, #2
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c06:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	fa93 f2a3 	rbit	r2, r3
 8003c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c22:	2202      	movs	r2, #2
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	fa93 f2a3 	rbit	r2, r3
 8003c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c38:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003c3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3e:	4b69      	ldr	r3, [pc, #420]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	6019      	str	r1, [r3, #0]
 8003c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c52:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	fa93 f1a3 	rbit	r1, r3
 8003c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c64:	6019      	str	r1, [r3, #0]
  return result;
 8003c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d197      	bne.n	8003bbc <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 819e 	beq.w	8003fde <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca8:	4b4e      	ldr	r3, [pc, #312]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d116      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cbe:	61d3      	str	r3, [r2, #28]
 8003cc0:	4b48      	ldr	r3, [pc, #288]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ccc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003cda:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce2:	4b42      	ldr	r3, [pc, #264]	@ (8003dec <HAL_RCC_OscConfig+0x9a4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11a      	bne.n	8003d24 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cee:	4b3f      	ldr	r3, [pc, #252]	@ (8003dec <HAL_RCC_OscConfig+0x9a4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8003dec <HAL_RCC_OscConfig+0x9a4>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fb1d 	bl	8002338 <HAL_GetTick>
 8003cfe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d02:	e009      	b.n	8003d18 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d04:	f7fe fb18 	bl	8002338 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b64      	cmp	r3, #100	@ 0x64
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e39e      	b.n	8004456 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d18:	4b34      	ldr	r3, [pc, #208]	@ (8003dec <HAL_RCC_OscConfig+0x9a4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ef      	beq.n	8003d04 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d106      	bne.n	8003d42 <HAL_RCC_OscConfig+0x8fa>
 8003d34:	4b2b      	ldr	r3, [pc, #172]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4a2a      	ldr	r2, [pc, #168]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6213      	str	r3, [r2, #32]
 8003d40:	e035      	b.n	8003dae <HAL_RCC_OscConfig+0x966>
 8003d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x924>
 8003d52:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4a23      	ldr	r2, [pc, #140]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	6213      	str	r3, [r2, #32]
 8003d5e:	4b21      	ldr	r3, [pc, #132]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4a20      	ldr	r2, [pc, #128]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	6213      	str	r3, [r2, #32]
 8003d6a:	e020      	b.n	8003dae <HAL_RCC_OscConfig+0x966>
 8003d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d10c      	bne.n	8003d96 <HAL_RCC_OscConfig+0x94e>
 8003d7c:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4a18      	ldr	r2, [pc, #96]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d82:	f043 0304 	orr.w	r3, r3, #4
 8003d86:	6213      	str	r3, [r2, #32]
 8003d88:	4b16      	ldr	r3, [pc, #88]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4a15      	ldr	r2, [pc, #84]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6213      	str	r3, [r2, #32]
 8003d94:	e00b      	b.n	8003dae <HAL_RCC_OscConfig+0x966>
 8003d96:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	4a12      	ldr	r2, [pc, #72]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	6213      	str	r3, [r2, #32]
 8003da2:	4b10      	ldr	r3, [pc, #64]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4a0f      	ldr	r2, [pc, #60]	@ (8003de4 <HAL_RCC_OscConfig+0x99c>)
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8087 	beq.w	8003ece <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc0:	f7fe faba 	bl	8002338 <HAL_GetTick>
 8003dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	e012      	b.n	8003df0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f7fe fab5 	bl	8002338 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d908      	bls.n	8003df0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e339      	b.n	8004456 <HAL_RCC_OscConfig+0x100e>
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	10908120 	.word	0x10908120
 8003dec:	40007000 	.word	0x40007000
 8003df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003df8:	2202      	movs	r2, #2
 8003dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	fa93 f2a3 	rbit	r2, r3
 8003e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	fa93 f2a3 	rbit	r2, r3
 8003e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e32:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e36:	601a      	str	r2, [r3, #0]
  return result;
 8003e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_RCC_OscConfig+0xa10>
 8003e52:	4b98      	ldr	r3, [pc, #608]	@ (80040b4 <HAL_RCC_OscConfig+0xc6c>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	e013      	b.n	8003e80 <HAL_RCC_OscConfig+0xa38>
 8003e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e60:	2202      	movs	r2, #2
 8003e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e68:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	fa93 f2a3 	rbit	r2, r3
 8003e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e76:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	4b8d      	ldr	r3, [pc, #564]	@ (80040b4 <HAL_RCC_OscConfig+0xc6c>)
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e84:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003e88:	2102      	movs	r1, #2
 8003e8a:	6011      	str	r1, [r2, #0]
 8003e8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e90:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	fa92 f1a2 	rbit	r1, r2
 8003e9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e9e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ea2:	6011      	str	r1, [r2, #0]
  return result;
 8003ea4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ea8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	fab2 f282 	clz	r2, r2
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	f002 021f 	and.w	r2, r2, #31
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f43f af7f 	beq.w	8003dca <HAL_RCC_OscConfig+0x982>
 8003ecc:	e07d      	b.n	8003fca <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ece:	f7fe fa33 	bl	8002338 <HAL_GetTick>
 8003ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fe fa2e 	bl	8002338 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e2b2      	b.n	8004456 <HAL_RCC_OscConfig+0x100e>
 8003ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ef8:	2202      	movs	r2, #2
 8003efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f00:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	fa93 f2a3 	rbit	r2, r3
 8003f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f18:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f24:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	fa93 f2a3 	rbit	r2, r3
 8003f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f32:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f36:	601a      	str	r2, [r3, #0]
  return result;
 8003f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <HAL_RCC_OscConfig+0xb10>
 8003f52:	4b58      	ldr	r3, [pc, #352]	@ (80040b4 <HAL_RCC_OscConfig+0xc6c>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	e013      	b.n	8003f80 <HAL_RCC_OscConfig+0xb38>
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f60:	2202      	movs	r2, #2
 8003f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f68:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	fa93 f2a3 	rbit	r2, r3
 8003f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f76:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80040b4 <HAL_RCC_OscConfig+0xc6c>)
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f84:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003f88:	2102      	movs	r1, #2
 8003f8a:	6011      	str	r1, [r2, #0]
 8003f8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f90:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	fa92 f1a2 	rbit	r1, r2
 8003f9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f9e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003fa2:	6011      	str	r1, [r2, #0]
  return result;
 8003fa4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fa8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	fab2 f282 	clz	r2, r2
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	f002 021f 	and.w	r2, r2, #31
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d186      	bne.n	8003ed8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fca:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d105      	bne.n	8003fde <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd2:	4b38      	ldr	r3, [pc, #224]	@ (80040b4 <HAL_RCC_OscConfig+0xc6c>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	4a37      	ldr	r2, [pc, #220]	@ (80040b4 <HAL_RCC_OscConfig+0xc6c>)
 8003fd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fdc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8232 	beq.w	8004454 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff0:	4b30      	ldr	r3, [pc, #192]	@ (80040b4 <HAL_RCC_OscConfig+0xc6c>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	f000 8201 	beq.w	8004400 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004002:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b02      	cmp	r3, #2
 800400c:	f040 8157 	bne.w	80042be <HAL_RCC_OscConfig+0xe76>
 8004010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004014:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004018:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800401c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004022:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	fa93 f2a3 	rbit	r2, r3
 800402c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004030:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004034:	601a      	str	r2, [r3, #0]
  return result;
 8004036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800403e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800404a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	461a      	mov	r2, r3
 8004052:	2300      	movs	r3, #0
 8004054:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004056:	f7fe f96f 	bl	8002338 <HAL_GetTick>
 800405a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405e:	e009      	b.n	8004074 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe f96a 	bl	8002338 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e1f0      	b.n	8004456 <HAL_RCC_OscConfig+0x100e>
 8004074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004078:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800407c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004086:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	fa93 f2a3 	rbit	r2, r3
 8004090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004094:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004098:	601a      	str	r2, [r3, #0]
  return result;
 800409a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80040a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a4:	fab3 f383 	clz	r3, r3
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80040ac:	d804      	bhi.n	80040b8 <HAL_RCC_OscConfig+0xc70>
 80040ae:	4b01      	ldr	r3, [pc, #4]	@ (80040b4 <HAL_RCC_OscConfig+0xc6c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	e029      	b.n	8004108 <HAL_RCC_OscConfig+0xcc0>
 80040b4:	40021000 	.word	0x40021000
 80040b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040bc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	fa93 f2a3 	rbit	r2, r3
 80040d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80040e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	fa93 f2a3 	rbit	r2, r3
 80040fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	4bc3      	ldr	r3, [pc, #780]	@ (8004414 <HAL_RCC_OscConfig+0xfcc>)
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800410c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004110:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004114:	6011      	str	r1, [r2, #0]
 8004116:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800411a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	fa92 f1a2 	rbit	r1, r2
 8004124:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004128:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800412c:	6011      	str	r1, [r2, #0]
  return result;
 800412e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004132:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	fab2 f282 	clz	r2, r2
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	f042 0220 	orr.w	r2, r2, #32
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	f002 021f 	and.w	r2, r2, #31
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f202 	lsl.w	r2, r1, r2
 800414e:	4013      	ands	r3, r2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d185      	bne.n	8004060 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004154:	4baf      	ldr	r3, [pc, #700]	@ (8004414 <HAL_RCC_OscConfig+0xfcc>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800415c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004160:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	430b      	orrs	r3, r1
 8004176:	49a7      	ldr	r1, [pc, #668]	@ (8004414 <HAL_RCC_OscConfig+0xfcc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
 800417c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004180:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004184:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	fa93 f2a3 	rbit	r2, r3
 8004198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80041a0:	601a      	str	r2, [r3, #0]
  return result;
 80041a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80041aa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ac:	fab3 f383 	clz	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	461a      	mov	r2, r3
 80041be:	2301      	movs	r3, #1
 80041c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fe f8b9 	bl	8002338 <HAL_GetTick>
 80041c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ca:	e009      	b.n	80041e0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fe f8b4 	bl	8002338 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e13a      	b.n	8004456 <HAL_RCC_OscConfig+0x100e>
 80041e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80041e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	fa93 f2a3 	rbit	r2, r3
 80041fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004200:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004204:	601a      	str	r2, [r3, #0]
  return result;
 8004206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800420e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b3f      	cmp	r3, #63	@ 0x3f
 8004218:	d802      	bhi.n	8004220 <HAL_RCC_OscConfig+0xdd8>
 800421a:	4b7e      	ldr	r3, [pc, #504]	@ (8004414 <HAL_RCC_OscConfig+0xfcc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	e027      	b.n	8004270 <HAL_RCC_OscConfig+0xe28>
 8004220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004224:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004228:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800422c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004232:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	fa93 f2a3 	rbit	r2, r3
 800423c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004240:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800424a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800424e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004258:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	fa93 f2a3 	rbit	r2, r3
 8004262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004266:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	4b69      	ldr	r3, [pc, #420]	@ (8004414 <HAL_RCC_OscConfig+0xfcc>)
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004274:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004278:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800427c:	6011      	str	r1, [r2, #0]
 800427e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004282:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	fa92 f1a2 	rbit	r1, r2
 800428c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004290:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004294:	6011      	str	r1, [r2, #0]
  return result;
 8004296:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800429a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	fab2 f282 	clz	r2, r2
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	f042 0220 	orr.w	r2, r2, #32
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	f002 021f 	and.w	r2, r2, #31
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f202 	lsl.w	r2, r1, r2
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d087      	beq.n	80041cc <HAL_RCC_OscConfig+0xd84>
 80042bc:	e0ca      	b.n	8004454 <HAL_RCC_OscConfig+0x100c>
 80042be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80042c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	fa93 f2a3 	rbit	r2, r3
 80042da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042de:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80042e2:	601a      	str	r2, [r3, #0]
  return result;
 80042e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80042ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80042f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	461a      	mov	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fe f818 	bl	8002338 <HAL_GetTick>
 8004308:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800430c:	e009      	b.n	8004322 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430e:	f7fe f813 	bl	8002338 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e099      	b.n	8004456 <HAL_RCC_OscConfig+0x100e>
 8004322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004326:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800432a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800432e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004334:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	fa93 f2a3 	rbit	r2, r3
 800433e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004342:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004346:	601a      	str	r2, [r3, #0]
  return result;
 8004348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004350:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b3f      	cmp	r3, #63	@ 0x3f
 800435a:	d802      	bhi.n	8004362 <HAL_RCC_OscConfig+0xf1a>
 800435c:	4b2d      	ldr	r3, [pc, #180]	@ (8004414 <HAL_RCC_OscConfig+0xfcc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	e027      	b.n	80043b2 <HAL_RCC_OscConfig+0xf6a>
 8004362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004366:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800436a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800436e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004374:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	fa93 f2a3 	rbit	r2, r3
 800437e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004382:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800438c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004390:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	fa93 f2a3 	rbit	r2, r3
 80043a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <HAL_RCC_OscConfig+0xfcc>)
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043b6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80043ba:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80043be:	6011      	str	r1, [r2, #0]
 80043c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043c4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	fa92 f1a2 	rbit	r1, r2
 80043ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043d2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80043d6:	6011      	str	r1, [r2, #0]
  return result;
 80043d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043dc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	fab2 f282 	clz	r2, r2
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	f042 0220 	orr.w	r2, r2, #32
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	f002 021f 	and.w	r2, r2, #31
 80043f2:	2101      	movs	r1, #1
 80043f4:	fa01 f202 	lsl.w	r2, r1, r2
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d187      	bne.n	800430e <HAL_RCC_OscConfig+0xec6>
 80043fe:	e029      	b.n	8004454 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004404:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d103      	bne.n	8004418 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e020      	b.n	8004456 <HAL_RCC_OscConfig+0x100e>
 8004414:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004418:	4b11      	ldr	r3, [pc, #68]	@ (8004460 <HAL_RCC_OscConfig+0x1018>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004420:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004424:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	429a      	cmp	r2, r3
 8004436:	d10b      	bne.n	8004450 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004438:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800443c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004444:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000

08004464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b09e      	sub	sp, #120	@ 0x78
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e154      	b.n	8004726 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800447c:	4b89      	ldr	r3, [pc, #548]	@ (80046a4 <HAL_RCC_ClockConfig+0x240>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d910      	bls.n	80044ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b86      	ldr	r3, [pc, #536]	@ (80046a4 <HAL_RCC_ClockConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 0207 	bic.w	r2, r3, #7
 8004492:	4984      	ldr	r1, [pc, #528]	@ (80046a4 <HAL_RCC_ClockConfig+0x240>)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b82      	ldr	r3, [pc, #520]	@ (80046a4 <HAL_RCC_ClockConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e13c      	b.n	8004726 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b8:	4b7b      	ldr	r3, [pc, #492]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4978      	ldr	r1, [pc, #480]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80cd 	beq.w	8004672 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d137      	bne.n	8004550 <HAL_RCC_ClockConfig+0xec>
 80044e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e8:	fa93 f3a3 	rbit	r3, r3
 80044ec:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80044ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f0:	fab3 f383 	clz	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80044f8:	d802      	bhi.n	8004500 <HAL_RCC_ClockConfig+0x9c>
 80044fa:	4b6b      	ldr	r3, [pc, #428]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	e00f      	b.n	8004520 <HAL_RCC_ClockConfig+0xbc>
 8004500:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004504:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004508:	fa93 f3a3 	rbit	r3, r3
 800450c:	667b      	str	r3, [r7, #100]	@ 0x64
 800450e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004512:	663b      	str	r3, [r7, #96]	@ 0x60
 8004514:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004516:	fa93 f3a3 	rbit	r3, r3
 800451a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800451c:	4b62      	ldr	r3, [pc, #392]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004524:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004526:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004528:	fa92 f2a2 	rbit	r2, r2
 800452c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800452e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004530:	fab2 f282 	clz	r2, r2
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	f042 0220 	orr.w	r2, r2, #32
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	f002 021f 	and.w	r2, r2, #31
 8004540:	2101      	movs	r1, #1
 8004542:	fa01 f202 	lsl.w	r2, r1, r2
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d171      	bne.n	8004630 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0ea      	b.n	8004726 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d137      	bne.n	80045c8 <HAL_RCC_ClockConfig+0x164>
 8004558:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800455c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004568:	fab3 f383 	clz	r3, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004570:	d802      	bhi.n	8004578 <HAL_RCC_ClockConfig+0x114>
 8004572:	4b4d      	ldr	r3, [pc, #308]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	e00f      	b.n	8004598 <HAL_RCC_ClockConfig+0x134>
 8004578:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800457c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004580:	fa93 f3a3 	rbit	r3, r3
 8004584:	647b      	str	r3, [r7, #68]	@ 0x44
 8004586:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800458a:	643b      	str	r3, [r7, #64]	@ 0x40
 800458c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800458e:	fa93 f3a3 	rbit	r3, r3
 8004592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004594:	4b44      	ldr	r3, [pc, #272]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800459c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800459e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045a0:	fa92 f2a2 	rbit	r2, r2
 80045a4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80045a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045a8:	fab2 f282 	clz	r2, r2
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	f042 0220 	orr.w	r2, r2, #32
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	f002 021f 	and.w	r2, r2, #31
 80045b8:	2101      	movs	r1, #1
 80045ba:	fa01 f202 	lsl.w	r2, r1, r2
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d135      	bne.n	8004630 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0ae      	b.n	8004726 <HAL_RCC_ClockConfig+0x2c2>
 80045c8:	2302      	movs	r3, #2
 80045ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80045d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d6:	fab3 f383 	clz	r3, r3
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80045de:	d802      	bhi.n	80045e6 <HAL_RCC_ClockConfig+0x182>
 80045e0:	4b31      	ldr	r3, [pc, #196]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	e00d      	b.n	8004602 <HAL_RCC_ClockConfig+0x19e>
 80045e6:	2302      	movs	r3, #2
 80045e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ec:	fa93 f3a3 	rbit	r3, r3
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f2:	2302      	movs	r3, #2
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	fa93 f3a3 	rbit	r3, r3
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	4b2a      	ldr	r3, [pc, #168]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	2202      	movs	r2, #2
 8004604:	61ba      	str	r2, [r7, #24]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	fa92 f2a2 	rbit	r2, r2
 800460c:	617a      	str	r2, [r7, #20]
  return result;
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	fab2 f282 	clz	r2, r2
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	f042 0220 	orr.w	r2, r2, #32
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	f002 021f 	and.w	r2, r2, #31
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f202 	lsl.w	r2, r1, r2
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e07a      	b.n	8004726 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004630:	4b1d      	ldr	r3, [pc, #116]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f023 0203 	bic.w	r2, r3, #3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	491a      	ldr	r1, [pc, #104]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004642:	f7fd fe79 	bl	8002338 <HAL_GetTick>
 8004646:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004648:	e00a      	b.n	8004660 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464a:	f7fd fe75 	bl	8002338 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e062      	b.n	8004726 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004660:	4b11      	ldr	r3, [pc, #68]	@ (80046a8 <HAL_RCC_ClockConfig+0x244>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 020c 	and.w	r2, r3, #12
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	429a      	cmp	r2, r3
 8004670:	d1eb      	bne.n	800464a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004672:	4b0c      	ldr	r3, [pc, #48]	@ (80046a4 <HAL_RCC_ClockConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d215      	bcs.n	80046ac <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004680:	4b08      	ldr	r3, [pc, #32]	@ (80046a4 <HAL_RCC_ClockConfig+0x240>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f023 0207 	bic.w	r2, r3, #7
 8004688:	4906      	ldr	r1, [pc, #24]	@ (80046a4 <HAL_RCC_ClockConfig+0x240>)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4313      	orrs	r3, r2
 800468e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004690:	4b04      	ldr	r3, [pc, #16]	@ (80046a4 <HAL_RCC_ClockConfig+0x240>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d006      	beq.n	80046ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e041      	b.n	8004726 <HAL_RCC_ClockConfig+0x2c2>
 80046a2:	bf00      	nop
 80046a4:	40022000 	.word	0x40022000
 80046a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004730 <HAL_RCC_ClockConfig+0x2cc>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	491a      	ldr	r1, [pc, #104]	@ (8004730 <HAL_RCC_ClockConfig+0x2cc>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046d6:	4b16      	ldr	r3, [pc, #88]	@ (8004730 <HAL_RCC_ClockConfig+0x2cc>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4912      	ldr	r1, [pc, #72]	@ (8004730 <HAL_RCC_ClockConfig+0x2cc>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046ea:	f000 f829 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80046ee:	4601      	mov	r1, r0
 80046f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004730 <HAL_RCC_ClockConfig+0x2cc>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046f8:	22f0      	movs	r2, #240	@ 0xf0
 80046fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	fa92 f2a2 	rbit	r2, r2
 8004702:	60fa      	str	r2, [r7, #12]
  return result;
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	fab2 f282 	clz	r2, r2
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	40d3      	lsrs	r3, r2
 800470e:	4a09      	ldr	r2, [pc, #36]	@ (8004734 <HAL_RCC_ClockConfig+0x2d0>)
 8004710:	5cd3      	ldrb	r3, [r2, r3]
 8004712:	fa21 f303 	lsr.w	r3, r1, r3
 8004716:	4a08      	ldr	r2, [pc, #32]	@ (8004738 <HAL_RCC_ClockConfig+0x2d4>)
 8004718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800471a:	4b08      	ldr	r3, [pc, #32]	@ (800473c <HAL_RCC_ClockConfig+0x2d8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd fdc6 	bl	80022b0 <HAL_InitTick>
  
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3778      	adds	r7, #120	@ 0x78
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40021000 	.word	0x40021000
 8004734:	08007130 	.word	0x08007130
 8004738:	20000004 	.word	0x20000004
 800473c:	20000008 	.word	0x20000008

08004740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800475a:	4b1e      	ldr	r3, [pc, #120]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b04      	cmp	r3, #4
 8004768:	d002      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x30>
 800476a:	2b08      	cmp	r3, #8
 800476c:	d003      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x36>
 800476e:	e026      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004770:	4b19      	ldr	r3, [pc, #100]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004772:	613b      	str	r3, [r7, #16]
      break;
 8004774:	e026      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	0c9b      	lsrs	r3, r3, #18
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	4a17      	ldr	r2, [pc, #92]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004780:	5cd3      	ldrb	r3, [r2, r3]
 8004782:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004784:	4b13      	ldr	r3, [pc, #76]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	4a14      	ldr	r2, [pc, #80]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800479c:	4a0e      	ldr	r2, [pc, #56]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0x98>)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e004      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a0c      	ldr	r2, [pc, #48]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	613b      	str	r3, [r7, #16]
      break;
 80047bc:	e002      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047be:	4b06      	ldr	r3, [pc, #24]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80047c0:	613b      	str	r3, [r7, #16]
      break;
 80047c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c4:	693b      	ldr	r3, [r7, #16]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000
 80047d8:	007a1200 	.word	0x007a1200
 80047dc:	08007148 	.word	0x08007148
 80047e0:	08007158 	.word	0x08007158
 80047e4:	003d0900 	.word	0x003d0900

080047e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ec:	4b03      	ldr	r3, [pc, #12]	@ (80047fc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ee:	681b      	ldr	r3, [r3, #0]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000004 	.word	0x20000004

08004800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004806:	f7ff ffef 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 800480a:	4601      	mov	r1, r0
 800480c:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004814:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004818:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	fa92 f2a2 	rbit	r2, r2
 8004820:	603a      	str	r2, [r7, #0]
  return result;
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	fab2 f282 	clz	r2, r2
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	40d3      	lsrs	r3, r2
 800482c:	4a04      	ldr	r2, [pc, #16]	@ (8004840 <HAL_RCC_GetPCLK1Freq+0x40>)
 800482e:	5cd3      	ldrb	r3, [r2, r3]
 8004830:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004834:	4618      	mov	r0, r3
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000
 8004840:	08007140 	.word	0x08007140

08004844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800484a:	f7ff ffcd 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 800484e:	4601      	mov	r1, r0
 8004850:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004858:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800485c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	fa92 f2a2 	rbit	r2, r2
 8004864:	603a      	str	r2, [r7, #0]
  return result;
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	fab2 f282 	clz	r2, r2
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	40d3      	lsrs	r3, r2
 8004870:	4a04      	ldr	r2, [pc, #16]	@ (8004884 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004872:	5cd3      	ldrb	r3, [r2, r3]
 8004874:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000
 8004884:	08007140 	.word	0x08007140

08004888 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b092      	sub	sp, #72	@ 0x48
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80d2 	beq.w	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ac:	4b4d      	ldr	r3, [pc, #308]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10e      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b8:	4b4a      	ldr	r3, [pc, #296]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	4a49      	ldr	r2, [pc, #292]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048c2:	61d3      	str	r3, [r2, #28]
 80048c4:	4b47      	ldr	r3, [pc, #284]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b44      	ldr	r3, [pc, #272]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d118      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b41      	ldr	r3, [pc, #260]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a40      	ldr	r2, [pc, #256]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fd fd23 	bl	8002338 <HAL_GetTick>
 80048f2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e008      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f6:	f7fd fd1f 	bl	8002338 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b64      	cmp	r3, #100	@ 0x64
 8004902:	d901      	bls.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e12b      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004908:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004914:	4b33      	ldr	r3, [pc, #204]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800491c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800491e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8082 	beq.w	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004930:	429a      	cmp	r2, r3
 8004932:	d07a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004934:	4b2b      	ldr	r3, [pc, #172]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800493e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004942:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800494c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	4b25      	ldr	r3, [pc, #148]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	461a      	mov	r2, r3
 800495e:	2301      	movs	r3, #1
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004966:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	4b1c      	ldr	r3, [pc, #112]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	461a      	mov	r2, r3
 8004982:	2300      	movs	r3, #0
 8004984:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004986:	4a17      	ldr	r2, [pc, #92]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800498a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800498c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d049      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004996:	f7fd fccf 	bl	8002338 <HAL_GetTick>
 800499a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	e00a      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fd fccb 	bl	8002338 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e0d5      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80049b4:	2302      	movs	r3, #2
 80049b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c0:	2302      	movs	r3, #2
 80049c2:	623b      	str	r3, [r7, #32]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	fa93 f3a3 	rbit	r3, r3
 80049ca:	61fb      	str	r3, [r7, #28]
  return result;
 80049cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d108      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80049de:	4b01      	ldr	r3, [pc, #4]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	e00d      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40007000 	.word	0x40007000
 80049ec:	10908100 	.word	0x10908100
 80049f0:	2302      	movs	r3, #2
 80049f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	fa93 f3a3 	rbit	r3, r3
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	4b5a      	ldr	r3, [pc, #360]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	2202      	movs	r2, #2
 8004a02:	613a      	str	r2, [r7, #16]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	fa92 f2a2 	rbit	r2, r2
 8004a0a:	60fa      	str	r2, [r7, #12]
  return result;
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	fab2 f282 	clz	r2, r2
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	f002 021f 	and.w	r2, r2, #31
 8004a1e:	2101      	movs	r1, #1
 8004a20:	fa01 f202 	lsl.w	r2, r1, r2
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0b9      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	494c      	ldr	r1, [pc, #304]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a44:	4b48      	ldr	r3, [pc, #288]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	4a47      	ldr	r2, [pc, #284]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a5c:	4b42      	ldr	r3, [pc, #264]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a60:	f023 0203 	bic.w	r2, r3, #3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	493f      	ldr	r1, [pc, #252]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	4938      	ldr	r1, [pc, #224]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a98:	4b33      	ldr	r3, [pc, #204]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	4930      	ldr	r1, [pc, #192]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	f023 0210 	bic.w	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	4929      	ldr	r1, [pc, #164]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004ad4:	4b24      	ldr	r3, [pc, #144]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	4921      	ldr	r1, [pc, #132]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d008      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004af2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	f023 0220 	bic.w	r2, r3, #32
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	491a      	ldr	r1, [pc, #104]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004b10:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	4912      	ldr	r1, [pc, #72]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d008      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8004b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	490b      	ldr	r1, [pc, #44]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b50:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	4903      	ldr	r1, [pc, #12]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3748      	adds	r7, #72	@ 0x48
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40021000 	.word	0x40021000

08004b6c <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check SDADC handle */
  if(hsdadc == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e07f      	b.n	8004c7e <HAL_SDADC_Init+0x112>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));

  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	635a      	str	r2, [r3, #52]	@ 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fd fa0b 	bl	8001fd8 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8004bd0:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6819      	ldr	r1, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004bf8:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <HAL_SDADC_Init+0x11c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d00f      	beq.n	8004c3c <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c88 <HAL_SDADC_Init+0x11c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a19      	ldr	r2, [pc, #100]	@ (8004c88 <HAL_SDADC_Init+0x11c>)
 8004c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c26:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8004c28:	4b17      	ldr	r3, [pc, #92]	@ (8004c88 <HAL_SDADC_Init+0x11c>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4915      	ldr	r1, [pc, #84]	@ (8004c88 <HAL_SDADC_Init+0x11c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]

    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8004c36:	2002      	movs	r0, #2
 8004c38:	f7fd fb8a 	bl	8002350 <HAL_Delay>
  }

  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  tickstart = HAL_GetTick();
 8004c4c:	f7fd fb74 	bl	8002338 <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8004c52:	e008      	b.n	8004c66 <HAL_SDADC_Init+0xfa>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8004c54:	f7fd fb70 	bl	8002338 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c60:	d901      	bls.n	8004c66 <HAL_SDADC_Init+0xfa>
    {
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e00b      	b.n	8004c7e <HAL_SDADC_Init+0x112>
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1ef      	bne.n	8004c54 <HAL_SDADC_Init+0xe8>
    }
  }

  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return HAL status */
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40016000 	.word	0x40016000

08004c8c <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d002      	beq.n	8004cac <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
 8004caa:	e025      	b.n	8004cf8 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f9df 	bl	8005070 <SDADC_EnterInitMode>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d006      	beq.n	8004cc6 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	22ff      	movs	r2, #255	@ 0xff
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	75fb      	strb	r3, [r7, #23]
 8004cc4:	e018      	b.n	8004cf8 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3320      	adds	r3, #32
 8004cd4:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004cde:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8004ce4:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004cec:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8004cee:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004cf0:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f9df 	bl	80050b6 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d002      	beq.n	8004d24 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
 8004d22:	e037      	b.n	8004d94 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f9a3 	bl	8005070 <SDADC_EnterInitMode>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d006      	beq.n	8004d3e <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	22ff      	movs	r2, #255	@ 0xff
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	75fb      	strb	r3, [r7, #23]
 8004d3c:	e02a      	b.n	8004d94 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4a17      	ldr	r2, [pc, #92]	@ (8004da0 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01f      	beq.n	8004d86 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	0c1b      	lsrs	r3, r3, #16
 8004d4a:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43da      	mvns	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	400a      	ands	r2, r1
 8004d68:	641a      	str	r2, [r3, #64]	@ 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d84:	e003      	b.n	8004d8e <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f991 	bl	80050b6 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	00080100 	.word	0x00080100

08004da4 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d027      	beq.n	8004e0e <HAL_SDADC_InjectedConfigChannel+0x6a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc4:	2bff      	cmp	r3, #255	@ 0xff
 8004dc6:	d022      	beq.n	8004e0e <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	b292      	uxth	r2, r2
 8004dd0:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d108      	bne.n	8004dea <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0220 	orr.w	r2, r2, #32
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	e007      	b.n	8004dfa <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0220 	bic.w	r2, r2, #32
 8004df8:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 8004e00:	68b8      	ldr	r0, [r7, #8]
 8004e02:	f000 f96a 	bl	80050da <SDADC_GetInjChannelsNbr>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	621a      	str	r2, [r3, #32]
 8004e0c:	e001      	b.n	8004e12 <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a12      	ldr	r2, [pc, #72]	@ (8004e78 <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d105      	bne.n	8004e40 <HAL_SDADC_SelectInjectedTrigger+0x24>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d102      	bne.n	8004e40 <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
 8004e3e:	e014      	b.n	8004e6a <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d009      	beq.n	8004e5e <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d004      	beq.n	8004e5e <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d103      	bne.n	8004e66 <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e64:	e001      	b.n	8004e6a <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40016000 	.word	0x40016000

08004e7c <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d120      	bne.n	8004ed6 <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f8eb 	bl	8005070 <SDADC_EnterInitMode>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d006      	beq.n	8004eae <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	22ff      	movs	r2, #255	@ 0xff
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	e015      	b.n	8004eda <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ebc:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6859      	ldr	r1, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f8f1 	bl	80050b6 <SDADC_ExitInitMode>
 8004ed4:	e001      	b.n	8004eda <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_SDADC_InjectedStart>:
  *         or if regular conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedStart(SDADC_HandleTypeDef *hsdadc)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d004      	beq.n	8004f00 <HAL_SDADC_InjectedStart+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_REG))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d105      	bne.n	8004f0c <HAL_SDADC_InjectedStart+0x28>
  {
    /* Start injected conversion */
    status = SDADC_InjConvStart(hsdadc);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f90e 	bl	8005122 <SDADC_InjConvStart>
 8004f06:	4603      	mov	r3, r0
 8004f08:	73fb      	strb	r3, [r7, #15]
 8004f0a:	e001      	b.n	8004f10 <HAL_SDADC_InjectedStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_SDADC_PollForInjectedConversion>:
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForInjectedConversion(SDADC_HandleTypeDef* hsdadc,
                                                      uint32_t Timeout)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d006      	beq.n	8004f3c <HAL_SDADC_PollForInjectedConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d001      	beq.n	8004f3c <HAL_SDADC_PollForInjectedConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e057      	b.n	8004fec <HAL_SDADC_PollForInjectedConversion+0xd2>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004f3c:	f7fd f9fc 	bl	8002338 <HAL_GetTick>
 8004f40:	60f8      	str	r0, [r7, #12]

    /* Wait JEOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_JEOCF) != SDADC_ISR_JEOCF)
 8004f42:	e010      	b.n	8004f66 <HAL_SDADC_PollForInjectedConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d00c      	beq.n	8004f66 <HAL_SDADC_PollForInjectedConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8004f4c:	f7fd f9f4 	bl	8002338 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <HAL_SDADC_PollForInjectedConversion+0x48>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_SDADC_PollForInjectedConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e042      	b.n	8004fec <HAL_SDADC_PollForInjectedConversion+0xd2>
    while((hsdadc->Instance->ISR & SDADC_ISR_JEOCF) != SDADC_ISR_JEOCF)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d1e7      	bne.n	8004f44 <HAL_SDADC_PollForInjectedConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d10d      	bne.n	8004f9e <HAL_SDADC_PollForInjectedConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f867 	bl	800505c <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRJOVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0204 	orr.w	r2, r2, #4
 8004f9c:	60da      	str	r2, [r3, #12]
    }
    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	1e5a      	subs	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	625a      	str	r2, [r3, #36]	@ 0x24
    if(hsdadc->InjConvRemaining == 0UL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <HAL_SDADC_PollForInjectedConversion+0x9e>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1a      	ldr	r2, [r3, #32]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Update SDADC state only if not continuous conversion, SW trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d114      	bne.n	8004fea <HAL_SDADC_PollForInjectedConversion+0xd0>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d110      	bne.n	8004fea <HAL_SDADC_PollForInjectedConversion+0xd0>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d10a      	bne.n	8004fea <HAL_SDADC_PollForInjectedConversion+0xd0>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d101      	bne.n	8004fe2 <HAL_SDADC_PollForInjectedConversion+0xc8>
 8004fde:	2201      	movs	r2, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_SDADC_PollForInjectedConversion+0xca>
 8004fe2:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Return function status */
    return HAL_OK;
 8004fea:	2300      	movs	r3, #0
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_SDADC_InjectedStop>:
  * @note   This function should be called only if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedStop(SDADC_HandleTypeDef *hsdadc)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005002:	2b04      	cmp	r3, #4
 8005004:	d007      	beq.n	8005016 <HAL_SDADC_InjectedStop+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 800500c:	2b05      	cmp	r3, #5
 800500e:	d002      	beq.n	8005016 <HAL_SDADC_InjectedStop+0x22>
  {
    /* Return error status */
    status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
 8005014:	e004      	b.n	8005020 <HAL_SDADC_InjectedStop+0x2c>
  }
  else
  {
    /* Stop injected conversion */
    status = SDADC_InjConvStop(hsdadc);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8d3 	bl	80051c2 <SDADC_InjConvStop>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_SDADC_InjectedGetValue>:
  * @param  hsdadc SDADC handle.
  * @param  Channel Corresponding channel of injected conversion.
  * @retval Injected conversion value
  */
uint32_t HAL_SDADC_InjectedGetValue(SDADC_HandleTypeDef *hsdadc, uint32_t* Channel)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(Channel != ((void*) 0));

  /* Read SDADC_JDATAR register and extract channel and conversion value */
  value = hsdadc->Instance->JDATAR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503a:	60fb      	str	r3, [r7, #12]
  *Channel = ((value & SDADC_JDATAR_JDATACH) >> SDADC_JDATAR_CH_OFFSET);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	0e1b      	lsrs	r3, r3, #24
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	601a      	str	r2, [r3, #0]
  value &= SDADC_JDATAR_JDATA;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	b29b      	uxth	r3, r3
 800504c:	60fb      	str	r3, [r7, #12]

  /* Return injected conversion value */
  return value;
 800504e:	68fb      	ldr	r3, [r7, #12]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005086:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8005088:	f7fd f956 	bl	8002338 <HAL_GetTick>
 800508c:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 800508e:	e008      	b.n	80050a2 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8005090:	f7fd f952 	bl	8002338 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2bc8      	cmp	r3, #200	@ 0xc8
 800509c:	d901      	bls.n	80050a2 <SDADC_EnterInitMode+0x32>
    {
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e005      	b.n	80050ae <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	daf1      	bge.n	8005090 <SDADC_EnterInitMode+0x20>
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80050cc:	601a      	str	r2, [r3, #0]
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 80050da:	b480      	push	{r7}
 80050dc:	b087      	sub	sp, #28
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	e00d      	b.n	800510e <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	3301      	adds	r3, #1
 8005100:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d9ee      	bls.n	80050f2 <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 8005114:	697b      	ldr	r3, [r7, #20]
}
 8005116:	4618      	mov	r0, r3
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <SDADC_InjConvStart>:
  * @brief  This function allows to really start injected conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_InjConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]

  /* Initialize number of injected conversions remaining */
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1a      	ldr	r2, [r3, #32]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check injected trigger */
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d108      	bne.n	8005150 <SDADC_InjConvStart+0x2e>
  {
    /* Set JSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JSWSTART;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	e025      	b.n	800519c <SDADC_InjConvStart+0x7a>
  }
  else /* external or synchronous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ff8d 	bl	8005070 <SDADC_EnterInitMode>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d006      	beq.n	800516a <SDADC_InjConvStart+0x48>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	22ff      	movs	r2, #255	@ 0xff
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	73fb      	strb	r3, [r7, #15]
 8005168:	e018      	b.n	800519c <SDADC_InjConvStart+0x7a>
    }
    else
    {
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	2b01      	cmp	r3, #1
 8005170:	d108      	bne.n	8005184 <SDADC_InjConvStart+0x62>
      {
        /* Set JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e008      	b.n	8005196 <SDADC_InjConvStart+0x74>
      }
      else /* external trigger */
      {
        /* Set JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6859      	ldr	r1, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff ff8d 	bl	80050b6 <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <SDADC_InjConvStart+0x96>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                    HAL_SDADC_STATE_INJ : HAL_SDADC_STATE_REG_INJ;
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <SDADC_InjConvStart+0x8e>
 80051ac:	2204      	movs	r2, #4
 80051ae:	e000      	b.n	80051b2 <SDADC_InjConvStart+0x90>
 80051b0:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  /* Return function status */
  return status;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <SDADC_InjConvStop>:
  * @brief  This function allows to really stop injected conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_InjConvStop(SDADC_HandleTypeDef* hsdadc)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;

  /* Check continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d10c      	bne.n	80051ec <SDADC_InjConvStop+0x2a>
  {
    /* Clear JEOCF by reading SDADC_JDATAR register */
    dummy_read_for_register_reset =  hsdadc->Instance->JDATAR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d8:	60bb      	str	r3, [r7, #8]
    UNUSED(dummy_read_for_register_reset);
 80051da:	68bb      	ldr	r3, [r7, #8]

    /* Clear JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0220 	bic.w	r2, r2, #32
 80051ea:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of injected conversion */
  tickstart = HAL_GetTick();
 80051ec:	f7fd f8a4 	bl	8002338 <HAL_GetTick>
 80051f0:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_JCIP) != 0UL)
 80051f2:	e00c      	b.n	800520e <SDADC_InjConvStop+0x4c>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 80051f4:	f7fd f8a0 	bl	8002338 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8005200:	d905      	bls.n	800520e <SDADC_InjConvStop+0x4c>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	22ff      	movs	r2, #255	@ 0xff
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e053      	b.n	80052b6 <SDADC_InjConvStop+0xf4>
  while((hsdadc->Instance->ISR & SDADC_ISR_JCIP) != 0UL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1eb      	bne.n	80051f4 <SDADC_InjConvStop+0x32>
    }
  }
  /* Check if trigger is not software */
  if(hsdadc->InjectedTrigger != SDADC_SOFTWARE_TRIGGER)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d023      	beq.n	800526c <SDADC_InjConvStop+0xaa>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff ff23 	bl	8005070 <SDADC_EnterInitMode>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <SDADC_InjConvStop+0x7a>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	22ff      	movs	r2, #255	@ 0xff
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e03c      	b.n	80052b6 <SDADC_InjConvStop+0xf4>
    }
    else
    {
      /* Check if trigger is synchronous */
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d108      	bne.n	8005256 <SDADC_InjConvStop+0x94>
      {
        /* Clear JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	e007      	b.n	8005266 <SDADC_InjConvStop+0xa4>
      }
      else /* external trigger */
      {
        /* Clear JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTEN);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8005264:	605a      	str	r2, [r3, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff ff25 	bl	80050b6 <SDADC_ExitInitMode>
    }
  }
  /* Check if continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d107      	bne.n	8005284 <SDADC_InjConvStop+0xc2>
  {
    /* Restore JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0220 	orr.w	r2, r2, #32
 8005282:	605a      	str	r2, [r3, #4]
  }
  /* Clear JEOCF by reading SDADC_JDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->JDATAR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528a:	60bb      	str	r3, [r7, #8]
  UNUSED(dummy_read_for_register_reset);
 800528c:	68bb      	ldr	r3, [r7, #8]

  /* Set CLRJOVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0204 	orr.w	r2, r2, #4
 800529c:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d101      	bne.n	80052ac <SDADC_InjConvStop+0xea>
 80052a8:	2201      	movs	r2, #1
 80052aa:	e000      	b.n	80052ae <SDADC_InjConvStop+0xec>
 80052ac:	2203      	movs	r2, #3
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e041      	b.n	8005354 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fc feb7 	bl	8002058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f000 fa75 	bl	80057ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d001      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e049      	b.n	8005408 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005394:	d01d      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1e      	ldr	r2, [pc, #120]	@ (8005414 <HAL_TIM_Base_Start_IT+0xb8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d018      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005418 <HAL_TIM_Base_Start_IT+0xbc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1b      	ldr	r2, [pc, #108]	@ (800541c <HAL_TIM_Base_Start_IT+0xc0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a19      	ldr	r2, [pc, #100]	@ (8005420 <HAL_TIM_Base_Start_IT+0xc4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a18      	ldr	r2, [pc, #96]	@ (8005424 <HAL_TIM_Base_Start_IT+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a16      	ldr	r2, [pc, #88]	@ (8005428 <HAL_TIM_Base_Start_IT+0xcc>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d111      	bne.n	80053f6 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b06      	cmp	r3, #6
 80053e2:	d010      	beq.n	8005406 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f4:	e007      	b.n	8005406 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0201 	orr.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40001800 	.word	0x40001800
 8005424:	40014000 	.word	0x40014000
 8005428:	40015c00 	.word	0x40015c00

0800542c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d020      	beq.n	8005490 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01b      	beq.n	8005490 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0202 	mvn.w	r2, #2
 8005460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f999 	bl	80057ae <HAL_TIM_IC_CaptureCallback>
 800547c:	e005      	b.n	800548a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f98b 	bl	800579a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f99c 	bl	80057c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d020      	beq.n	80054dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01b      	beq.n	80054dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0204 	mvn.w	r2, #4
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f973 	bl	80057ae <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f965 	bl	800579a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f976 	bl	80057c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d020      	beq.n	8005528 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01b      	beq.n	8005528 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0208 	mvn.w	r2, #8
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2204      	movs	r2, #4
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f94d 	bl	80057ae <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f93f 	bl	800579a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f950 	bl	80057c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b00      	cmp	r3, #0
 8005530:	d020      	beq.n	8005574 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01b      	beq.n	8005574 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0210 	mvn.w	r2, #16
 8005544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2208      	movs	r2, #8
 800554a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f927 	bl	80057ae <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f919 	bl	800579a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f92a 	bl	80057c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00c      	beq.n	8005598 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0201 	mvn.w	r2, #1
 8005590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fc f9c4 	bl	8001920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00c      	beq.n	80055bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fad6 	bl	8005b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00c      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8fb 	bl	80057d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0220 	mvn.w	r2, #32
 80055fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 faa8 	bl	8005b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_TIM_ConfigClockSource+0x1c>
 8005624:	2302      	movs	r3, #2
 8005626:	e0b4      	b.n	8005792 <HAL_TIM_ConfigClockSource+0x186>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800564e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005660:	d03e      	beq.n	80056e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005666:	f200 8087 	bhi.w	8005778 <HAL_TIM_ConfigClockSource+0x16c>
 800566a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800566e:	f000 8086 	beq.w	800577e <HAL_TIM_ConfigClockSource+0x172>
 8005672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005676:	d87f      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b70      	cmp	r3, #112	@ 0x70
 800567a:	d01a      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0xa6>
 800567c:	2b70      	cmp	r3, #112	@ 0x70
 800567e:	d87b      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b60      	cmp	r3, #96	@ 0x60
 8005682:	d050      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x11a>
 8005684:	2b60      	cmp	r3, #96	@ 0x60
 8005686:	d877      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x16c>
 8005688:	2b50      	cmp	r3, #80	@ 0x50
 800568a:	d03c      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0xfa>
 800568c:	2b50      	cmp	r3, #80	@ 0x50
 800568e:	d873      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x16c>
 8005690:	2b40      	cmp	r3, #64	@ 0x40
 8005692:	d058      	beq.n	8005746 <HAL_TIM_ConfigClockSource+0x13a>
 8005694:	2b40      	cmp	r3, #64	@ 0x40
 8005696:	d86f      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x16c>
 8005698:	2b30      	cmp	r3, #48	@ 0x30
 800569a:	d064      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x15a>
 800569c:	2b30      	cmp	r3, #48	@ 0x30
 800569e:	d86b      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x16c>
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d060      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x15a>
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d867      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x16c>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d05c      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x15a>
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d05a      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x15a>
 80056b0:	e062      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056c2:	f000 f9b3 	bl	8005a2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	609a      	str	r2, [r3, #8]
      break;
 80056de:	e04f      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056f0:	f000 f99c 	bl	8005a2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005702:	609a      	str	r2, [r3, #8]
      break;
 8005704:	e03c      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005712:	461a      	mov	r2, r3
 8005714:	f000 f910 	bl	8005938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2150      	movs	r1, #80	@ 0x50
 800571e:	4618      	mov	r0, r3
 8005720:	f000 f969 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 8005724:	e02c      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005732:	461a      	mov	r2, r3
 8005734:	f000 f92f 	bl	8005996 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2160      	movs	r1, #96	@ 0x60
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f959 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 8005744:	e01c      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005752:	461a      	mov	r2, r3
 8005754:	f000 f8f0 	bl	8005938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2140      	movs	r1, #64	@ 0x40
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f949 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 8005764:	e00c      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4619      	mov	r1, r3
 8005770:	4610      	mov	r0, r2
 8005772:	f000 f940 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 8005776:	e003      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
      break;
 800577c:	e000      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800577e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005802:	d00f      	beq.n	8005824 <TIM_Base_SetConfig+0x38>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a42      	ldr	r2, [pc, #264]	@ (8005910 <TIM_Base_SetConfig+0x124>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00b      	beq.n	8005824 <TIM_Base_SetConfig+0x38>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a41      	ldr	r2, [pc, #260]	@ (8005914 <TIM_Base_SetConfig+0x128>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_Base_SetConfig+0x38>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a40      	ldr	r2, [pc, #256]	@ (8005918 <TIM_Base_SetConfig+0x12c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_Base_SetConfig+0x38>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3f      	ldr	r2, [pc, #252]	@ (800591c <TIM_Base_SetConfig+0x130>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d108      	bne.n	8005836 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583c:	d027      	beq.n	800588e <TIM_Base_SetConfig+0xa2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a33      	ldr	r2, [pc, #204]	@ (8005910 <TIM_Base_SetConfig+0x124>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d023      	beq.n	800588e <TIM_Base_SetConfig+0xa2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a32      	ldr	r2, [pc, #200]	@ (8005914 <TIM_Base_SetConfig+0x128>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01f      	beq.n	800588e <TIM_Base_SetConfig+0xa2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a31      	ldr	r2, [pc, #196]	@ (8005918 <TIM_Base_SetConfig+0x12c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01b      	beq.n	800588e <TIM_Base_SetConfig+0xa2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a31      	ldr	r2, [pc, #196]	@ (8005920 <TIM_Base_SetConfig+0x134>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d017      	beq.n	800588e <TIM_Base_SetConfig+0xa2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a30      	ldr	r2, [pc, #192]	@ (8005924 <TIM_Base_SetConfig+0x138>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <TIM_Base_SetConfig+0xa2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2f      	ldr	r2, [pc, #188]	@ (8005928 <TIM_Base_SetConfig+0x13c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00f      	beq.n	800588e <TIM_Base_SetConfig+0xa2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2e      	ldr	r2, [pc, #184]	@ (800592c <TIM_Base_SetConfig+0x140>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00b      	beq.n	800588e <TIM_Base_SetConfig+0xa2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2d      	ldr	r2, [pc, #180]	@ (8005930 <TIM_Base_SetConfig+0x144>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <TIM_Base_SetConfig+0xa2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a2c      	ldr	r2, [pc, #176]	@ (8005934 <TIM_Base_SetConfig+0x148>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_Base_SetConfig+0xa2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a24      	ldr	r2, [pc, #144]	@ (800591c <TIM_Base_SetConfig+0x130>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d108      	bne.n	80058a0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a19      	ldr	r2, [pc, #100]	@ (800592c <TIM_Base_SetConfig+0x140>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_Base_SetConfig+0xf0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a18      	ldr	r2, [pc, #96]	@ (8005930 <TIM_Base_SetConfig+0x144>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0xf0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a17      	ldr	r2, [pc, #92]	@ (8005934 <TIM_Base_SetConfig+0x148>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d103      	bne.n	80058e4 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d105      	bne.n	8005902 <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f023 0201 	bic.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	611a      	str	r2, [r3, #16]
  }
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40000400 	.word	0x40000400
 8005914:	40000800 	.word	0x40000800
 8005918:	40000c00 	.word	0x40000c00
 800591c:	40015c00 	.word	0x40015c00
 8005920:	40001800 	.word	0x40001800
 8005924:	40001c00 	.word	0x40001c00
 8005928:	40002000 	.word	0x40002000
 800592c:	40014000 	.word	0x40014000
 8005930:	40014400 	.word	0x40014400
 8005934:	40014800 	.word	0x40014800

08005938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f023 0201 	bic.w	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f023 030a 	bic.w	r3, r3, #10
 8005974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005996:	b480      	push	{r7}
 8005998:	b087      	sub	sp, #28
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f023 0210 	bic.w	r2, r3, #16
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	031b      	lsls	r3, r3, #12
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f043 0307 	orr.w	r3, r3, #7
 8005a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	609a      	str	r2, [r3, #8]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	021a      	lsls	r2, r3, #8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	609a      	str	r2, [r3, #8]
}
 8005a60:	bf00      	nop
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e055      	b.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac6:	d01d      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1b      	ldr	r2, [pc, #108]	@ (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d018      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a18      	ldr	r2, [pc, #96]	@ (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00e      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a17      	ldr	r2, [pc, #92]	@ (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a15      	ldr	r2, [pc, #84]	@ (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a14      	ldr	r2, [pc, #80]	@ (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d10c      	bne.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40001800 	.word	0x40001800
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40015c00 	.word	0x40015c00

08005b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e040      	b.n	8005c10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fc fa9a 	bl	80020d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2224      	movs	r2, #36	@ 0x24
 8005ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fd76 	bl	80066b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fbf9 	bl	80063c0 <UART_SetConfig>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e01b      	b.n	8005c10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fdf5 	bl	80067f8 <UART_CheckIdleState>
 8005c0e:	4603      	mov	r3, r0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	@ 0x28
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	4613      	mov	r3, r2
 8005c26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d177      	bne.n	8005d20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_UART_Transmit+0x24>
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e070      	b.n	8005d22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2221      	movs	r2, #33	@ 0x21
 8005c4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c4e:	f7fc fb73 	bl	8002338 <HAL_GetTick>
 8005c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	88fa      	ldrh	r2, [r7, #6]
 8005c60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6c:	d108      	bne.n	8005c80 <HAL_UART_Transmit+0x68>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d104      	bne.n	8005c80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	e003      	b.n	8005c88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c88:	e02f      	b.n	8005cea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	2180      	movs	r1, #128	@ 0x80
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 fe57 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e03b      	b.n	8005d22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10b      	bne.n	8005cc8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	881a      	ldrh	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cbc:	b292      	uxth	r2, r2
 8005cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	e007      	b.n	8005cd8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	781a      	ldrb	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1c9      	bne.n	8005c8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2140      	movs	r1, #64	@ 0x40
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 fe21 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e005      	b.n	8005d22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e000      	b.n	8005d22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d20:	2302      	movs	r3, #2
  }
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b08a      	sub	sp, #40	@ 0x28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	4613      	mov	r3, r2
 8005d36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d132      	bne.n	8005da8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <HAL_UART_Receive_IT+0x24>
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e02b      	b.n	8005daa <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d018      	beq.n	8005d98 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	613b      	str	r3, [r7, #16]
   return(result);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	623b      	str	r3, [r7, #32]
 8005d86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	69f9      	ldr	r1, [r7, #28]
 8005d8a:	6a3a      	ldr	r2, [r7, #32]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fe40 	bl	8006a24 <UART_Start_Receive_IT>
 8005da4:	4603      	mov	r3, r0
 8005da6:	e000      	b.n	8005daa <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3728      	adds	r7, #40	@ 0x28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b0ba      	sub	sp, #232	@ 0xe8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005dde:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005de2:	4013      	ands	r3, r2
 8005de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005de8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d115      	bne.n	8005e1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00f      	beq.n	8005e1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d009      	beq.n	8005e1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 82ab 	beq.w	8006368 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3
      }
      return;
 8005e1a:	e2a5      	b.n	8006368 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8117 	beq.w	8006054 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005e36:	4b85      	ldr	r3, [pc, #532]	@ (800604c <HAL_UART_IRQHandler+0x298>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 810a 	beq.w	8006054 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d011      	beq.n	8005e70 <HAL_UART_IRQHandler+0xbc>
 8005e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e66:	f043 0201 	orr.w	r2, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d011      	beq.n	8005ea0 <HAL_UART_IRQHandler+0xec>
 8005e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e96:	f043 0204 	orr.w	r2, r3, #4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d011      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x11c>
 8005eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ec6:	f043 0202 	orr.w	r2, r3, #2
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d017      	beq.n	8005f0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d105      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00b      	beq.n	8005f0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2208      	movs	r2, #8
 8005efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f02:	f043 0208 	orr.w	r2, r3, #8
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d012      	beq.n	8005f3e <HAL_UART_IRQHandler+0x18a>
 8005f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00c      	beq.n	8005f3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f34:	f043 0220 	orr.w	r2, r3, #32
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8211 	beq.w	800636c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00d      	beq.n	8005f72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f5a:	f003 0320 	and.w	r3, r3, #32
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	d005      	beq.n	8005f96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d04f      	beq.n	8006036 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fdf8 	bl	8006b8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa6:	2b40      	cmp	r3, #64	@ 0x40
 8005fa8:	d141      	bne.n	800602e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1d9      	bne.n	8005faa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d013      	beq.n	8006026 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006002:	4a13      	ldr	r2, [pc, #76]	@ (8006050 <HAL_UART_IRQHandler+0x29c>)
 8006004:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800600a:	4618      	mov	r0, r3
 800600c:	f7fd f812 	bl	8003034 <HAL_DMA_Abort_IT>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d017      	beq.n	8006046 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800601a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006020:	4610      	mov	r0, r2
 8006022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006024:	e00f      	b.n	8006046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9b4 	bl	8006394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602c:	e00b      	b.n	8006046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f9b0 	bl	8006394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	e007      	b.n	8006046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9ac 	bl	8006394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006044:	e192      	b.n	800636c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006046:	bf00      	nop
    return;
 8006048:	e190      	b.n	800636c <HAL_UART_IRQHandler+0x5b8>
 800604a:	bf00      	nop
 800604c:	04000120 	.word	0x04000120
 8006050:	08006c55 	.word	0x08006c55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006058:	2b01      	cmp	r3, #1
 800605a:	f040 814b 	bne.w	80062f4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800605e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 8144 	beq.w	80062f4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800606c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 813d 	beq.w	80062f4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2210      	movs	r2, #16
 8006080:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608c:	2b40      	cmp	r3, #64	@ 0x40
 800608e:	f040 80b5 	bne.w	80061fc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800609e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8164 	beq.w	8006370 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80060ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060b2:	429a      	cmp	r2, r3
 80060b4:	f080 815c 	bcs.w	8006370 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	f000 8086 	beq.w	80061da <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060fc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006104:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1da      	bne.n	80060ce <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006128:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800613c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006140:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006144:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800614e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e1      	bne.n	8006118 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800616a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3308      	adds	r3, #8
 8006174:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006178:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800617a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800617e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e3      	bne.n	8006154 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061aa:	f023 0310 	bic.w	r3, r3, #16
 80061ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061be:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e4      	bne.n	800619a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fc feef 	bl	8002fb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2202      	movs	r2, #2
 80061de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8d7 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061fa:	e0b9      	b.n	8006370 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006208:	b29b      	uxth	r3, r3
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 80ab 	beq.w	8006374 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800621e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 80a6 	beq.w	8006374 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800623c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800624a:	647b      	str	r3, [r7, #68]	@ 0x44
 800624c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e4      	bne.n	8006228 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	623b      	str	r3, [r7, #32]
   return(result);
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3308      	adds	r3, #8
 800627e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006282:	633a      	str	r2, [r7, #48]	@ 0x30
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e3      	bne.n	800625e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0310 	bic.w	r3, r3, #16
 80062be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	69b9      	ldr	r1, [r7, #24]
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	617b      	str	r3, [r7, #20]
   return(result);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e4      	bne.n	80062aa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f85b 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062f2:	e03f      	b.n	8006374 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00e      	beq.n	800631e <HAL_UART_IRQHandler+0x56a>
 8006300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fe84 	bl	8007024 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800631c:	e02d      	b.n	800637a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00e      	beq.n	8006348 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800632a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800632e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d01c      	beq.n	8006378 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
    }
    return;
 8006346:	e017      	b.n	8006378 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d012      	beq.n	800637a <HAL_UART_IRQHandler+0x5c6>
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00c      	beq.n	800637a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fc8d 	bl	8006c80 <UART_EndTransmit_IT>
    return;
 8006366:	e008      	b.n	800637a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006368:	bf00      	nop
 800636a:	e006      	b.n	800637a <HAL_UART_IRQHandler+0x5c6>
    return;
 800636c:	bf00      	nop
 800636e:	e004      	b.n	800637a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006370:	bf00      	nop
 8006372:	e002      	b.n	800637a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006374:	bf00      	nop
 8006376:	e000      	b.n	800637a <HAL_UART_IRQHandler+0x5c6>
    return;
 8006378:	bf00      	nop
  }

}
 800637a:	37e8      	adds	r7, #232	@ 0xe8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80063ee:	f023 030c 	bic.w	r3, r3, #12
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	6979      	ldr	r1, [r7, #20]
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	430a      	orrs	r2, r1
 8006434:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a99      	ldr	r2, [pc, #612]	@ (80066a0 <UART_SetConfig+0x2e0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d120      	bne.n	8006482 <UART_SetConfig+0xc2>
 8006440:	4b98      	ldr	r3, [pc, #608]	@ (80066a4 <UART_SetConfig+0x2e4>)
 8006442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	2b03      	cmp	r3, #3
 800644a:	d817      	bhi.n	800647c <UART_SetConfig+0xbc>
 800644c:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <UART_SetConfig+0x94>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	08006465 	.word	0x08006465
 8006458:	08006471 	.word	0x08006471
 800645c:	08006477 	.word	0x08006477
 8006460:	0800646b 	.word	0x0800646b
 8006464:	2301      	movs	r3, #1
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e061      	b.n	800652e <UART_SetConfig+0x16e>
 800646a:	2302      	movs	r3, #2
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e05e      	b.n	800652e <UART_SetConfig+0x16e>
 8006470:	2304      	movs	r3, #4
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e05b      	b.n	800652e <UART_SetConfig+0x16e>
 8006476:	2308      	movs	r3, #8
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e058      	b.n	800652e <UART_SetConfig+0x16e>
 800647c:	2310      	movs	r3, #16
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e055      	b.n	800652e <UART_SetConfig+0x16e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a88      	ldr	r2, [pc, #544]	@ (80066a8 <UART_SetConfig+0x2e8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d124      	bne.n	80064d6 <UART_SetConfig+0x116>
 800648c:	4b85      	ldr	r3, [pc, #532]	@ (80066a4 <UART_SetConfig+0x2e4>)
 800648e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006494:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006498:	d011      	beq.n	80064be <UART_SetConfig+0xfe>
 800649a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800649e:	d817      	bhi.n	80064d0 <UART_SetConfig+0x110>
 80064a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064a4:	d011      	beq.n	80064ca <UART_SetConfig+0x10a>
 80064a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064aa:	d811      	bhi.n	80064d0 <UART_SetConfig+0x110>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <UART_SetConfig+0xf8>
 80064b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b4:	d006      	beq.n	80064c4 <UART_SetConfig+0x104>
 80064b6:	e00b      	b.n	80064d0 <UART_SetConfig+0x110>
 80064b8:	2300      	movs	r3, #0
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e037      	b.n	800652e <UART_SetConfig+0x16e>
 80064be:	2302      	movs	r3, #2
 80064c0:	77fb      	strb	r3, [r7, #31]
 80064c2:	e034      	b.n	800652e <UART_SetConfig+0x16e>
 80064c4:	2304      	movs	r3, #4
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e031      	b.n	800652e <UART_SetConfig+0x16e>
 80064ca:	2308      	movs	r3, #8
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e02e      	b.n	800652e <UART_SetConfig+0x16e>
 80064d0:	2310      	movs	r3, #16
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e02b      	b.n	800652e <UART_SetConfig+0x16e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a74      	ldr	r2, [pc, #464]	@ (80066ac <UART_SetConfig+0x2ec>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d124      	bne.n	800652a <UART_SetConfig+0x16a>
 80064e0:	4b70      	ldr	r3, [pc, #448]	@ (80066a4 <UART_SetConfig+0x2e4>)
 80064e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80064e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80064ec:	d011      	beq.n	8006512 <UART_SetConfig+0x152>
 80064ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80064f2:	d817      	bhi.n	8006524 <UART_SetConfig+0x164>
 80064f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80064f8:	d011      	beq.n	800651e <UART_SetConfig+0x15e>
 80064fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80064fe:	d811      	bhi.n	8006524 <UART_SetConfig+0x164>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <UART_SetConfig+0x14c>
 8006504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006508:	d006      	beq.n	8006518 <UART_SetConfig+0x158>
 800650a:	e00b      	b.n	8006524 <UART_SetConfig+0x164>
 800650c:	2300      	movs	r3, #0
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e00d      	b.n	800652e <UART_SetConfig+0x16e>
 8006512:	2302      	movs	r3, #2
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e00a      	b.n	800652e <UART_SetConfig+0x16e>
 8006518:	2304      	movs	r3, #4
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e007      	b.n	800652e <UART_SetConfig+0x16e>
 800651e:	2308      	movs	r3, #8
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e004      	b.n	800652e <UART_SetConfig+0x16e>
 8006524:	2310      	movs	r3, #16
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e001      	b.n	800652e <UART_SetConfig+0x16e>
 800652a:	2310      	movs	r3, #16
 800652c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006536:	d15a      	bne.n	80065ee <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8006538:	7ffb      	ldrb	r3, [r7, #31]
 800653a:	2b08      	cmp	r3, #8
 800653c:	d827      	bhi.n	800658e <UART_SetConfig+0x1ce>
 800653e:	a201      	add	r2, pc, #4	@ (adr r2, 8006544 <UART_SetConfig+0x184>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006569 	.word	0x08006569
 8006548:	08006571 	.word	0x08006571
 800654c:	08006579 	.word	0x08006579
 8006550:	0800658f 	.word	0x0800658f
 8006554:	0800657f 	.word	0x0800657f
 8006558:	0800658f 	.word	0x0800658f
 800655c:	0800658f 	.word	0x0800658f
 8006560:	0800658f 	.word	0x0800658f
 8006564:	08006587 	.word	0x08006587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006568:	f7fe f94a 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 800656c:	61b8      	str	r0, [r7, #24]
        break;
 800656e:	e013      	b.n	8006598 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006570:	f7fe f968 	bl	8004844 <HAL_RCC_GetPCLK2Freq>
 8006574:	61b8      	str	r0, [r7, #24]
        break;
 8006576:	e00f      	b.n	8006598 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006578:	4b4d      	ldr	r3, [pc, #308]	@ (80066b0 <UART_SetConfig+0x2f0>)
 800657a:	61bb      	str	r3, [r7, #24]
        break;
 800657c:	e00c      	b.n	8006598 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800657e:	f7fe f8df 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 8006582:	61b8      	str	r0, [r7, #24]
        break;
 8006584:	e008      	b.n	8006598 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800658a:	61bb      	str	r3, [r7, #24]
        break;
 800658c:	e004      	b.n	8006598 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	77bb      	strb	r3, [r7, #30]
        break;
 8006596:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d074      	beq.n	8006688 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	005a      	lsls	r2, r3, #1
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	441a      	add	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	d916      	bls.n	80065e8 <UART_SetConfig+0x228>
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c0:	d212      	bcs.n	80065e8 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f023 030f 	bic.w	r3, r3, #15
 80065ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	085b      	lsrs	r3, r3, #1
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	4313      	orrs	r3, r2
 80065dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	89fa      	ldrh	r2, [r7, #14]
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	e04f      	b.n	8006688 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	77bb      	strb	r3, [r7, #30]
 80065ec:	e04c      	b.n	8006688 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065ee:	7ffb      	ldrb	r3, [r7, #31]
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d828      	bhi.n	8006646 <UART_SetConfig+0x286>
 80065f4:	a201      	add	r2, pc, #4	@ (adr r2, 80065fc <UART_SetConfig+0x23c>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006621 	.word	0x08006621
 8006600:	08006629 	.word	0x08006629
 8006604:	08006631 	.word	0x08006631
 8006608:	08006647 	.word	0x08006647
 800660c:	08006637 	.word	0x08006637
 8006610:	08006647 	.word	0x08006647
 8006614:	08006647 	.word	0x08006647
 8006618:	08006647 	.word	0x08006647
 800661c:	0800663f 	.word	0x0800663f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006620:	f7fe f8ee 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 8006624:	61b8      	str	r0, [r7, #24]
        break;
 8006626:	e013      	b.n	8006650 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006628:	f7fe f90c 	bl	8004844 <HAL_RCC_GetPCLK2Freq>
 800662c:	61b8      	str	r0, [r7, #24]
        break;
 800662e:	e00f      	b.n	8006650 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006630:	4b1f      	ldr	r3, [pc, #124]	@ (80066b0 <UART_SetConfig+0x2f0>)
 8006632:	61bb      	str	r3, [r7, #24]
        break;
 8006634:	e00c      	b.n	8006650 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006636:	f7fe f883 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 800663a:	61b8      	str	r0, [r7, #24]
        break;
 800663c:	e008      	b.n	8006650 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800663e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006642:	61bb      	str	r3, [r7, #24]
        break;
 8006644:	e004      	b.n	8006650 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	77bb      	strb	r3, [r7, #30]
        break;
 800664e:	bf00      	nop
    }

    if (pclk != 0U)
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d018      	beq.n	8006688 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	085a      	lsrs	r2, r3, #1
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	441a      	add	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	fbb2 f3f3 	udiv	r3, r2, r3
 8006668:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b0f      	cmp	r3, #15
 800666e:	d909      	bls.n	8006684 <UART_SetConfig+0x2c4>
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006676:	d205      	bcs.n	8006684 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60da      	str	r2, [r3, #12]
 8006682:	e001      	b.n	8006688 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006694:	7fbb      	ldrb	r3, [r7, #30]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	40013800 	.word	0x40013800
 80066a4:	40021000 	.word	0x40021000
 80066a8:	40004400 	.word	0x40004400
 80066ac:	40004800 	.word	0x40004800
 80066b0:	007a1200 	.word	0x007a1200

080066b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006748:	f003 0310 	and.w	r3, r3, #16
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01a      	beq.n	80067ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067b2:	d10a      	bne.n	80067ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	605a      	str	r2, [r3, #4]
  }
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b098      	sub	sp, #96	@ 0x60
 80067fc:	af02      	add	r7, sp, #8
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006808:	f7fb fd96 	bl	8002338 <HAL_GetTick>
 800680c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b08      	cmp	r3, #8
 800681a:	d12e      	bne.n	800687a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800681c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006824:	2200      	movs	r2, #0
 8006826:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f88c 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d021      	beq.n	800687a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	e853 3f00 	ldrex	r3, [r3]
 8006842:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800684a:	653b      	str	r3, [r7, #80]	@ 0x50
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006854:	647b      	str	r3, [r7, #68]	@ 0x44
 8006856:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800685a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e6      	bne.n	8006836 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e062      	b.n	8006940 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b04      	cmp	r3, #4
 8006886:	d149      	bne.n	800691c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006888:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006890:	2200      	movs	r2, #0
 8006892:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f856 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d03c      	beq.n	800691c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	623b      	str	r3, [r7, #32]
   return(result);
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e6      	bne.n	80068a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068f4:	61fa      	str	r2, [r7, #28]
 80068f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	69b9      	ldr	r1, [r7, #24]
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	617b      	str	r3, [r7, #20]
   return(result);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e5      	bne.n	80068d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e011      	b.n	8006940 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3758      	adds	r7, #88	@ 0x58
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006958:	e04f      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d04b      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fb fce9 	bl	8002338 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <UART_WaitOnFlagUntilTimeout+0x30>
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e04e      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	d037      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b80      	cmp	r3, #128	@ 0x80
 800698e:	d034      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b40      	cmp	r3, #64	@ 0x40
 8006994:	d031      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d110      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2208      	movs	r2, #8
 80069aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f8ed 	bl	8006b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2208      	movs	r2, #8
 80069b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e029      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d4:	d111      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f8d3 	bl	8006b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e00f      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4013      	ands	r3, r2
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	bf0c      	ite	eq
 8006a0a:	2301      	moveq	r3, #1
 8006a0c:	2300      	movne	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d0a0      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b097      	sub	sp, #92	@ 0x5c
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	88fa      	ldrh	r2, [r7, #6]
 8006a44:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a56:	d10e      	bne.n	8006a76 <UART_Start_Receive_IT+0x52>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <UART_Start_Receive_IT+0x48>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006a66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a6a:	e01a      	b.n	8006aa2 <UART_Start_Receive_IT+0x7e>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	22ff      	movs	r2, #255	@ 0xff
 8006a70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a74:	e015      	b.n	8006aa2 <UART_Start_Receive_IT+0x7e>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10d      	bne.n	8006a9a <UART_Start_Receive_IT+0x76>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <UART_Start_Receive_IT+0x6c>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	22ff      	movs	r2, #255	@ 0xff
 8006a8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a8e:	e008      	b.n	8006aa2 <UART_Start_Receive_IT+0x7e>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	227f      	movs	r2, #127	@ 0x7f
 8006a94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a98:	e003      	b.n	8006aa2 <UART_Start_Receive_IT+0x7e>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2222      	movs	r2, #34	@ 0x22
 8006aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3308      	adds	r3, #8
 8006ad0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ad2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ad4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e5      	bne.n	8006ab2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aee:	d107      	bne.n	8006b00 <UART_Start_Receive_IT+0xdc>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d103      	bne.n	8006b00 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4a22      	ldr	r2, [pc, #136]	@ (8006b84 <UART_Start_Receive_IT+0x160>)
 8006afc:	669a      	str	r2, [r3, #104]	@ 0x68
 8006afe:	e002      	b.n	8006b06 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4a21      	ldr	r2, [pc, #132]	@ (8006b88 <UART_Start_Receive_IT+0x164>)
 8006b04:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d019      	beq.n	8006b42 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e6      	bne.n	8006b0e <UART_Start_Receive_IT+0xea>
 8006b40:	e018      	b.n	8006b74 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f043 0320 	orr.w	r3, r3, #32
 8006b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b60:	623b      	str	r3, [r7, #32]
 8006b62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	69f9      	ldr	r1, [r7, #28]
 8006b66:	6a3a      	ldr	r2, [r7, #32]
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e6      	bne.n	8006b42 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	375c      	adds	r7, #92	@ 0x5c
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	08006e7d 	.word	0x08006e7d
 8006b88:	08006cd5 	.word	0x08006cd5

08006b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b095      	sub	sp, #84	@ 0x54
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e6      	bne.n	8006b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e5      	bne.n	8006bc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d118      	bne.n	8006c34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f023 0310 	bic.w	r3, r3, #16
 8006c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6979      	ldr	r1, [r7, #20]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e6      	bne.n	8006c02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c48:	bf00      	nop
 8006c4a:	3754      	adds	r7, #84	@ 0x54
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff fb8e 	bl	8006394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6979      	ldr	r1, [r7, #20]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e6      	bne.n	8006c88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fb5a 	bl	8006380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ccc:	bf00      	nop
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b09c      	sub	sp, #112	@ 0x70
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ce2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cec:	2b22      	cmp	r3, #34	@ 0x22
 8006cee:	f040 80b9 	bne.w	8006e64 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006cf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d00:	b2d9      	uxtb	r1, r3
 8006d02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0c:	400a      	ands	r2, r1
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f040 809c 	bne.w	8006e74 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e6      	bne.n	8006d3c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3308      	adds	r3, #8
 8006d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d80:	f023 0301 	bic.w	r3, r3, #1
 8006d84:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e5      	bne.n	8006d6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d018      	beq.n	8006df6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e6      	bne.n	8006dc4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d12e      	bne.n	8006e5c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f023 0310 	bic.w	r3, r3, #16
 8006e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	69b9      	ldr	r1, [r7, #24]
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e6      	bne.n	8006e04 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d103      	bne.n	8006e4c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2210      	movs	r2, #16
 8006e4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff faa7 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e5a:	e00b      	b.n	8006e74 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fa fe3f 	bl	8001ae0 <HAL_UART_RxCpltCallback>
}
 8006e62:	e007      	b.n	8006e74 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0208 	orr.w	r2, r2, #8
 8006e72:	619a      	str	r2, [r3, #24]
}
 8006e74:	bf00      	nop
 8006e76:	3770      	adds	r7, #112	@ 0x70
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b09c      	sub	sp, #112	@ 0x70
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e94:	2b22      	cmp	r3, #34	@ 0x22
 8006e96:	f040 80b9 	bne.w	800700c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ea0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006eaa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006eae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebe:	1c9a      	adds	r2, r3, #2
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f040 809c 	bne.w	800701c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ef8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f04:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e6      	bne.n	8006ee4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3308      	adds	r3, #8
 8006f34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f36:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e5      	bne.n	8006f16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d018      	beq.n	8006f9e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e6      	bne.n	8006f6c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d12e      	bne.n	8007004 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f023 0310 	bic.w	r3, r3, #16
 8006fc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fca:	61bb      	str	r3, [r7, #24]
 8006fcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	6979      	ldr	r1, [r7, #20]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e6      	bne.n	8006fac <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d103      	bne.n	8006ff4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2210      	movs	r2, #16
 8006ff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff f9d3 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007002:	e00b      	b.n	800701c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fa fd6b 	bl	8001ae0 <HAL_UART_RxCpltCallback>
}
 800700a:	e007      	b.n	800701c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0208 	orr.w	r2, r2, #8
 800701a:	619a      	str	r2, [r3, #24]
}
 800701c:	bf00      	nop
 800701e:	3770      	adds	r7, #112	@ 0x70
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <memset>:
 8007038:	4402      	add	r2, r0
 800703a:	4603      	mov	r3, r0
 800703c:	4293      	cmp	r3, r2
 800703e:	d100      	bne.n	8007042 <memset+0xa>
 8007040:	4770      	bx	lr
 8007042:	f803 1b01 	strb.w	r1, [r3], #1
 8007046:	e7f9      	b.n	800703c <memset+0x4>

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4d0d      	ldr	r5, [pc, #52]	@ (8007080 <__libc_init_array+0x38>)
 800704c:	4c0d      	ldr	r4, [pc, #52]	@ (8007084 <__libc_init_array+0x3c>)
 800704e:	1b64      	subs	r4, r4, r5
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	2600      	movs	r6, #0
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	4d0b      	ldr	r5, [pc, #44]	@ (8007088 <__libc_init_array+0x40>)
 800705a:	4c0c      	ldr	r4, [pc, #48]	@ (800708c <__libc_init_array+0x44>)
 800705c:	f000 f818 	bl	8007090 <_init>
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	2600      	movs	r6, #0
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	f855 3b04 	ldr.w	r3, [r5], #4
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	08007170 	.word	0x08007170
 8007084:	08007170 	.word	0x08007170
 8007088:	08007170 	.word	0x08007170
 800708c:	08007174 	.word	0x08007174

08007090 <_init>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	bf00      	nop
 8007094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007096:	bc08      	pop	{r3}
 8007098:	469e      	mov	lr, r3
 800709a:	4770      	bx	lr

0800709c <_fini>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	bf00      	nop
 80070a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a2:	bc08      	pop	{r3}
 80070a4:	469e      	mov	lr, r3
 80070a6:	4770      	bx	lr
